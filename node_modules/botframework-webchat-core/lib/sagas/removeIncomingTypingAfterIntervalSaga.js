"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = _callee;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _effects = require("redux-saga/effects");

var _incomingActivity = require("../actions/incomingActivity");

var _deleteActivity = _interopRequireDefault(require("../actions/deleteActivity"));

var _marked =
/*#__PURE__*/
_regenerator["default"].mark(removeActivityAfterInterval),
    _marked2 =
/*#__PURE__*/
_regenerator["default"].mark(_callee);

var REMOVE_TYPING_ACTIVITY_AFTER = 5000;

function sleep(ms) {
  return new Promise(function (resolve) {
    return setTimeout(resolve, ms);
  });
}

function removeActivityAfterInterval(_ref) {
  var id;
  return _regenerator["default"].wrap(function removeActivityAfterInterval$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          id = _ref.payload.activity.id;
          _context.next = 3;
          return (0, _effects.call)(sleep, REMOVE_TYPING_ACTIVITY_AFTER);

        case 3:
          _context.next = 5;
          return (0, _effects.put)((0, _deleteActivity["default"])(id));

        case 5:
        case "end":
          return _context.stop();
      }
    }
  }, _marked);
}

function _callee() {
  return _regenerator["default"].wrap(function _callee$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          _context2.next = 2;
          return (0, _effects.takeEvery)(function (_ref2) {
            var type = _ref2.type,
                payload = _ref2.payload;
            return type === _incomingActivity.INCOMING_ACTIVITY && payload.activity.type === 'typing';
          }, removeActivityAfterInterval);

        case 2:
        case "end":
          return _context2.stop();
      }
    }
  }, _marked2);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zYWdhcy9yZW1vdmVJbmNvbWluZ1R5cGluZ0FmdGVySW50ZXJ2YWxTYWdhLmpzIl0sIm5hbWVzIjpbInJlbW92ZUFjdGl2aXR5QWZ0ZXJJbnRlcnZhbCIsIlJFTU9WRV9UWVBJTkdfQUNUSVZJVFlfQUZURVIiLCJzbGVlcCIsIm1zIiwiUHJvbWlzZSIsInJlc29sdmUiLCJzZXRUaW1lb3V0IiwiaWQiLCJwYXlsb2FkIiwiYWN0aXZpdHkiLCJ0eXBlIiwiSU5DT01JTkdfQUNUSVZJVFkiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBRUE7O0FBQ0E7Ozs7NkJBUVVBLDJCOzs7OztBQU5WLElBQU1DLDRCQUE0QixHQUFHLElBQXJDOztBQUVBLFNBQVNDLEtBQVQsQ0FBZUMsRUFBZixFQUFtQjtBQUNqQixTQUFPLElBQUlDLE9BQUosQ0FBWSxVQUFBQyxPQUFPO0FBQUEsV0FBSUMsVUFBVSxDQUFDRCxPQUFELEVBQVVGLEVBQVYsQ0FBZDtBQUFBLEdBQW5CLENBQVA7QUFDRDs7QUFFRCxTQUFVSCwyQkFBVjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFFZ0JPLFVBQUFBLEVBRmhCLFFBQ0VDLE9BREYsQ0FFSUMsUUFGSixDQUVnQkYsRUFGaEI7QUFBQTtBQVFFLGlCQUFNLG1CQUFLTCxLQUFMLEVBQVlELDRCQUFaLENBQU47O0FBUkY7QUFBQTtBQVNFLGlCQUFNLGtCQUFJLGdDQUFlTSxFQUFmLENBQUosQ0FBTjs7QUFURjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFZZTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDYixpQkFBTSx3QkFDSjtBQUFBLGdCQUFHRyxJQUFILFNBQUdBLElBQUg7QUFBQSxnQkFBU0YsT0FBVCxTQUFTQSxPQUFUO0FBQUEsbUJBQXVCRSxJQUFJLEtBQUtDLG1DQUFULElBQThCSCxPQUFPLENBQUNDLFFBQVIsQ0FBaUJDLElBQWpCLEtBQTBCLFFBQS9FO0FBQUEsV0FESSxFQUVKViwyQkFGSSxDQUFOOztBQURhO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY2FsbCwgcHV0LCB0YWtlRXZlcnkgfSBmcm9tICdyZWR1eC1zYWdhL2VmZmVjdHMnO1xuXG5pbXBvcnQgeyBJTkNPTUlOR19BQ1RJVklUWSB9IGZyb20gJy4uL2FjdGlvbnMvaW5jb21pbmdBY3Rpdml0eSc7XG5pbXBvcnQgZGVsZXRlQWN0aXZpdHkgZnJvbSAnLi4vYWN0aW9ucy9kZWxldGVBY3Rpdml0eSc7XG5cbmNvbnN0IFJFTU9WRV9UWVBJTkdfQUNUSVZJVFlfQUZURVIgPSA1MDAwO1xuXG5mdW5jdGlvbiBzbGVlcChtcykge1xuICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIG1zKSk7XG59XG5cbmZ1bmN0aW9uKiByZW1vdmVBY3Rpdml0eUFmdGVySW50ZXJ2YWwoe1xuICBwYXlsb2FkOiB7XG4gICAgYWN0aXZpdHk6IHsgaWQgfVxuICB9XG59KSB7XG4gIC8vIFRPRE86IFtQMl0gV2UgY291bGQgb3B0aW1pemUgaGVyZS5cbiAgLy8gICAgICAgR2l2ZW4gdGhlcmUgaXMgYW4gYWN0aXZpdHkgdHlwaW5nIGFjdGl2aXR5LCB3aGVuIHRoZSBib3Qgc2VuZCBhbm90aGVyIHR5cGluZyBhY3Rpdml0eSwgd2Ugd2lsbCByZW1vdmUgdGhlIGZpcnN0IG9uZS5cbiAgLy8gICAgICAgVGhhdCBtZWFucywgd2UgZG9uJ3QgYWN0dWFsbHkgbmVlZCB0byByZW1vdmUgaXQgYW55bW9yZSwgYW5kIGNvdWxkIGNhbmNlbCBvdXQgdGhpcyBjYWxsLlxuICB5aWVsZCBjYWxsKHNsZWVwLCBSRU1PVkVfVFlQSU5HX0FDVElWSVRZX0FGVEVSKTtcbiAgeWllbGQgcHV0KGRlbGV0ZUFjdGl2aXR5KGlkKSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKigpIHtcbiAgeWllbGQgdGFrZUV2ZXJ5KFxuICAgICh7IHR5cGUsIHBheWxvYWQgfSkgPT4gdHlwZSA9PT0gSU5DT01JTkdfQUNUSVZJVFkgJiYgcGF5bG9hZC5hY3Rpdml0eS50eXBlID09PSAndHlwaW5nJyxcbiAgICByZW1vdmVBY3Rpdml0eUFmdGVySW50ZXJ2YWxcbiAgKTtcbn1cbiJdfQ==