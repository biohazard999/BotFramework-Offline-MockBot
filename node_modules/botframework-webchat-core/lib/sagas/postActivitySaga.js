"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = postActivitySaga;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _effects = require("redux-saga/effects");

var _observeOnce = _interopRequireDefault(require("./effects/observeOnce"));

var _whileConnected = _interopRequireDefault(require("./effects/whileConnected"));

var _language = _interopRequireDefault(require("../selectors/language"));

var _sendTimeout = _interopRequireDefault(require("../selectors/sendTimeout"));

var _deleteKey = _interopRequireDefault(require("../utils/deleteKey"));

var _getTimestamp = _interopRequireDefault(require("../utils/getTimestamp"));

var _sleep = _interopRequireDefault(require("../utils/sleep"));

var _uniqueID = _interopRequireDefault(require("../utils/uniqueID"));

var _postActivity = require("../actions/postActivity");

var _incomingActivity = require("../actions/incomingActivity");

var _marked =
/*#__PURE__*/
_regenerator["default"].mark(postActivity),
    _marked2 =
/*#__PURE__*/
_regenerator["default"].mark(postActivitySaga);

function postActivity(directLine, userID, username, numActivitiesPosted, _ref) {
  var method, activity, locale, _activity, attachments, _activity$channelData, _activity$channelData2, clientActivityID, meta, echoBackCall, sendTimeout, _ref4, echoBack;

  return _regenerator["default"].wrap(function postActivity$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          method = _ref.meta.method, activity = _ref.payload.activity;
          _context2.next = 3;
          return (0, _effects.select)(_language["default"]);

        case 3:
          locale = _context2.sent;
          _activity = activity, attachments = _activity.attachments, _activity$channelData = _activity.channelData;
          _activity$channelData = _activity$channelData === void 0 ? {} : _activity$channelData;
          _activity$channelData2 = _activity$channelData.clientActivityID, clientActivityID = _activity$channelData2 === void 0 ? (0, _uniqueID["default"])() : _activity$channelData2;
          activity = (0, _objectSpread2["default"])({}, (0, _deleteKey["default"])(activity, 'id'), {
            attachments: attachments && attachments.map(function (_ref2) {
              var contentType = _ref2.contentType,
                  contentUrl = _ref2.contentUrl,
                  name = _ref2.name;
              return {
                contentType: contentType,
                contentUrl: contentUrl,
                name: name
              };
            }),
            channelData: (0, _objectSpread2["default"])({
              clientActivityID: clientActivityID
            }, (0, _deleteKey["default"])(activity.channelData, 'state')),
            channelId: 'webchat',
            from: {
              id: userID,
              name: username,
              role: 'user'
            },
            locale: locale,
            timestamp: (0, _getTimestamp["default"])()
          });

          if (!numActivitiesPosted) {
            activity.entities = [].concat((0, _toConsumableArray2["default"])(activity.entities || []), [{
              // TODO: [P4] Currently in v3, we send the capabilities although the client might not actually have them
              //       We need to understand why we need to send these, and only send capabilities the client have
              requiresBotState: true,
              supportsListening: true,
              supportsTts: true,
              type: 'ClientCapabilities'
            }]);
          }

          meta = {
            clientActivityID: clientActivityID,
            method: method
          };
          _context2.next = 12;
          return (0, _effects.put)({
            type: _postActivity.POST_ACTIVITY_PENDING,
            meta: meta,
            payload: {
              activity: activity
            }
          });

        case 12:
          _context2.prev = 12;
          // Quirks: We might receive INCOMING_ACTIVITY before the postActivity call completed
          //         So, we setup expectation first, then postActivity afterward
          echoBackCall = (0, _effects.call)(
          /*#__PURE__*/
          _regenerator["default"].mark(function _callee() {
            var _ref3, _activity2, _activity2$channelDat, channelData, id;

            return _regenerator["default"].wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    _context.next = 2;
                    return (0, _effects.take)(_incomingActivity.INCOMING_ACTIVITY);

                  case 2:
                    _ref3 = _context.sent;
                    _activity2 = _ref3.payload.activity;
                    _activity2$channelDat = _activity2.channelData, channelData = _activity2$channelDat === void 0 ? {} : _activity2$channelDat, id = _activity2.id;

                    if (!(channelData.clientActivityID === clientActivityID && id)) {
                      _context.next = 7;
                      break;
                    }

                    return _context.abrupt("return", _activity2);

                  case 7:
                    _context.next = 0;
                    break;

                  case 9:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee);
          })); // Timeout could be due to either:
          // - Post activity call may take too long time to complete
          //   - Direct Line service only respond on HTTP after bot respond to Direct Line
          // - Activity may take too long time to echo back

          _context2.next = 16;
          return (0, _effects.select)(_sendTimeout["default"]);

        case 16:
          sendTimeout = _context2.sent;
          _context2.next = 19;
          return (0, _effects.race)({
            send: (0, _effects.all)({
              echoBack: echoBackCall,
              postActivity: (0, _observeOnce["default"])(directLine.postActivity(activity))
            }),
            timeout: (0, _effects.call)(function () {
              return (0, _sleep["default"])(sendTimeout).then(function () {
                return Promise.reject(new Error('timeout'));
              });
            })
          });

        case 19:
          _ref4 = _context2.sent;
          echoBack = _ref4.send.echoBack;
          _context2.next = 23;
          return (0, _effects.put)({
            type: _postActivity.POST_ACTIVITY_FULFILLED,
            meta: meta,
            payload: {
              activity: echoBack
            }
          });

        case 23:
          _context2.next = 29;
          break;

        case 25:
          _context2.prev = 25;
          _context2.t0 = _context2["catch"](12);
          _context2.next = 29;
          return (0, _effects.put)({
            type: _postActivity.POST_ACTIVITY_REJECTED,
            error: true,
            meta: meta,
            payload: _context2.t0
          });

        case 29:
          _context2.prev = 29;
          _context2.next = 32;
          return (0, _effects.cancelled)();

        case 32:
          if (!_context2.sent) {
            _context2.next = 35;
            break;
          }

          _context2.next = 35;
          return (0, _effects.put)({
            type: _postActivity.POST_ACTIVITY_REJECTED,
            error: true,
            meta: meta,
            payload: new Error('cancelled')
          });

        case 35:
          return _context2.finish(29);

        case 36:
        case "end":
          return _context2.stop();
      }
    }
  }, _marked, null, [[12, 25, 29, 36]]);
}

function postActivitySaga() {
  return _regenerator["default"].wrap(function postActivitySaga$(_context5) {
    while (1) {
      switch (_context5.prev = _context5.next) {
        case 0:
          _context5.next = 2;
          return (0, _whileConnected["default"])(
          /*#__PURE__*/
          _regenerator["default"].mark(function postActivityWhileConnected(_ref5) {
            var directLine, userID, username, numActivitiesPosted;
            return _regenerator["default"].wrap(function postActivityWhileConnected$(_context4) {
              while (1) {
                switch (_context4.prev = _context4.next) {
                  case 0:
                    directLine = _ref5.directLine, userID = _ref5.userID, username = _ref5.username;
                    numActivitiesPosted = 0;
                    _context4.next = 4;
                    return (0, _effects.takeEvery)(_postActivity.POST_ACTIVITY,
                    /*#__PURE__*/
                    _regenerator["default"].mark(function postActivityWrapper(action) {
                      return _regenerator["default"].wrap(function postActivityWrapper$(_context3) {
                        while (1) {
                          switch (_context3.prev = _context3.next) {
                            case 0:
                              return _context3.delegateYield(postActivity(directLine, userID, username, numActivitiesPosted++, action), "t0", 1);

                            case 1:
                            case "end":
                              return _context3.stop();
                          }
                        }
                      }, postActivityWrapper);
                    }));

                  case 4:
                  case "end":
                    return _context4.stop();
                }
              }
            }, postActivityWhileConnected);
          }));

        case 2:
        case "end":
          return _context5.stop();
      }
    }
  }, _marked2);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zYWdhcy9wb3N0QWN0aXZpdHlTYWdhLmpzIl0sIm5hbWVzIjpbInBvc3RBY3Rpdml0eSIsInBvc3RBY3Rpdml0eVNhZ2EiLCJkaXJlY3RMaW5lIiwidXNlcklEIiwidXNlcm5hbWUiLCJudW1BY3Rpdml0aWVzUG9zdGVkIiwibWV0aG9kIiwibWV0YSIsImFjdGl2aXR5IiwicGF5bG9hZCIsImxhbmd1YWdlU2VsZWN0b3IiLCJsb2NhbGUiLCJhdHRhY2htZW50cyIsImNoYW5uZWxEYXRhIiwiY2xpZW50QWN0aXZpdHlJRCIsIm1hcCIsImNvbnRlbnRUeXBlIiwiY29udGVudFVybCIsIm5hbWUiLCJjaGFubmVsSWQiLCJmcm9tIiwiaWQiLCJyb2xlIiwidGltZXN0YW1wIiwiZW50aXRpZXMiLCJyZXF1aXJlc0JvdFN0YXRlIiwic3VwcG9ydHNMaXN0ZW5pbmciLCJzdXBwb3J0c1R0cyIsInR5cGUiLCJQT1NUX0FDVElWSVRZX1BFTkRJTkciLCJlY2hvQmFja0NhbGwiLCJJTkNPTUlOR19BQ1RJVklUWSIsInNlbmRUaW1lb3V0U2VsZWN0b3IiLCJzZW5kVGltZW91dCIsInNlbmQiLCJlY2hvQmFjayIsInRpbWVvdXQiLCJ0aGVuIiwiUHJvbWlzZSIsInJlamVjdCIsIkVycm9yIiwiUE9TVF9BQ1RJVklUWV9GVUxGSUxMRUQiLCJQT1NUX0FDVElWSVRZX1JFSkVDVEVEIiwiZXJyb3IiLCJwb3N0QWN0aXZpdHlXaGlsZUNvbm5lY3RlZCIsIlBPU1RfQUNUSVZJVFkiLCJwb3N0QWN0aXZpdHlXcmFwcGVyIiwiYWN0aW9uIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7QUFFQTs7QUFDQTs7QUFFQTs7QUFDQTs7QUFFQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQTs7QUFPQTs7Ozs2QkFFVUEsWTs7OzZCQXlGZUMsZ0I7O0FBekZ6QixTQUFVRCxZQUFWLENBQXVCRSxVQUF2QixFQUFtQ0MsTUFBbkMsRUFBMkNDLFFBQTNDLEVBQXFE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O0FBQUE7QUFvRk0saUJBQU0sa0JBQUk7QUFBRW1CLFlBQUFBLElBQUksRUFBRWMsb0NBQVI7QUFBZ0NDLFlBQUFBLEtBQUssRUFBRSxJQUF2QztBQUE2Q3BDLFlBQUFBLElBQUksRUFBSkEsSUFBN0M7QUFBbURFLFlBQUFBLE9BQU8sRUFBRSxJQUFJK0IsS0FBSixDQUFVLFdBQVY7QUFBNUQsV0FBSixDQUFOOztBQXBGTjtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQXlGZSxTQUFVdkMsZ0JBQVY7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ2IsaUJBQU07QUFBQTtBQUFBLHVDQUFlLFNBQVUyQywwQkFBVjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBdUMxQyxvQkFBQUEsVUFBdkMsU0FBdUNBLFVBQXZDLEVBQW1EQyxNQUFuRCxTQUFtREEsTUFBbkQsRUFBMkRDLFFBQTNELFNBQTJEQSxRQUEzRDtBQUNmQyxvQkFBQUEsbUJBRGUsR0FDTyxDQURQO0FBQUE7QUFHbkIsMkJBQU0sd0JBQVV3QywyQkFBVjtBQUFBO0FBQUEsaURBQXlCLFNBQVVDLG1CQUFWLENBQThCQyxNQUE5QjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQzdCLDZEQUFPL0MsWUFBWSxDQUFDRSxVQUFELEVBQWFDLE1BQWIsRUFBcUJDLFFBQXJCLEVBQStCQyxtQkFBbUIsRUFBbEQsRUFBc0QwQyxNQUF0RCxDQUFuQjs7QUFENkI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLHlCQUFVRCxtQkFBVjtBQUFBLHFCQUF6QixFQUFOOztBQUhtQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsZUFBVUYsMEJBQVY7QUFBQSxXQUFmLEVBQU47O0FBRGE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhbGwsIGNhbGwsIGNhbmNlbGxlZCwgcHV0LCByYWNlLCBzZWxlY3QsIHRha2UsIHRha2VFdmVyeSB9IGZyb20gJ3JlZHV4LXNhZ2EvZWZmZWN0cyc7XG5cbmltcG9ydCBvYnNlcnZlT25jZSBmcm9tICcuL2VmZmVjdHMvb2JzZXJ2ZU9uY2UnO1xuaW1wb3J0IHdoaWxlQ29ubmVjdGVkIGZyb20gJy4vZWZmZWN0cy93aGlsZUNvbm5lY3RlZCc7XG5cbmltcG9ydCBsYW5ndWFnZVNlbGVjdG9yIGZyb20gJy4uL3NlbGVjdG9ycy9sYW5ndWFnZSc7XG5pbXBvcnQgc2VuZFRpbWVvdXRTZWxlY3RvciBmcm9tICcuLi9zZWxlY3RvcnMvc2VuZFRpbWVvdXQnO1xuXG5pbXBvcnQgZGVsZXRlS2V5IGZyb20gJy4uL3V0aWxzL2RlbGV0ZUtleSc7XG5pbXBvcnQgZ2V0VGltZXN0YW1wIGZyb20gJy4uL3V0aWxzL2dldFRpbWVzdGFtcCc7XG5pbXBvcnQgc2xlZXAgZnJvbSAnLi4vdXRpbHMvc2xlZXAnO1xuaW1wb3J0IHVuaXF1ZUlEIGZyb20gJy4uL3V0aWxzL3VuaXF1ZUlEJztcblxuaW1wb3J0IHtcbiAgUE9TVF9BQ1RJVklUWSxcbiAgUE9TVF9BQ1RJVklUWV9GVUxGSUxMRUQsXG4gIFBPU1RfQUNUSVZJVFlfUEVORElORyxcbiAgUE9TVF9BQ1RJVklUWV9SRUpFQ1RFRFxufSBmcm9tICcuLi9hY3Rpb25zL3Bvc3RBY3Rpdml0eSc7XG5cbmltcG9ydCB7IElOQ09NSU5HX0FDVElWSVRZIH0gZnJvbSAnLi4vYWN0aW9ucy9pbmNvbWluZ0FjdGl2aXR5JztcblxuZnVuY3Rpb24qIHBvc3RBY3Rpdml0eShkaXJlY3RMaW5lLCB1c2VySUQsIHVzZXJuYW1lLCBudW1BY3Rpdml0aWVzUG9zdGVkLCB7IG1ldGE6IHsgbWV0aG9kIH0sIHBheWxvYWQ6IHsgYWN0aXZpdHkgfSB9KSB7XG4gIGNvbnN0IGxvY2FsZSA9IHlpZWxkIHNlbGVjdChsYW5ndWFnZVNlbGVjdG9yKTtcbiAgY29uc3QgeyBhdHRhY2htZW50cywgY2hhbm5lbERhdGE6IHsgY2xpZW50QWN0aXZpdHlJRCA9IHVuaXF1ZUlEKCkgfSA9IHt9IH0gPSBhY3Rpdml0eTtcblxuICBhY3Rpdml0eSA9IHtcbiAgICAuLi5kZWxldGVLZXkoYWN0aXZpdHksICdpZCcpLFxuICAgIGF0dGFjaG1lbnRzOlxuICAgICAgYXR0YWNobWVudHMgJiZcbiAgICAgIGF0dGFjaG1lbnRzLm1hcCgoeyBjb250ZW50VHlwZSwgY29udGVudFVybCwgbmFtZSB9KSA9PiAoe1xuICAgICAgICBjb250ZW50VHlwZSxcbiAgICAgICAgY29udGVudFVybCxcbiAgICAgICAgbmFtZVxuICAgICAgfSkpLFxuICAgIGNoYW5uZWxEYXRhOiB7XG4gICAgICBjbGllbnRBY3Rpdml0eUlELFxuICAgICAgLi4uZGVsZXRlS2V5KGFjdGl2aXR5LmNoYW5uZWxEYXRhLCAnc3RhdGUnKVxuICAgIH0sXG4gICAgY2hhbm5lbElkOiAnd2ViY2hhdCcsXG4gICAgZnJvbToge1xuICAgICAgaWQ6IHVzZXJJRCxcbiAgICAgIG5hbWU6IHVzZXJuYW1lLFxuICAgICAgcm9sZTogJ3VzZXInXG4gICAgfSxcbiAgICBsb2NhbGUsXG4gICAgdGltZXN0YW1wOiBnZXRUaW1lc3RhbXAoKVxuICB9O1xuXG4gIGlmICghbnVtQWN0aXZpdGllc1Bvc3RlZCkge1xuICAgIGFjdGl2aXR5LmVudGl0aWVzID0gW1xuICAgICAgLi4uKGFjdGl2aXR5LmVudGl0aWVzIHx8IFtdKSxcbiAgICAgIHtcbiAgICAgICAgLy8gVE9ETzogW1A0XSBDdXJyZW50bHkgaW4gdjMsIHdlIHNlbmQgdGhlIGNhcGFiaWxpdGllcyBhbHRob3VnaCB0aGUgY2xpZW50IG1pZ2h0IG5vdCBhY3R1YWxseSBoYXZlIHRoZW1cbiAgICAgICAgLy8gICAgICAgV2UgbmVlZCB0byB1bmRlcnN0YW5kIHdoeSB3ZSBuZWVkIHRvIHNlbmQgdGhlc2UsIGFuZCBvbmx5IHNlbmQgY2FwYWJpbGl0aWVzIHRoZSBjbGllbnQgaGF2ZVxuICAgICAgICByZXF1aXJlc0JvdFN0YXRlOiB0cnVlLFxuICAgICAgICBzdXBwb3J0c0xpc3RlbmluZzogdHJ1ZSxcbiAgICAgICAgc3VwcG9ydHNUdHM6IHRydWUsXG4gICAgICAgIHR5cGU6ICdDbGllbnRDYXBhYmlsaXRpZXMnXG4gICAgICB9XG4gICAgXTtcbiAgfVxuXG4gIGNvbnN0IG1ldGEgPSB7IGNsaWVudEFjdGl2aXR5SUQsIG1ldGhvZCB9O1xuXG4gIHlpZWxkIHB1dCh7IHR5cGU6IFBPU1RfQUNUSVZJVFlfUEVORElORywgbWV0YSwgcGF5bG9hZDogeyBhY3Rpdml0eSB9IH0pO1xuXG4gIHRyeSB7XG4gICAgLy8gUXVpcmtzOiBXZSBtaWdodCByZWNlaXZlIElOQ09NSU5HX0FDVElWSVRZIGJlZm9yZSB0aGUgcG9zdEFjdGl2aXR5IGNhbGwgY29tcGxldGVkXG4gICAgLy8gICAgICAgICBTbywgd2Ugc2V0dXAgZXhwZWN0YXRpb24gZmlyc3QsIHRoZW4gcG9zdEFjdGl2aXR5IGFmdGVyd2FyZFxuXG4gICAgY29uc3QgZWNob0JhY2tDYWxsID0gY2FsbChmdW5jdGlvbiooKSB7XG4gICAgICBmb3IgKDs7KSB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICBwYXlsb2FkOiB7IGFjdGl2aXR5IH1cbiAgICAgICAgfSA9IHlpZWxkIHRha2UoSU5DT01JTkdfQUNUSVZJVFkpO1xuICAgICAgICBjb25zdCB7IGNoYW5uZWxEYXRhID0ge30sIGlkIH0gPSBhY3Rpdml0eTtcblxuICAgICAgICBpZiAoY2hhbm5lbERhdGEuY2xpZW50QWN0aXZpdHlJRCA9PT0gY2xpZW50QWN0aXZpdHlJRCAmJiBpZCkge1xuICAgICAgICAgIHJldHVybiBhY3Rpdml0eTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gVGltZW91dCBjb3VsZCBiZSBkdWUgdG8gZWl0aGVyOlxuICAgIC8vIC0gUG9zdCBhY3Rpdml0eSBjYWxsIG1heSB0YWtlIHRvbyBsb25nIHRpbWUgdG8gY29tcGxldGVcbiAgICAvLyAgIC0gRGlyZWN0IExpbmUgc2VydmljZSBvbmx5IHJlc3BvbmQgb24gSFRUUCBhZnRlciBib3QgcmVzcG9uZCB0byBEaXJlY3QgTGluZVxuICAgIC8vIC0gQWN0aXZpdHkgbWF5IHRha2UgdG9vIGxvbmcgdGltZSB0byBlY2hvIGJhY2tcblxuICAgIGNvbnN0IHNlbmRUaW1lb3V0ID0geWllbGQgc2VsZWN0KHNlbmRUaW1lb3V0U2VsZWN0b3IpO1xuXG4gICAgY29uc3Qge1xuICAgICAgc2VuZDogeyBlY2hvQmFjayB9XG4gICAgfSA9IHlpZWxkIHJhY2Uoe1xuICAgICAgc2VuZDogYWxsKHtcbiAgICAgICAgZWNob0JhY2s6IGVjaG9CYWNrQ2FsbCxcbiAgICAgICAgcG9zdEFjdGl2aXR5OiBvYnNlcnZlT25jZShkaXJlY3RMaW5lLnBvc3RBY3Rpdml0eShhY3Rpdml0eSkpXG4gICAgICB9KSxcbiAgICAgIHRpbWVvdXQ6IGNhbGwoKCkgPT4gc2xlZXAoc2VuZFRpbWVvdXQpLnRoZW4oKCkgPT4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKCd0aW1lb3V0JykpKSlcbiAgICB9KTtcblxuICAgIHlpZWxkIHB1dCh7IHR5cGU6IFBPU1RfQUNUSVZJVFlfRlVMRklMTEVELCBtZXRhLCBwYXlsb2FkOiB7IGFjdGl2aXR5OiBlY2hvQmFjayB9IH0pO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICB5aWVsZCBwdXQoeyB0eXBlOiBQT1NUX0FDVElWSVRZX1JFSkVDVEVELCBlcnJvcjogdHJ1ZSwgbWV0YSwgcGF5bG9hZDogZXJyIH0pO1xuICB9IGZpbmFsbHkge1xuICAgIGlmICh5aWVsZCBjYW5jZWxsZWQoKSkge1xuICAgICAgeWllbGQgcHV0KHsgdHlwZTogUE9TVF9BQ1RJVklUWV9SRUpFQ1RFRCwgZXJyb3I6IHRydWUsIG1ldGEsIHBheWxvYWQ6IG5ldyBFcnJvcignY2FuY2VsbGVkJykgfSk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKiBwb3N0QWN0aXZpdHlTYWdhKCkge1xuICB5aWVsZCB3aGlsZUNvbm5lY3RlZChmdW5jdGlvbiogcG9zdEFjdGl2aXR5V2hpbGVDb25uZWN0ZWQoeyBkaXJlY3RMaW5lLCB1c2VySUQsIHVzZXJuYW1lIH0pIHtcbiAgICBsZXQgbnVtQWN0aXZpdGllc1Bvc3RlZCA9IDA7XG5cbiAgICB5aWVsZCB0YWtlRXZlcnkoUE9TVF9BQ1RJVklUWSwgZnVuY3Rpb24qIHBvc3RBY3Rpdml0eVdyYXBwZXIoYWN0aW9uKSB7XG4gICAgICB5aWVsZCogcG9zdEFjdGl2aXR5KGRpcmVjdExpbmUsIHVzZXJJRCwgdXNlcm5hbWUsIG51bUFjdGl2aXRpZXNQb3N0ZWQrKywgYWN0aW9uKTtcbiAgICB9KTtcbiAgfSk7XG59XG4iXX0=