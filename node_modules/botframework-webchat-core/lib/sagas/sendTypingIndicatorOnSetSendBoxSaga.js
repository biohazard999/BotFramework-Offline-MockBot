"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = sendTypingIndicatorOnSetSendBoxSaga;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _effects = require("redux-saga/effects");

var _setSendBox = require("../actions/setSendBox");

var _setSendTyping = require("../actions/setSendTyping");

var _setSendTypingIndicator = require("../actions/setSendTypingIndicator");

var _postActivity = _interopRequireWildcard(require("../actions/postActivity"));

var _sendTypingIndicator = _interopRequireDefault(require("../selectors/sendTypingIndicator"));

var _sleep = _interopRequireDefault(require("../utils/sleep"));

var _whileConnected = _interopRequireDefault(require("./effects/whileConnected"));

var _marked =
/*#__PURE__*/
_regenerator["default"].mark(sendTypingIndicatorOnSetSendBox),
    _marked2 =
/*#__PURE__*/
_regenerator["default"].mark(sendTypingIndicatorOnSetSendBoxSaga);

var SEND_INTERVAL = 3000;

function takeSendTypingIndicator(value) {
  return (0, _effects.take)(function (_ref) {
    var payload = _ref.payload,
        type = _ref.type;
    return type === _setSendTypingIndicator.SET_SEND_TYPING_INDICATOR && !payload.sendTypingIndicator === !value || // TODO: [P3] Take this deprecation code out when releasing on or after January 13 2020
    type === _setSendTyping.SET_SEND_TYPING && !payload.sendTyping === !value;
  });
}

function sendTypingIndicatorOnSetSendBox() {
  var sendTypingIndicator, _loop;

  return _regenerator["default"].wrap(function sendTypingIndicatorOnSetSendBox$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          _context3.next = 2;
          return (0, _effects.select)(_sendTypingIndicator["default"]);

        case 2:
          sendTypingIndicator = _context3.sent;

          if (sendTypingIndicator) {
            _context3.next = 6;
            break;
          }

          _context3.next = 6;
          return takeSendTypingIndicator(true);

        case 6:
          _loop =
          /*#__PURE__*/
          _regenerator["default"].mark(function _loop() {
            var lastSend, task;
            return _regenerator["default"].wrap(function _loop$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    lastSend = 0;
                    _context2.next = 3;
                    return (0, _effects.takeLatest)(function (_ref2) {
                      var payload = _ref2.payload,
                          type = _ref2.type;
                      return type === _setSendBox.SET_SEND_BOX && payload.text || // Stop sending pending typing indicator if the user has posted anything.
                      // We send typing indicator in a debounce way (t = 0, t = 3000, t = 6000).
                      // When the user type, and then post the activity at t = 1500, we still have a pending typing indicator at t = 3000.
                      // This code is to cancel the typing indicator at t = 3000.
                      type === _postActivity.POST_ACTIVITY && payload.activity.type !== 'typing';
                    },
                    /*#__PURE__*/
                    _regenerator["default"].mark(function _callee(_ref3) {
                      var type, interval;
                      return _regenerator["default"].wrap(function _callee$(_context) {
                        while (1) {
                          switch (_context.prev = _context.next) {
                            case 0:
                              type = _ref3.type;

                              if (!(type === _setSendBox.SET_SEND_BOX)) {
                                _context.next = 9;
                                break;
                              }

                              interval = SEND_INTERVAL - Date.now() + lastSend;

                              if (!(interval > 0)) {
                                _context.next = 6;
                                break;
                              }

                              _context.next = 6;
                              return (0, _effects.call)(_sleep["default"], interval);

                            case 6:
                              _context.next = 8;
                              return (0, _effects.put)((0, _postActivity["default"])({
                                type: 'typing'
                              }));

                            case 8:
                              lastSend = Date.now();

                            case 9:
                            case "end":
                              return _context.stop();
                          }
                        }
                      }, _callee);
                    }));

                  case 3:
                    task = _context2.sent;
                    _context2.next = 6;
                    return takeSendTypingIndicator(false);

                  case 6:
                    _context2.next = 8;
                    return (0, _effects.cancel)(task);

                  case 8:
                    _context2.next = 10;
                    return takeSendTypingIndicator(true);

                  case 10:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _loop);
          });

        case 7:
          return _context3.delegateYield(_loop(), "t0", 8);

        case 8:
          _context3.next = 7;
          break;

        case 10:
        case "end":
          return _context3.stop();
      }
    }
  }, _marked);
}

function sendTypingIndicatorOnSetSendBoxSaga() {
  return _regenerator["default"].wrap(function sendTypingIndicatorOnSetSendBoxSaga$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          _context4.next = 2;
          return (0, _whileConnected["default"])(sendTypingIndicatorOnSetSendBox);

        case 2:
        case "end":
          return _context4.stop();
      }
    }
  }, _marked2);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zYWdhcy9zZW5kVHlwaW5nSW5kaWNhdG9yT25TZXRTZW5kQm94U2FnYS5qcyJdLCJuYW1lcyI6WyJzZW5kVHlwaW5nSW5kaWNhdG9yT25TZXRTZW5kQm94Iiwic2VuZFR5cGluZ0luZGljYXRvck9uU2V0U2VuZEJveFNhZ2EiLCJTRU5EX0lOVEVSVkFMIiwidGFrZVNlbmRUeXBpbmdJbmRpY2F0b3IiLCJ2YWx1ZSIsInBheWxvYWQiLCJ0eXBlIiwiU0VUX1NFTkRfVFlQSU5HX0lORElDQVRPUiIsInNlbmRUeXBpbmdJbmRpY2F0b3IiLCJTRVRfU0VORF9UWVBJTkciLCJzZW5kVHlwaW5nIiwic2VuZFR5cGluZ0luZGljYXRvclNlbGVjdG9yIiwibGFzdFNlbmQiLCJTRVRfU0VORF9CT1giLCJ0ZXh0IiwiUE9TVF9BQ1RJVklUWSIsImFjdGl2aXR5IiwiaW50ZXJ2YWwiLCJEYXRlIiwibm93Iiwic2xlZXAiLCJ0YXNrIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUE7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7NkJBYVVBLCtCOzs7NkJBc0NlQyxtQzs7QUFqRHpCLElBQU1DLGFBQWEsR0FBRyxJQUF0Qjs7QUFFQSxTQUFTQyx1QkFBVCxDQUFpQ0MsS0FBakMsRUFBd0M7QUFDdEMsU0FBTyxtQkFDTDtBQUFBLFFBQUdDLE9BQUgsUUFBR0EsT0FBSDtBQUFBLFFBQVlDLElBQVosUUFBWUEsSUFBWjtBQUFBLFdBQ0dBLElBQUksS0FBS0MsaURBQVQsSUFBc0MsQ0FBQ0YsT0FBTyxDQUFDRyxtQkFBVCxLQUFpQyxDQUFDSixLQUF6RSxJQUNBO0FBQ0NFLElBQUFBLElBQUksS0FBS0csOEJBQVQsSUFBNEIsQ0FBQ0osT0FBTyxDQUFDSyxVQUFULEtBQXdCLENBQUNOLEtBSHhEO0FBQUEsR0FESyxDQUFQO0FBTUQ7O0FBRUQsU0FBVUosK0JBQVY7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQzhCLGlCQUFNLHFCQUFPVywrQkFBUCxDQUFOOztBQUQ5QjtBQUNRSCxVQUFBQSxtQkFEUjs7QUFBQSxjQUdPQSxtQkFIUDtBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUlJLGlCQUFNTCx1QkFBdUIsQ0FBQyxJQUFELENBQTdCOztBQUpKO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQVFRUyxvQkFBQUEsUUFSUixHQVFtQixDQVJuQjtBQUFBO0FBU2lCLDJCQUFNLHlCQUNqQjtBQUFBLDBCQUFHUCxPQUFILFNBQUdBLE9BQUg7QUFBQSwwQkFBWUMsSUFBWixTQUFZQSxJQUFaO0FBQUEsNkJBQ0dBLElBQUksS0FBS08sd0JBQVQsSUFBeUJSLE9BQU8sQ0FBQ1MsSUFBbEMsSUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNDUixzQkFBQUEsSUFBSSxLQUFLUywyQkFBVCxJQUEwQlYsT0FBTyxDQUFDVyxRQUFSLENBQWlCVixJQUFqQixLQUEwQixRQU52RDtBQUFBLHFCQURpQjtBQUFBO0FBQUEsaURBUWpCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFZQSw4QkFBQUEsSUFBWixTQUFZQSxJQUFaOztBQUFBLG9DQUNNQSxJQUFJLEtBQUtPLHdCQURmO0FBQUE7QUFBQTtBQUFBOztBQUVVSSw4QkFBQUEsUUFGVixHQUVxQmYsYUFBYSxHQUFHZ0IsSUFBSSxDQUFDQyxHQUFMLEVBQWhCLEdBQTZCUCxRQUZsRDs7QUFBQSxvQ0FJUUssUUFBUSxHQUFHLENBSm5CO0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBS00scUNBQU0sbUJBQUtHLGlCQUFMLEVBQVlILFFBQVosQ0FBTjs7QUFMTjtBQUFBO0FBUUkscUNBQU0sa0JBQUksOEJBQWE7QUFBRVgsZ0NBQUFBLElBQUksRUFBRTtBQUFSLCtCQUFiLENBQUosQ0FBTjs7QUFSSjtBQVVJTSw4QkFBQUEsUUFBUSxHQUFHTSxJQUFJLENBQUNDLEdBQUwsRUFBWDs7QUFWSjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxxQkFSaUIsRUFBTjs7QUFUakI7QUFTVUUsb0JBQUFBLElBVFY7QUFBQTtBQWdDSSwyQkFBTWxCLHVCQUF1QixDQUFDLEtBQUQsQ0FBN0I7O0FBaENKO0FBQUE7QUFpQ0ksMkJBQU0scUJBQU9rQixJQUFQLENBQU47O0FBakNKO0FBQUE7QUFrQ0ksMkJBQU1sQix1QkFBdUIsQ0FBQyxJQUFELENBQTdCOztBQWxDSjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBOztBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFzQ2UsU0FBVUYsbUNBQVY7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ2IsaUJBQU0sZ0NBQWVELCtCQUFmLENBQU47O0FBRGE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjYWxsLCBjYW5jZWwsIHB1dCwgc2VsZWN0LCB0YWtlLCB0YWtlTGF0ZXN0IH0gZnJvbSAncmVkdXgtc2FnYS9lZmZlY3RzJztcblxuaW1wb3J0IHsgU0VUX1NFTkRfQk9YIH0gZnJvbSAnLi4vYWN0aW9ucy9zZXRTZW5kQm94JztcbmltcG9ydCB7IFNFVF9TRU5EX1RZUElORyB9IGZyb20gJy4uL2FjdGlvbnMvc2V0U2VuZFR5cGluZyc7XG5pbXBvcnQgeyBTRVRfU0VORF9UWVBJTkdfSU5ESUNBVE9SIH0gZnJvbSAnLi4vYWN0aW9ucy9zZXRTZW5kVHlwaW5nSW5kaWNhdG9yJztcbmltcG9ydCBwb3N0QWN0aXZpdHksIHsgUE9TVF9BQ1RJVklUWSB9IGZyb20gJy4uL2FjdGlvbnMvcG9zdEFjdGl2aXR5JztcbmltcG9ydCBzZW5kVHlwaW5nSW5kaWNhdG9yU2VsZWN0b3IgZnJvbSAnLi4vc2VsZWN0b3JzL3NlbmRUeXBpbmdJbmRpY2F0b3InO1xuaW1wb3J0IHNsZWVwIGZyb20gJy4uL3V0aWxzL3NsZWVwJztcbmltcG9ydCB3aGlsZUNvbm5lY3RlZCBmcm9tICcuL2VmZmVjdHMvd2hpbGVDb25uZWN0ZWQnO1xuXG5jb25zdCBTRU5EX0lOVEVSVkFMID0gMzAwMDtcblxuZnVuY3Rpb24gdGFrZVNlbmRUeXBpbmdJbmRpY2F0b3IodmFsdWUpIHtcbiAgcmV0dXJuIHRha2UoXG4gICAgKHsgcGF5bG9hZCwgdHlwZSB9KSA9PlxuICAgICAgKHR5cGUgPT09IFNFVF9TRU5EX1RZUElOR19JTkRJQ0FUT1IgJiYgIXBheWxvYWQuc2VuZFR5cGluZ0luZGljYXRvciA9PT0gIXZhbHVlKSB8fFxuICAgICAgLy8gVE9ETzogW1AzXSBUYWtlIHRoaXMgZGVwcmVjYXRpb24gY29kZSBvdXQgd2hlbiByZWxlYXNpbmcgb24gb3IgYWZ0ZXIgSmFudWFyeSAxMyAyMDIwXG4gICAgICAodHlwZSA9PT0gU0VUX1NFTkRfVFlQSU5HICYmICFwYXlsb2FkLnNlbmRUeXBpbmcgPT09ICF2YWx1ZSlcbiAgKTtcbn1cblxuZnVuY3Rpb24qIHNlbmRUeXBpbmdJbmRpY2F0b3JPblNldFNlbmRCb3goKSB7XG4gIGNvbnN0IHNlbmRUeXBpbmdJbmRpY2F0b3IgPSB5aWVsZCBzZWxlY3Qoc2VuZFR5cGluZ0luZGljYXRvclNlbGVjdG9yKTtcblxuICBpZiAoIXNlbmRUeXBpbmdJbmRpY2F0b3IpIHtcbiAgICB5aWVsZCB0YWtlU2VuZFR5cGluZ0luZGljYXRvcih0cnVlKTtcbiAgfVxuXG4gIGZvciAoOzspIHtcbiAgICBsZXQgbGFzdFNlbmQgPSAwO1xuICAgIGNvbnN0IHRhc2sgPSB5aWVsZCB0YWtlTGF0ZXN0KFxuICAgICAgKHsgcGF5bG9hZCwgdHlwZSB9KSA9PlxuICAgICAgICAodHlwZSA9PT0gU0VUX1NFTkRfQk9YICYmIHBheWxvYWQudGV4dCkgfHxcbiAgICAgICAgLy8gU3RvcCBzZW5kaW5nIHBlbmRpbmcgdHlwaW5nIGluZGljYXRvciBpZiB0aGUgdXNlciBoYXMgcG9zdGVkIGFueXRoaW5nLlxuICAgICAgICAvLyBXZSBzZW5kIHR5cGluZyBpbmRpY2F0b3IgaW4gYSBkZWJvdW5jZSB3YXkgKHQgPSAwLCB0ID0gMzAwMCwgdCA9IDYwMDApLlxuICAgICAgICAvLyBXaGVuIHRoZSB1c2VyIHR5cGUsIGFuZCB0aGVuIHBvc3QgdGhlIGFjdGl2aXR5IGF0IHQgPSAxNTAwLCB3ZSBzdGlsbCBoYXZlIGEgcGVuZGluZyB0eXBpbmcgaW5kaWNhdG9yIGF0IHQgPSAzMDAwLlxuICAgICAgICAvLyBUaGlzIGNvZGUgaXMgdG8gY2FuY2VsIHRoZSB0eXBpbmcgaW5kaWNhdG9yIGF0IHQgPSAzMDAwLlxuICAgICAgICAodHlwZSA9PT0gUE9TVF9BQ1RJVklUWSAmJiBwYXlsb2FkLmFjdGl2aXR5LnR5cGUgIT09ICd0eXBpbmcnKSxcbiAgICAgIGZ1bmN0aW9uKih7IHR5cGUgfSkge1xuICAgICAgICBpZiAodHlwZSA9PT0gU0VUX1NFTkRfQk9YKSB7XG4gICAgICAgICAgY29uc3QgaW50ZXJ2YWwgPSBTRU5EX0lOVEVSVkFMIC0gRGF0ZS5ub3coKSArIGxhc3RTZW5kO1xuXG4gICAgICAgICAgaWYgKGludGVydmFsID4gMCkge1xuICAgICAgICAgICAgeWllbGQgY2FsbChzbGVlcCwgaW50ZXJ2YWwpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHlpZWxkIHB1dChwb3N0QWN0aXZpdHkoeyB0eXBlOiAndHlwaW5nJyB9KSk7XG5cbiAgICAgICAgICBsYXN0U2VuZCA9IERhdGUubm93KCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICApO1xuXG4gICAgeWllbGQgdGFrZVNlbmRUeXBpbmdJbmRpY2F0b3IoZmFsc2UpO1xuICAgIHlpZWxkIGNhbmNlbCh0YXNrKTtcbiAgICB5aWVsZCB0YWtlU2VuZFR5cGluZ0luZGljYXRvcih0cnVlKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiogc2VuZFR5cGluZ0luZGljYXRvck9uU2V0U2VuZEJveFNhZ2EoKSB7XG4gIHlpZWxkIHdoaWxlQ29ubmVjdGVkKHNlbmRUeXBpbmdJbmRpY2F0b3JPblNldFNlbmRCb3gpO1xufVxuIl19