"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.connectMicrophoneButton = exports.default = void 0;

var _botframeworkWebchatCore = require("botframework-webchat-core");

var _glamor = require("glamor");

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _Localize = require("../Localization/Localize");

var _connectToWebChat = _interopRequireDefault(require("../connectToWebChat"));

var _IconButton = _interopRequireDefault(require("./IconButton"));

var _MicrophoneIcon = _interopRequireDefault(require("./Assets/MicrophoneIcon"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// This is required for aria-controls.

/* eslint react/forbid-dom-props: "off" */
var DictateState = _botframeworkWebchatCore.Constants.DictateState;
var ROOT_CSS = (0, _glamor.css)({
  display: 'flex',
  height: '100%',
  '& > .sr-only': {
    color: 'transparent',
    height: 1,
    left: -10000,
    overflow: 'hidden',
    position: 'absolute',
    top: 'auto',
    width: 1
  }
});

var connectMicrophoneButton = function connectMicrophoneButton() {
  for (var _len = arguments.length, selectors = new Array(_len), _key = 0; _key < _len; _key++) {
    selectors[_key] = arguments[_key];
  }

  return _connectToWebChat.default.apply(void 0, [function (_ref) {
    var disabled = _ref.disabled,
        dictateInterims = _ref.dictateInterims,
        dictateState = _ref.dictateState,
        language = _ref.language,
        setSendBox = _ref.setSendBox,
        startDictate = _ref.startDictate,
        stopDictate = _ref.stopDictate;
    return {
      click: function click() {
        if (dictateState === DictateState.STARTING || dictateState === DictateState.DICTATING) {
          stopDictate();
          setSendBox(dictateInterims.join(' '));
        } else {
          startDictate();
        }
      },
      dictating: dictateState === DictateState.DICTATING,
      disabled: disabled || dictateState === DictateState.STARTING || dictateState === DictateState.STOPPING,
      language: language
    };
  }].concat(selectors));
};

exports.connectMicrophoneButton = connectMicrophoneButton;

var MicrophoneButton = function MicrophoneButton(_ref2) {
  var className = _ref2.className,
      click = _ref2.click,
      dictating = _ref2.dictating,
      disabled = _ref2.disabled,
      language = _ref2.language,
      styleSet = _ref2.styleSet;
  return _react.default.createElement("div", {
    "aria-controls": "webchatSendBoxMicrophoneButton",
    className: (0, _classnames.default)(styleSet.microphoneButton + '', ROOT_CSS + '', className + '', {
      dictating: dictating
    })
  }, _react.default.createElement(_IconButton.default, {
    alt: (0, _Localize.localize)('Speak', language),
    disabled: disabled,
    onClick: click
  }, _react.default.createElement(_MicrophoneIcon.default, null)), _react.default.createElement("div", {
    "aria-live": "polite",
    className: "sr-only",
    id: "webchatSendBoxMicrophoneButton",
    role: "status"
  }, (0, _Localize.localize)(dictating ? 'Microphone on' : 'Microphone off', language)));
};

MicrophoneButton.defaultProps = {
  className: '',
  dictating: false,
  disabled: false
};
MicrophoneButton.propTypes = {
  className: _propTypes.default.string,
  click: _propTypes.default.func.isRequired,
  dictating: _propTypes.default.bool,
  disabled: _propTypes.default.bool,
  language: _propTypes.default.string.isRequired,
  styleSet: _propTypes.default.shape({
    microphoneButton: _propTypes.default.any.isRequired
  }).isRequired
};

var _default = connectMicrophoneButton(function (_ref3) {
  var styleSet = _ref3.styleSet;
  return {
    styleSet: styleSet
  };
})(MicrophoneButton);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9TZW5kQm94L01pY3JvcGhvbmVCdXR0b24uanMiXSwibmFtZXMiOlsiRGljdGF0ZVN0YXRlIiwiQ29uc3RhbnRzIiwiUk9PVF9DU1MiLCJkaXNwbGF5IiwiaGVpZ2h0IiwiY29sb3IiLCJsZWZ0Iiwib3ZlcmZsb3ciLCJwb3NpdGlvbiIsInRvcCIsIndpZHRoIiwiY29ubmVjdE1pY3JvcGhvbmVCdXR0b24iLCJzZWxlY3RvcnMiLCJjb25uZWN0VG9XZWJDaGF0IiwiZGlzYWJsZWQiLCJkaWN0YXRlSW50ZXJpbXMiLCJkaWN0YXRlU3RhdGUiLCJsYW5ndWFnZSIsInNldFNlbmRCb3giLCJzdGFydERpY3RhdGUiLCJzdG9wRGljdGF0ZSIsImNsaWNrIiwiU1RBUlRJTkciLCJESUNUQVRJTkciLCJqb2luIiwiZGljdGF0aW5nIiwiU1RPUFBJTkciLCJNaWNyb3Bob25lQnV0dG9uIiwiY2xhc3NOYW1lIiwic3R5bGVTZXQiLCJtaWNyb3Bob25lQnV0dG9uIiwiZGVmYXVsdFByb3BzIiwicHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwic3RyaW5nIiwiZnVuYyIsImlzUmVxdWlyZWQiLCJib29sIiwic2hhcGUiLCJhbnkiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFHQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQTs7QUFDQTs7QUFDQTs7QUFDQTs7OztBQVpBOztBQUNBO0lBYVFBLFksR0FBaUJDLGtDLENBQWpCRCxZO0FBRVIsSUFBTUUsUUFBUSxHQUFHLGlCQUFJO0FBQ25CQyxFQUFBQSxPQUFPLEVBQUUsTUFEVTtBQUVuQkMsRUFBQUEsTUFBTSxFQUFFLE1BRlc7QUFJbkIsa0JBQWdCO0FBQ2RDLElBQUFBLEtBQUssRUFBRSxhQURPO0FBRWRELElBQUFBLE1BQU0sRUFBRSxDQUZNO0FBR2RFLElBQUFBLElBQUksRUFBRSxDQUFDLEtBSE87QUFJZEMsSUFBQUEsUUFBUSxFQUFFLFFBSkk7QUFLZEMsSUFBQUEsUUFBUSxFQUFFLFVBTEk7QUFN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QkFBVUUsSUFBVixDQUFlQyxVQUZLO0FBRzNCWCxFQUFBQSxTQUFTLEVBQUVRLG1CQUFVSSxJQUhNO0FBSTNCdkIsRUFBQUEsUUFBUSxFQUFFbUIsbUJBQVVJLElBSk87QUFLM0JwQixFQUFBQSxRQUFRLEVBQUVnQixtQkFBVUMsTUFBVixDQUFpQkUsVUFMQTtBQU0zQlAsRUFBQUEsUUFBUSxFQUFFSSxtQkFBVUssS0FBVixDQUFnQjtBQUN4QlIsSUFBQUEsZ0JBQWdCLEVBQUVHLG1CQUFVTSxHQUFWLENBQWNIO0FBRFIsR0FBaEIsRUFFUEE7QUFSd0IsQ0FBN0I7O2VBV2V6Qix1QkFBdUIsQ0FBQztBQUFBLE1BQUdrQixRQUFILFNBQUdBLFFBQUg7QUFBQSxTQUFtQjtBQUFFQSxJQUFBQSxRQUFRLEVBQVJBO0FBQUYsR0FBbkI7QUFBQSxDQUFELENBQXZCLENBQTBERixnQkFBMUQsQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIFRoaXMgaXMgcmVxdWlyZWQgZm9yIGFyaWEtY29udHJvbHMuXG4vKiBlc2xpbnQgcmVhY3QvZm9yYmlkLWRvbS1wcm9wczogXCJvZmZcIiAqL1xuXG5pbXBvcnQgeyBDb25zdGFudHMgfSBmcm9tICdib3RmcmFtZXdvcmstd2ViY2hhdC1jb3JlJztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ2dsYW1vcic7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyBsb2NhbGl6ZSB9IGZyb20gJy4uL0xvY2FsaXphdGlvbi9Mb2NhbGl6ZSc7XG5pbXBvcnQgY29ubmVjdFRvV2ViQ2hhdCBmcm9tICcuLi9jb25uZWN0VG9XZWJDaGF0JztcbmltcG9ydCBJY29uQnV0dG9uIGZyb20gJy4vSWNvbkJ1dHRvbic7XG5pbXBvcnQgTWljcm9waG9uZUljb24gZnJvbSAnLi9Bc3NldHMvTWljcm9waG9uZUljb24nO1xuXG5jb25zdCB7IERpY3RhdGVTdGF0ZSB9ID0gQ29uc3RhbnRzO1xuXG5jb25zdCBST09UX0NTUyA9IGNzcyh7XG4gIGRpc3BsYXk6ICdmbGV4JyxcbiAgaGVpZ2h0OiAnMTAwJScsXG5cbiAgJyYgPiAuc3Itb25seSc6IHtcbiAgICBjb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgICBoZWlnaHQ6IDEsXG4gICAgbGVmdDogLTEwMDAwLFxuICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICB0b3A6ICdhdXRvJyxcbiAgICB3aWR0aDogMVxuICB9XG59KTtcblxuY29uc3QgY29ubmVjdE1pY3JvcGhvbmVCdXR0b24gPSAoLi4uc2VsZWN0b3JzKSA9PlxuICBjb25uZWN0VG9XZWJDaGF0KFxuICAgICh7IGRpc2FibGVkLCBkaWN0YXRlSW50ZXJpbXMsIGRpY3RhdGVTdGF0ZSwgbGFuZ3VhZ2UsIHNldFNlbmRCb3gsIHN0YXJ0RGljdGF0ZSwgc3RvcERpY3RhdGUgfSkgPT4gKHtcbiAgICAgIGNsaWNrOiAoKSA9PiB7XG4gICAgICAgIGlmIChkaWN0YXRlU3RhdGUgPT09IERpY3RhdGVTdGF0ZS5TVEFSVElORyB8fCBkaWN0YXRlU3RhdGUgPT09IERpY3RhdGVTdGF0ZS5ESUNUQVRJTkcpIHtcbiAgICAgICAgICBzdG9wRGljdGF0ZSgpO1xuICAgICAgICAgIHNldFNlbmRCb3goZGljdGF0ZUludGVyaW1zLmpvaW4oJyAnKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3RhcnREaWN0YXRlKCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBkaWN0YXRpbmc6IGRpY3RhdGVTdGF0ZSA9PT0gRGljdGF0ZVN0YXRlLkRJQ1RBVElORyxcbiAgICAgIGRpc2FibGVkOiBkaXNhYmxlZCB8fCAoZGljdGF0ZVN0YXRlID09PSBEaWN0YXRlU3RhdGUuU1RBUlRJTkcgfHwgZGljdGF0ZVN0YXRlID09PSBEaWN0YXRlU3RhdGUuU1RPUFBJTkcpLFxuICAgICAgbGFuZ3VhZ2VcbiAgICB9KSxcbiAgICAuLi5zZWxlY3RvcnNcbiAgKTtcblxuY29uc3QgTWljcm9waG9uZUJ1dHRvbiA9ICh7IGNsYXNzTmFtZSwgY2xpY2ssIGRpY3RhdGluZywgZGlzYWJsZWQsIGxhbmd1YWdlLCBzdHlsZVNldCB9KSA9PiAoXG4gIDxkaXZcbiAgICBhcmlhLWNvbnRyb2xzPVwid2ViY2hhdFNlbmRCb3hNaWNyb3Bob25lQnV0dG9uXCJcbiAgICBjbGFzc05hbWU9e2NsYXNzTmFtZXMoc3R5bGVTZXQubWljcm9waG9uZUJ1dHRvbiArICcnLCBST09UX0NTUyArICcnLCBjbGFzc05hbWUgKyAnJywgeyBkaWN0YXRpbmcgfSl9XG4gID5cbiAgICA8SWNvbkJ1dHRvbiBhbHQ9e2xvY2FsaXplKCdTcGVhaycsIGxhbmd1YWdlKX0gZGlzYWJsZWQ9e2Rpc2FibGVkfSBvbkNsaWNrPXtjbGlja30+XG4gICAgICA8TWljcm9waG9uZUljb24gLz5cbiAgICA8L0ljb25CdXR0b24+XG4gICAgPGRpdiBhcmlhLWxpdmU9XCJwb2xpdGVcIiBjbGFzc05hbWU9XCJzci1vbmx5XCIgaWQ9XCJ3ZWJjaGF0U2VuZEJveE1pY3JvcGhvbmVCdXR0b25cIiByb2xlPVwic3RhdHVzXCI+XG4gICAgICB7bG9jYWxpemUoZGljdGF0aW5nID8gJ01pY3JvcGhvbmUgb24nIDogJ01pY3JvcGhvbmUgb2ZmJywgbGFuZ3VhZ2UpfVxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbik7XG5cbk1pY3JvcGhvbmVCdXR0b24uZGVmYXVsdFByb3BzID0ge1xuICBjbGFzc05hbWU6ICcnLFxuICBkaWN0YXRpbmc6IGZhbHNlLFxuICBkaXNhYmxlZDogZmFsc2Vcbn07XG5cbk1pY3JvcGhvbmVCdXR0b24ucHJvcFR5cGVzID0ge1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGNsaWNrOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBkaWN0YXRpbmc6IFByb3BUeXBlcy5ib29sLFxuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG4gIGxhbmd1YWdlOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIHN0eWxlU2V0OiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIG1pY3JvcGhvbmVCdXR0b246IFByb3BUeXBlcy5hbnkuaXNSZXF1aXJlZFxuICB9KS5pc1JlcXVpcmVkXG59O1xuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0TWljcm9waG9uZUJ1dHRvbigoeyBzdHlsZVNldCB9KSA9PiAoeyBzdHlsZVNldCB9KSkoTWljcm9waG9uZUJ1dHRvbik7XG5cbmV4cG9ydCB7IGNvbm5lY3RNaWNyb3Bob25lQnV0dG9uIH07XG4iXX0=