"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.connectSendTextBox = exports.default = void 0;

var _glamor = require("glamor");

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _TypeFocusSink = require("../Utils/TypeFocusSink");

var _Localize = require("../Localization/Localize");

var _connectToWebChat = _interopRequireDefault(require("../connectToWebChat"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ROOT_CSS = (0, _glamor.css)({
  display: 'flex',
  '& > div, input': {
    flex: 1
  }
});

var connectSendTextBox = function connectSendTextBox() {
  for (var _len = arguments.length, selectors = new Array(_len), _key = 0; _key < _len; _key++) {
    selectors[_key] = arguments[_key];
  }

  return _connectToWebChat.default.apply(void 0, [function (_ref) {
    var disabled = _ref.disabled,
        focusSendBox = _ref.focusSendBox,
        language = _ref.language,
        scrollToEnd = _ref.scrollToEnd,
        sendBoxValue = _ref.sendBoxValue,
        setSendBox = _ref.setSendBox,
        stopDictate = _ref.stopDictate,
        submitSendBox = _ref.submitSendBox;
    return {
      disabled: disabled,
      language: language,
      onChange: function onChange(_ref2) {
        var value = _ref2.target.value;
        setSendBox(value);
        stopDictate();
      },
      onKeyPress: function onKeyPress(event) {
        var key = event.key,
            shiftKey = event.shiftKey;

        if (key === 'Enter' && !shiftKey) {
          event.preventDefault();

          if (sendBoxValue) {
            setSendBox(sendBoxValue.trim());
            scrollToEnd();
            submitSendBox();
            focusSendBox();
          }
        }
      },
      onSubmit: function onSubmit(event) {
        event.preventDefault(); // Consider clearing the send box only after we received POST_ACTIVITY_PENDING
        // E.g. if the connection is bad, sending the message essentially do nothing but just clearing the send box

        if (sendBoxValue) {
          scrollToEnd();
          submitSendBox();
        }
      },
      value: sendBoxValue
    };
  }].concat(selectors));
};

exports.connectSendTextBox = connectSendTextBox;

var TextBox = function TextBox(_ref3) {
  var className = _ref3.className,
      disabled = _ref3.disabled,
      language = _ref3.language,
      onChange = _ref3.onChange,
      onKeyPress = _ref3.onKeyPress,
      onSubmit = _ref3.onSubmit,
      styleSet = _ref3.styleSet,
      value = _ref3.value;
  var typeYourMessageString = (0, _Localize.localize)('Type your message', language);
  var sendBoxTextWrap = styleSet.options.sendBoxTextWrap;
  return _react.default.createElement("form", {
    className: (0, _classnames.default)(ROOT_CSS + '', styleSet.sendBoxTextArea + '', styleSet.sendBoxTextBox + '', className + ''),
    onSubmit: onSubmit
  }, _react.default.createElement(_TypeFocusSink.Context.Consumer, null, function (_ref4) {
    var sendFocusRef = _ref4.sendFocusRef;
    return !sendBoxTextWrap ? _react.default.createElement("input", {
      "aria-label": typeYourMessageString,
      "data-id": "webchat-sendbox-input",
      disabled: disabled,
      onChange: onChange,
      placeholder: typeYourMessageString,
      ref: sendFocusRef,
      type: "text",
      value: value
    }) : _react.default.createElement("div", null, _react.default.createElement("textarea", {
      "aria-label": typeYourMessageString,
      "data-id": "webchat-sendbox-input",
      disabled: disabled,
      onChange: onChange,
      onKeyPress: onKeyPress,
      placeholder: typeYourMessageString,
      ref: sendFocusRef,
      rows: "1",
      value: value
    }), _react.default.createElement("div", null, value + '\n'));
  }));
};

TextBox.defaultProps = {
  className: '',
  disabled: false,
  value: ''
};
TextBox.propTypes = {
  className: _propTypes.default.string,
  disabled: _propTypes.default.bool,
  language: _propTypes.default.string.isRequired,
  onChange: _propTypes.default.func.isRequired,
  onKeyPress: _propTypes.default.func.isRequired,
  onSubmit: _propTypes.default.func.isRequired,
  styleSet: _propTypes.default.shape({
    options: _propTypes.default.shape({
      sendBoxTextWrap: _propTypes.default.bool.isRequired
    }).isRequired
  }).isRequired,
  value: _propTypes.default.string
};

var _default = connectSendTextBox(function (_ref5) {
  var styleSet = _ref5.styleSet;
  return {
    styleSet: styleSet
  };
})(TextBox);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9TZW5kQm94L1RleHRCb3guanMiXSwibmFtZXMiOlsiUk9PVF9DU1MiLCJkaXNwbGF5IiwiZmxleCIsImNvbm5lY3RTZW5kVGV4dEJveCIsInNlbGVjdG9ycyIsImNvbm5lY3RUb1dlYkNoYXQiLCJkaXNhYmxlZCIsImZvY3VzU2VuZEJveCIsImxhbmd1YWdlIiwic2Nyb2xsVG9FbmQiLCJzZW5kQm94VmFsdWUiLCJzZXRTZW5kQm94Iiwic3RvcERpY3RhdGUiLCJzdWJtaXRTZW5kQm94Iiwib25DaGFuZ2UiLCJ2YWx1ZSIsInRhcmdldCIsIm9uS2V5UHJlc3MiLCJldmVudCIsImtleSIsInNoaWZ0S2V5IiwicHJldmVudERlZmF1bHQiLCJ0cmltIiwib25TdWJtaXQiLCJUZXh0Qm94IiwiY2xhc3NOYW1lIiwic3R5bGVTZXQiLCJ0eXBlWW91ck1lc3NhZ2VTdHJpbmciLCJzZW5kQm94VGV4dFdyYXAiLCJvcHRpb25zIiwic2VuZEJveFRleHRBcmVhIiwic2VuZEJveFRleHRCb3giLCJzZW5kRm9jdXNSZWYiLCJkZWZhdWx0UHJvcHMiLCJwcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJzdHJpbmciLCJib29sIiwiaXNSZXF1aXJlZCIsImZ1bmMiLCJzaGFwZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUVBOztBQUNBOztBQUNBOzs7O0FBRUEsSUFBTUEsUUFBUSxHQUFHLGlCQUFJO0FBQ25CQyxFQUFBQSxPQUFPLEVBQUUsTUFEVTtBQUduQixvQkFBa0I7QUFDaEJDLElBQUFBLElBQUksRUFBRTtBQURVO0FBSEMsQ0FBSixDQUFqQjs7QUFRQSxJQUFNQyxrQkFBa0IsR0FBRyxTQUFyQkEsa0JBQXFCO0FBQUEsb0NBQUlDLFNBQUo7QUFBSUEsSUFBQUEsU0FBSjtBQUFBOztBQUFBLFNBQ3pCQyx5Q0FDRTtBQUFBLFFBQUdDLFFBQUgsUUFBR0EsUUFBSDtBQUFBLFFBQWFDLFlBQWIsUUFBYUEsWUFBYjtB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QUVOQTtBQUhxQixHQUFoQixFQUlQQSxVQVhlO0FBWWxCdkIsRUFBQUEsS0FBSyxFQUFFb0IsbUJBQVVDO0FBWkMsQ0FBcEI7O2VBZWVqQyxrQkFBa0IsQ0FBQztBQUFBLE1BQUd1QixRQUFILFNBQUdBLFFBQUg7QUFBQSxTQUFtQjtBQUFFQSxJQUFBQSxRQUFRLEVBQVJBO0FBQUYsR0FBbkI7QUFBQSxDQUFELENBQWxCLENBQXFERixPQUFyRCxDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3NzIH0gZnJvbSAnZ2xhbW9yJztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IENvbnRleHQgYXMgVHlwZUZvY3VzU2lua0NvbnRleHQgfSBmcm9tICcuLi9VdGlscy9UeXBlRm9jdXNTaW5rJztcbmltcG9ydCB7IGxvY2FsaXplIH0gZnJvbSAnLi4vTG9jYWxpemF0aW9uL0xvY2FsaXplJztcbmltcG9ydCBjb25uZWN0VG9XZWJDaGF0IGZyb20gJy4uL2Nvbm5lY3RUb1dlYkNoYXQnO1xuXG5jb25zdCBST09UX0NTUyA9IGNzcyh7XG4gIGRpc3BsYXk6ICdmbGV4JyxcblxuICAnJiA+IGRpdiwgaW5wdXQnOiB7XG4gICAgZmxleDogMVxuICB9XG59KTtcblxuY29uc3QgY29ubmVjdFNlbmRUZXh0Qm94ID0gKC4uLnNlbGVjdG9ycykgPT5cbiAgY29ubmVjdFRvV2ViQ2hhdChcbiAgICAoeyBkaXNhYmxlZCwgZm9jdXNTZW5kQm94LCBsYW5ndWFnZSwgc2Nyb2xsVG9FbmQsIHNlbmRCb3hWYWx1ZSwgc2V0U2VuZEJveCwgc3RvcERpY3RhdGUsIHN1Ym1pdFNlbmRCb3ggfSkgPT4gKHtcbiAgICAgIGRpc2FibGVkLFxuICAgICAgbGFuZ3VhZ2UsXG4gICAgICBvbkNoYW5nZTogKHsgdGFyZ2V0OiB7IHZhbHVlIH0gfSkgPT4ge1xuICAgICAgICBzZXRTZW5kQm94KHZhbHVlKTtcbiAgICAgICAgc3RvcERpY3RhdGUoKTtcbiAgICAgIH0sXG4gICAgICBvbktleVByZXNzOiBldmVudCA9PiB7XG4gICAgICAgIGNvbnN0IHsga2V5LCBzaGlmdEtleSB9ID0gZXZlbnQ7XG5cbiAgICAgICAgaWYgKGtleSA9PT0gJ0VudGVyJyAmJiAhc2hpZnRLZXkpIHtcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgaWYgKHNlbmRCb3hWYWx1ZSkge1xuICAgICAgICAgICAgc2V0U2VuZEJveChzZW5kQm94VmFsdWUudHJpbSgpKTtcbiAgICAgICAgICAgIHNjcm9sbFRvRW5kKCk7XG4gICAgICAgICAgICBzdWJtaXRTZW5kQm94KCk7XG4gICAgICAgICAgICBmb2N1c1NlbmRCb3goKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBvblN1Ym1pdDogZXZlbnQgPT4ge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgIC8vIENvbnNpZGVyIGNsZWFyaW5nIHRoZSBzZW5kIGJveCBvbmx5IGFmdGVyIHdlIHJlY2VpdmVkIFBPU1RfQUNUSVZJVFlfUEVORElOR1xuICAgICAgICAvLyBFLmcuIGlmIHRoZSBjb25uZWN0aW9uIGlzIGJhZCwgc2VuZGluZyB0aGUgbWVzc2FnZSBlc3NlbnRpYWxseSBkbyBub3RoaW5nIGJ1dCBqdXN0IGNsZWFyaW5nIHRoZSBzZW5kIGJveFxuXG4gICAgICAgIGlmIChzZW5kQm94VmFsdWUpIHtcbiAgICAgICAgICBzY3JvbGxUb0VuZCgpO1xuICAgICAgICAgIHN1Ym1pdFNlbmRCb3goKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHZhbHVlOiBzZW5kQm94VmFsdWVcbiAgICB9KSxcbiAgICAuLi5zZWxlY3RvcnNcbiAgKTtcblxuY29uc3QgVGV4dEJveCA9ICh7IGNsYXNzTmFtZSwgZGlzYWJsZWQsIGxhbmd1YWdlLCBvbkNoYW5nZSwgb25LZXlQcmVzcywgb25TdWJtaXQsIHN0eWxlU2V0LCB2YWx1ZSB9KSA9PiB7XG4gIGNvbnN0IHR5cGVZb3VyTWVzc2FnZVN0cmluZyA9IGxvY2FsaXplKCdUeXBlIHlvdXIgbWVzc2FnZScsIGxhbmd1YWdlKTtcbiAgY29uc3Qge1xuICAgIG9wdGlvbnM6IHsgc2VuZEJveFRleHRXcmFwIH1cbiAgfSA9IHN0eWxlU2V0O1xuXG4gIHJldHVybiAoXG4gICAgPGZvcm1cbiAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lcyhST09UX0NTUyArICcnLCBzdHlsZVNldC5zZW5kQm94VGV4dEFyZWEgKyAnJywgc3R5bGVTZXQuc2VuZEJveFRleHRCb3ggKyAnJywgY2xhc3NOYW1lICsgJycpfVxuICAgICAgb25TdWJtaXQ9e29uU3VibWl0fVxuICAgID5cbiAgICAgIHtcbiAgICAgICAgPFR5cGVGb2N1c1NpbmtDb250ZXh0LkNvbnN1bWVyPlxuICAgICAgICAgIHsoeyBzZW5kRm9jdXNSZWYgfSkgPT5cbiAgICAgICAgICAgICFzZW5kQm94VGV4dFdyYXAgPyAoXG4gICAgICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICAgIGFyaWEtbGFiZWw9e3R5cGVZb3VyTWVzc2FnZVN0cmluZ31cbiAgICAgICAgICAgICAgICBkYXRhLWlkPVwid2ViY2hhdC1zZW5kYm94LWlucHV0XCJcbiAgICAgICAgICAgICAgICBkaXNhYmxlZD17ZGlzYWJsZWR9XG4gICAgICAgICAgICAgICAgb25DaGFuZ2U9e29uQ2hhbmdlfVxuICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPXt0eXBlWW91ck1lc3NhZ2VTdHJpbmd9XG4gICAgICAgICAgICAgICAgcmVmPXtzZW5kRm9jdXNSZWZ9XG4gICAgICAgICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgICAgICAgIHZhbHVlPXt2YWx1ZX1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgPHRleHRhcmVhXG4gICAgICAgICAgICAgICAgICBhcmlhLWxhYmVsPXt0eXBlWW91ck1lc3NhZ2VTdHJpbmd9XG4gICAgICAgICAgICAgICAgICBkYXRhLWlkPVwid2ViY2hhdC1zZW5kYm94LWlucHV0XCJcbiAgICAgICAgICAgICAgICAgIGRpc2FibGVkPXtkaXNhYmxlZH1cbiAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtvbkNoYW5nZX1cbiAgICAgICAgICAgICAgICAgIG9uS2V5UHJlc3M9e29uS2V5UHJlc3N9XG4gICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj17dHlwZVlvdXJNZXNzYWdlU3RyaW5nfVxuICAgICAgICAgICAgICAgICAgcmVmPXtzZW5kRm9jdXNSZWZ9XG4gICAgICAgICAgICAgICAgICByb3dzPVwiMVwiXG4gICAgICAgICAgICAgICAgICB2YWx1ZT17dmFsdWV9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8ZGl2Pnt2YWx1ZSArICdcXG4nfTwvZGl2PlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIClcbiAgICAgICAgICB9XG4gICAgICAgIDwvVHlwZUZvY3VzU2lua0NvbnRleHQuQ29uc3VtZXI+XG4gICAgICB9XG4gICAgPC9mb3JtPlxuICApO1xufTtcblxuVGV4dEJveC5kZWZhdWx0UHJvcHMgPSB7XG4gIGNsYXNzTmFtZTogJycsXG4gIGRpc2FibGVkOiBmYWxzZSxcbiAgdmFsdWU6ICcnXG59O1xuXG5UZXh0Qm94LnByb3BUeXBlcyA9IHtcbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG4gIGxhbmd1YWdlOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBvbktleVByZXNzOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBvblN1Ym1pdDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgc3R5bGVTZXQ6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgb3B0aW9uczogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIHNlbmRCb3hUZXh0V3JhcDogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZFxuICAgIH0pLmlzUmVxdWlyZWRcbiAgfSkuaXNSZXF1aXJlZCxcbiAgdmFsdWU6IFByb3BUeXBlcy5zdHJpbmdcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3RTZW5kVGV4dEJveCgoeyBzdHlsZVNldCB9KSA9PiAoeyBzdHlsZVNldCB9KSkoVGV4dEJveCk7XG5cbmV4cG9ydCB7IGNvbm5lY3RTZW5kVGV4dEJveCB9O1xuIl19