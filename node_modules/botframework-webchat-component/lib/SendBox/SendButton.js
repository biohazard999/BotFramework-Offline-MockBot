"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.connectSendButton = exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _Localize = require("../Localization/Localize");

var _connectToWebChat = _interopRequireDefault(require("../connectToWebChat"));

var _IconButton = _interopRequireDefault(require("./IconButton"));

var _SendIcon = _interopRequireDefault(require("./Assets/SendIcon"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var connectSendButton = function connectSendButton() {
  for (var _len = arguments.length, selectors = new Array(_len), _key = 0; _key < _len; _key++) {
    selectors[_key] = arguments[_key];
  }

  return _connectToWebChat.default.apply(void 0, [function (_ref) {
    var disabled = _ref.disabled,
        language = _ref.language,
        sendBoxValue = _ref.sendBoxValue,
        setSendBox = _ref.setSendBox,
        submitSendBox = _ref.submitSendBox;
    return {
      click: function click() {
        setSendBox(sendBoxValue.trim());
        submitSendBox();
      },
      disabled: disabled,
      language: language
    };
  }].concat(selectors));
};

exports.connectSendButton = connectSendButton;

var SendButton = function SendButton(_ref2) {
  var click = _ref2.click,
      disabled = _ref2.disabled,
      language = _ref2.language;
  return _react.default.createElement(_IconButton.default, {
    alt: (0, _Localize.localize)('Send', language),
    disabled: disabled,
    onClick: click
  }, _react.default.createElement(_SendIcon.default, null));
};

SendButton.defaultProps = {
  disabled: false
};
SendButton.propTypes = {
  click: _propTypes.default.func.isRequired,
  disabled: _propTypes.default.bool,
  language: _propTypes.default.string.isRequired
};

var _default = connectSendButton()(SendButton);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9TZW5kQm94L1NlbmRCdXR0b24uanMiXSwibmFtZXMiOlsiY29ubmVjdFNlbmRCdXR0b24iLCJzZWxlY3RvcnMiLCJjb25uZWN0VG9XZWJDaGF0IiwiZGlzYWJsZWQiLCJsYW5ndWFnZSIsInNlbmRCb3hWYWx1ZSIsInNldFNlbmRCb3giLCJzdWJtaXRTZW5kQm94IiwiY2xpY2siLCJ0cmltIiwiU2VuZEJ1dHRvbiIsImRlZmF1bHRQcm9wcyIsInByb3BUeXBlcyIsIlByb3BUeXBlcyIsImZ1bmMiLCJpc1JlcXVpcmVkIiwiYm9vbCIsInN0cmluZyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQUVBOztBQUNBOztBQUNBOztBQUNBOzs7O0FBRUEsSUFBTUEsaUJBQWlCLEdBQUcsU0FBcEJBLGlCQUFvQjtBQUFBLG9DQUFJQyxTQUFKO0FBQUlBLElBQUFBLFNBQUo7QUFBQTs7QUFBQSxTQUN4QkMseUNBQ0U7QUFBQSxRQUFHQyxRQUFILFFBQUdBLFFBQUg7QUFBQSxRQUFhQyxRQUFiLFFBQWFBLFFBQWI7QUFBQSxRQUF1QkMsWUFBdkIsUUFBdUJBLFlBQXZCO0FBQUEsUUFBcUNDLFVBQXJDLFFBQXFDQSxVQUFyQztBQUFBLFFBQWlEQyxhQUFqRCxRQUFpREEsYUFBakQ7QUFBQSxXQUFzRTtBQUNwRUMsTUFBQUEsS0FBSyxFQUFFLGlCQUFNO0FBQ1hGLFFBQUFBLFVBQVUsQ0FBQ0QsWUFBWSxDQUFDSSxJQUFiLEVBQUQsQ0FBVjtBQUNBRixRQUFBQSxhQUFhO0FBQ2QsT0FKbUU7QUFLcEVKLE1BQUFBLFFBQVEsRUFBUkEsUUFMb0U7QUFNcEVDLE1BQUFBLFFBQVEsRUFBUkE7QUFOb0UsS0FBdEU7QUFBQSxHQURGLFNBU0tILFNBVEwsRUFEd0I7QUFBQSxDQUExQjs7OztBQWFBLElBQU1TLFVBQVUsR0FBRyxTQUFiQSxVQUFhO0FBQUEsTUFBR0YsS0FBSCxTQUFHQSxLQUFIO0FBQUEsTUFBVUwsUUFBVixTQUFVQSxRQUFWO0FBQUEsTUFBb0JDLFFBQXBCLFNBQW9CQSxRQUFwQjtBQUFBLFNBQ2pCLDZCQUFDLG1CQUFEO0FBQVksSUFBQSxHQUFHLEVBQUUsd0JBQVMsTUFBVCxFQUFpQkEsUUFBakIsQ0FBakI7QUFBNkMsSUFBQSxRQUFRLEVBQUVELFFBQXZEO0FBQWlFLElBQUEsT0FBTyxFQUFFSztBQUExRSxLQUNFLDZCQUFDLGlCQUFELE9BREYsQ0FEaUI7QUFBQSxDQUFuQjs7QUFNQUUsVUFBVSxDQUFDQyxZQUFYLEdBQTBCO0FBQ3hCUixFQUFBQSxRQUFRLEVBQUU7QUFEYyxDQUExQjtBQUlBTyxVQUFVLENBQUNFLFNBQVgsR0FBdUI7QUFDckJKLEVBQUFBLEtBQUssRUFBRUssbUJBQVVDLElBQVYsQ0FBZUMsVUFERDtBQUVyQlosRUFBQUEsUUFBUSxFQUFFVSxtQkFBVUcsSUFGQztBQUdyQlosRUFBQUEsUUFBUSxFQUFFUyxtQkFBVUksTUFBVixDQUFpQkY7QUFITixDQUF2Qjs7ZUFNZWYsaUJBQWlCLEdBQUdVLFVBQUgsQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyBsb2NhbGl6ZSB9IGZyb20gJy4uL0xvY2FsaXphdGlvbi9Mb2NhbGl6ZSc7XG5pbXBvcnQgY29ubmVjdFRvV2ViQ2hhdCBmcm9tICcuLi9jb25uZWN0VG9XZWJDaGF0JztcbmltcG9ydCBJY29uQnV0dG9uIGZyb20gJy4vSWNvbkJ1dHRvbic7XG5pbXBvcnQgU2VuZEljb24gZnJvbSAnLi9Bc3NldHMvU2VuZEljb24nO1xuXG5jb25zdCBjb25uZWN0U2VuZEJ1dHRvbiA9ICguLi5zZWxlY3RvcnMpID0+XG4gIGNvbm5lY3RUb1dlYkNoYXQoXG4gICAgKHsgZGlzYWJsZWQsIGxhbmd1YWdlLCBzZW5kQm94VmFsdWUsIHNldFNlbmRCb3gsIHN1Ym1pdFNlbmRCb3ggfSkgPT4gKHtcbiAgICAgIGNsaWNrOiAoKSA9PiB7XG4gICAgICAgIHNldFNlbmRCb3goc2VuZEJveFZhbHVlLnRyaW0oKSk7XG4gICAgICAgIHN1Ym1pdFNlbmRCb3goKTtcbiAgICAgIH0sXG4gICAgICBkaXNhYmxlZCxcbiAgICAgIGxhbmd1YWdlXG4gICAgfSksXG4gICAgLi4uc2VsZWN0b3JzXG4gICk7XG5cbmNvbnN0IFNlbmRCdXR0b24gPSAoeyBjbGljaywgZGlzYWJsZWQsIGxhbmd1YWdlIH0pID0+IChcbiAgPEljb25CdXR0b24gYWx0PXtsb2NhbGl6ZSgnU2VuZCcsIGxhbmd1YWdlKX0gZGlzYWJsZWQ9e2Rpc2FibGVkfSBvbkNsaWNrPXtjbGlja30+XG4gICAgPFNlbmRJY29uIC8+XG4gIDwvSWNvbkJ1dHRvbj5cbik7XG5cblNlbmRCdXR0b24uZGVmYXVsdFByb3BzID0ge1xuICBkaXNhYmxlZDogZmFsc2Vcbn07XG5cblNlbmRCdXR0b24ucHJvcFR5cGVzID0ge1xuICBjbGljazogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuICBsYW5ndWFnZTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkXG59O1xuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0U2VuZEJ1dHRvbigpKFNlbmRCdXR0b24pO1xuXG5leHBvcnQgeyBjb25uZWN0U2VuZEJ1dHRvbiB9O1xuIl19