"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.connectUploadButton = exports.default = void 0;

var _glamor = require("glamor");

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _Localize = require("../Localization/Localize");

var _AttachmentIcon = _interopRequireDefault(require("./Assets/AttachmentIcon"));

var _connectToWebChat = _interopRequireDefault(require("../connectToWebChat"));

var _IconButton = _interopRequireDefault(require("./IconButton"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var ROOT_CSS = (0, _glamor.css)({
  overflow: 'hidden',
  position: 'relative',
  '& > input': {
    height: 0,
    width: 0,
    opacity: 0,
    position: 'absolute',
    left: 0,
    top: 0
  }
});

var connectUploadButton = function connectUploadButton() {
  for (var _len = arguments.length, selectors = new Array(_len), _key = 0; _key < _len; _key++) {
    selectors[_key] = arguments[_key];
  }

  return _connectToWebChat.default.apply(void 0, [function (_ref) {
    var disabled = _ref.disabled,
        language = _ref.language,
        _sendFiles = _ref.sendFiles;
    return {
      disabled: disabled,
      language: language,
      sendFiles: function sendFiles(files) {
        if (files && files.length) {
          // TODO: [P3] We need to find revokeObjectURL on the UI side
          //       Redux store should not know about the browser environment
          //       One fix is to use ArrayBuffer instead of object URL, but that would requires change to DirectLineJS
          _sendFiles([].map.call(files, function (file) {
            return {
              name: file.name,
              size: file.size,
              url: window.URL.createObjectURL(file)
            };
          }));
        }
      }
    };
  }].concat(selectors));
};

exports.connectUploadButton = connectUploadButton;

var UploadButton =
/*#__PURE__*/
function (_React$Component) {
  _inherits(UploadButton, _React$Component);

  function UploadButton(props) {
    var _this;

    _classCallCheck(this, UploadButton);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(UploadButton).call(this, props));
    _this.handleClick = _this.handleClick.bind(_assertThisInitialized(_this));
    _this.handleFileChange = _this.handleFileChange.bind(_assertThisInitialized(_this));
    _this.inputRef = _react.default.createRef();
    return _this;
  }

  _createClass(UploadButton, [{
    key: "handleClick",
    value: function handleClick() {
      var current = this.inputRef.current;
      current && current.click();
    }
  }, {
    key: "handleFileChange",
    value: function handleFileChange(_ref2) {
      var files = _ref2.target.files;
      var sendFiles = this.props.sendFiles;
      sendFiles(files);
      var current = this.inputRef.current;

      if (current) {
        current.value = null;
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          disabled = _this$props.disabled,
          language = _this$props.language,
          styleSet = _this$props.styleSet;
      var uploadFileString = (0, _Localize.localize)('Upload file', language);
      return _react.default.createElement("div", {
        className: (0, _classnames.default)(ROOT_CSS + '', styleSet.uploadButton + '')
      }, _react.default.createElement("input", {
        "aria-hidden": "true",
        disabled: disabled,
        multiple: true,
        onChange: this.handleFileChange,
        ref: this.inputRef,
        role: "button",
        tabIndex: -1,
        type: "file"
      }), _react.default.createElement(_IconButton.default, {
        alt: uploadFileString,
        "aria-label": uploadFileString,
        disabled: disabled,
        onClick: this.handleClick
      }, _react.default.createElement(_AttachmentIcon.default, null)));
    }
  }]);

  return UploadButton;
}(_react.default.Component);

UploadButton.defaultProps = {
  disabled: false
};
UploadButton.propTypes = {
  disabled: _propTypes.default.bool,
  language: _propTypes.default.string.isRequired,
  sendFiles: _propTypes.default.func.isRequired,
  styleSet: _propTypes.default.shape({
    uploadButton: _propTypes.default.any.isRequired
  }).isRequired
};

var _default = connectUploadButton(function (_ref3) {
  var styleSet = _ref3.styleSet;
  return {
    styleSet: styleSet
  };
})(UploadButton);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,