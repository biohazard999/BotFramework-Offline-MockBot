"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactDictateButton = require("react-dictate-button");

var _botframeworkWebchatCore = require("botframework-webchat-core");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _connectToWebChat = _interopRequireDefault(require("./connectToWebChat"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var _Constants$DictateSta = _botframeworkWebchatCore.Constants.DictateState,
    DICTATING = _Constants$DictateSta.DICTATING,
    IDLE = _Constants$DictateSta.IDLE,
    STARTING = _Constants$DictateSta.STARTING;

var Dictation =
/*#__PURE__*/
function (_React$Component) {
  _inherits(Dictation, _React$Component);

  function Dictation(props) {
    var _this;

    _classCallCheck(this, Dictation);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Dictation).call(this, props));
    _this.handleDictate = _this.handleDictate.bind(_assertThisInitialized(_this));
    _this.handleDictating = _this.handleDictating.bind(_assertThisInitialized(_this));
    _this.handleError = _this.handleError.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(Dictation, [{
    key: "handleDictate",
    value: function handleDictate(_ref) {
      var _ref$result = _ref.result;
      _ref$result = _ref$result === void 0 ? {} : _ref$result;
      var transcript = _ref$result.transcript;
      var _this$props = this.props,
          dictateState = _this$props.dictateState,
          setDictateInterims = _this$props.setDictateInterims,
          setDictateState = _this$props.setDictateState,
          setSendBox = _this$props.setSendBox,
          startSpeakingActivity = _this$props.startSpeakingActivity,
          stopDictate = _this$props.stopDictate,
          submitSendBox = _this$props.submitSendBox;

      if (dictateState === DICTATING || dictateState === STARTING) {
        setDictateInterims([]);
        setDictateState(IDLE);
        stopDictate();

        if (transcript) {
          setSendBox(transcript);
          submitSendBox('speech');
          startSpeakingActivity();
        }
      }
    }
  }, {
    key: "handleDictating",
    value: function handleDictating(_ref2) {
      var _ref2$results = _ref2.results,
          results = _ref2$results === void 0 ? [] : _ref2$results;
      var _this$props2 = this.props,
          dictateState = _this$props2.dictateState,
          postActivity = _this$props2.postActivity,
          sendTypingIndicator = _this$props2.sendTypingIndicator,
          setDictateInterims = _this$props2.setDictateInterims,
          setDictateState = _this$props2.setDictateState;

      if (dictateState === DICTATING || dictateState === STARTING) {
        var interims = results.map(function (_ref3) {
          var transcript = _ref3.transcript;
          return transcript;
        });
        setDictateInterims(interims);
        setDictateState(DICTATING);
        sendTypingIndicator && postActivity({
          type: 'typing'
        });
      }
    }
  }, {
    key: "handleError",
    value: function handleError(event) {
      var _this$props3 = this.props,
          dictateState = _this$props3.dictateState,
          onError = _this$props3.onError,
          setDictateState = _this$props3.setDictateState,
          stopDictate = _this$props3.stopDictate;

      if (dictateState === DICTATING || dictateState === STARTING) {
        setDictateState(IDLE);
        stopDictate();
        onError && onError(event);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props4 = this.props,
          dictateState = _this$props4.dictateState,
          disabled = _this$props4.disabled,
          language = _this$props4.language,
          numSpeakingActivities = _this$props4.numSpeakingActivities,
          _this$props4$webSpeec = _this$props4.webSpeechPonyfill;
      _this$props4$webSpeec = _this$props4$webSpeec === void 0 ? {} : _this$props4$webSpeec;
      var SpeechGrammarList = _this$props4$webSpeec.SpeechGrammarList,
          SpeechRecognition = _this$props4$webSpeec.SpeechRecognition,
          handleDictate = this.handleDictate,
          handleDictating = this.handleDictating,
          handleError = this.handleError;
      return _react.default.createElement(_reactDictateButton.Composer, {
        lang: language,
        onDictate: handleDictate,
        onError: handleError,
        onProgress: handleDictating,
        speechGrammarList: SpeechGrammarList,
        speechRecognition: SpeechRecognition,
        started: !disabled && (dictateState === STARTING || dictateState === DICTATING) && !numSpeakingActivities
      });
    }
  }]);

  return Dictation;
}(_react.default.Component);

Dictation.defaultProps = {
  disabled: false,
  onError: undefined,
  webSpeechPonyfill: undefined
};
Dictation.propTypes = {
  dictateState: _propTypes.default.number.isRequired,
  disabled: _propTypes.default.bool,
  language: _propTypes.default.string.isRequired,
  numSpeakingActivities: _propTypes.default.number.isRequired,
  onError: _propTypes.default.func,
  postActivity: _propTypes.default.func.isRequired,
  setDictateInterims: _propTypes.default.func.isRequired,
  setDictateState: _propTypes.default.func.isRequired,
  setSendBox: _propTypes.default.func.isRequired,
  startSpeakingActivity: _propTypes.default.func.isRequired,
  stopDictate: _propTypes.default.func.isRequired,
  submitSendBox: _propTypes.default.func.isRequired,
  webSpeechPonyfill: _propTypes.default.shape({
    SpeechGrammarList: _propTypes.default.any.isRequired,
    SpeechRecognition: _propTypes.default.any.isRequired
  })
};

var _default = (0, _connectToWebChat.default)(function (_ref4) {
  var activities = _ref4.activities,
      dictateState = _ref4.dictateState,
      disabled = _ref4.disabled,
      language = _ref4.language,
      postActivity = _ref4.postActivity,
      sendTypingIndicator = _ref4.sendTypingIndicator,
      setDictateInterims = _ref4.setDictateInterims,
      setDictateState = _ref4.setDictateState,
      setSendBox = _ref4.setSendBox,
      startSpeakingActivity = _ref4.startSpeakingActivity,
      stopDictate = _ref4.stopDictate,
      submitSendBox = _ref4.submitSendBox,
      webSpeechPonyfill = _ref4.webSpeechPonyfill;
  return {
    dictateState: dictateState,
    disabled: disabled,
    language: language,
    numSpeakingActivities: activities.filter(function (_ref5) {
      var _ref5$channelData = _ref5.channelData;
      _ref5$channelData = _ref5$channelData === void 0 ? {} : _ref5$channelData;
      var speak = _ref5$channelData.speak;
      return speak;
    }).length,
    postActivity: postActivity,
    sendTypingIndicator: sendTypingIndicator,
    setDictateInterims: setDictateInterims,
    setDictateState: setDictateState,
    setSendBox: setSendBox,
    startSpeakingActivity: startSpeakingActivity,
    stopDictate: stopDictate,
    submitSendBox: submitSendBox,
    webSpeechPonyfill: webSpeechPonyfill
  };
})(Dictation);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,