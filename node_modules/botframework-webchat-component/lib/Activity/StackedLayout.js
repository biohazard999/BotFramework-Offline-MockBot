"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.connectStackedLayout = exports.default = void 0;

var _botframeworkWebchatCore = require("botframework-webchat-core");

var _glamor = require("glamor");

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _remark = _interopRequireDefault(require("remark"));

var _stripMarkdown = _interopRequireDefault(require("strip-markdown"));

var _Localize = require("../Localization/Localize");

var _Avatar = _interopRequireDefault(require("./Avatar"));

var _Bubble = _interopRequireDefault(require("./Bubble"));

var _connectToWebChat = _interopRequireDefault(require("../connectToWebChat"));

var _SendStatus = _interopRequireDefault(require("./SendStatus"));

var _textFormatToContentType = _interopRequireDefault(require("../Utils/textFormatToContentType"));

var _Timestamp = _interopRequireDefault(require("./Timestamp"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable no-sync */

/* eslint react/no-array-index-key: "off" */
var _Constants$ActivityCl = _botframeworkWebchatCore.Constants.ActivityClientState,
    SENDING = _Constants$ActivityCl.SENDING,
    SEND_FAILED = _Constants$ActivityCl.SEND_FAILED;
var ROOT_CSS = (0, _glamor.css)({
  display: 'flex',
  '& > .avatar': {
    flexShrink: 0
  },
  '& > .content': {
    flexGrow: 1,
    overflow: 'hidden',
    '& > .webchat__row': {
      display: 'flex',
      '& > .bubble, & > .timestamp': {
        flexGrow: 1,
        overflow: 'hidden'
      },
      '& > .filler': {
        flexGrow: 10000,
        flexShrink: 1
      }
    }
  },
  '& > .filler': {
    flexShrink: 0
  },
  '&.from-user': {
    flexDirection: 'row-reverse',
    '& > .content > .webchat__row': {
      flexDirection: 'row-reverse'
    }
  }
});

var connectStackedLayout = function connectStackedLayout() {
  for (var _len = arguments.length, selectors = new Array(_len), _key = 0; _key < _len; _key++) {
    selectors[_key] = arguments[_key];
  }

  return _connectToWebChat.default.apply(void 0, [function (_ref, _ref2) {
    var language = _ref.language,
        _ref$styleSet$options = _ref.styleSet.options,
        botAvatarInitials = _ref$styleSet$options.botAvatarInitials,
        userAvatarInitials = _ref$styleSet$options.userAvatarInitials;
    var _ref2$activity = _ref2.activity;
    _ref2$activity = _ref2$activity === void 0 ? {} : _ref2$activity;
    var _ref2$activity$from = _ref2$activity.from;
    _ref2$activity$from = _ref2$activity$from === void 0 ? {} : _ref2$activity$from;
    var role = _ref2$activity$from.role;
    return {
      avatarInitials: role === 'user' ? userAvatarInitials : botAvatarInitials,
      language: language,
      // TODO: [P4] We want to deprecate botAvatarInitials/userAvatarInitials because they are not as helpful as avatarInitials
      botAvatarInitials: botAvatarInitials,
      userAvatarInitials: userAvatarInitials
    };
  }].concat(selectors));
};

exports.connectStackedLayout = connectStackedLayout;

var StackedLayout = function StackedLayout(_ref3) {
  var activity = _ref3.activity,
      avatarInitials = _ref3.avatarInitials,
      children = _ref3.children,
      language = _ref3.language,
      styleSet = _ref3.styleSet,
      timestampClassName = _ref3.timestampClassName;
  var _activity$attachments = activity.attachments,
      attachments = _activity$attachments === void 0 ? [] : _activity$attachments,
      _activity$channelData = activity.channelData;
  _activity$channelData = _activity$channelData === void 0 ? {} : _activity$channelData;
  var _activity$channelData2 = _activity$channelData.messageBack;
  _activity$channelData2 = _activity$channelData2 === void 0 ? {} : _activity$channelData2;
  var messageBackDisplayText = _activity$channelData2.displayText,
      state = _activity$channelData.state,
      _activity$from = activity.from;
  _activity$from = _activity$from === void 0 ? {} : _activity$from;
  var role = _activity$from.role,
      text = activity.text,
      textFormat = activity.textFormat,
      type = activity.type;
  var activityDisplayText = messageBackDisplayText || text;
  var fromUser = role === 'user';
  var showSendStatus = state === SENDING || state === SEND_FAILED;
  var plainText = (0, _remark.default)().use(_stripMarkdown.default).processSync(text);
  var ariaLabel = (0, _Localize.localize)(fromUser ? 'User said something' : 'Bot said something', language, avatarInitials, plainText);
  return _react.default.createElement("div", {
    className: (0, _classnames.default)(ROOT_CSS + '', styleSet.stackedLayout + '', {
      'from-user': fromUser
    })
  }, _react.default.createElement(_Avatar.default, {
    "aria-hidden": true,
    className: "avatar",
    fromUser: fromUser
  }), _react.default.createElement("div", {
    className: "content"
  }, type === 'typing' ? _react.default.createElement("div", {
    className: "webchat__row typing"
  }, children({
    activity: activity,
    attachment: {
      contentType: 'typing'
    }
  }), _react.default.createElement("div", {
    className: "filler"
  })) : !!activityDisplayText && _react.default.createElement("div", {
    "aria-label": ariaLabel,
    className: "webchat__row message"
  }, _react.default.createElement(_Bubble.default, {
    "aria-hidden": true,
    className: "bubble",
    fromUser: fromUser
  }, children({
    activity: activity,
    attachment: {
      content: activityDisplayText,
      contentType: (0, _textFormatToContentType.default)(textFormat)
    }
  })), _react.default.createElement("div", {
    className: "filler"
  })), attachments.map(function (attachment, index) {
    return _react.default.createElement("div", {
      className: "webchat__row attachment",
      key: index
    }, _react.default.createElement(_Bubble.default, {
      "aria-hidden": true,
      className: "attachment bubble",
      fromUser: fromUser,
      key: index
    }, children({
      attachment: attachment
    })));
  }), _react.default.createElement("div", {
    className: "webchat__row"
  }, showSendStatus ? _react.default.createElement(_SendStatus.default, {
    activity: activity,
    className: "timestamp"
  }) : _react.default.createElement(_Timestamp.default, {
    activity: activity,
    "aria-hidden": true,
    className: (0, _classnames.default)('timestamp', timestampClassName)
  }), _react.default.createElement("div", {
    className: "filler"
  }))), _react.default.createElement("div", {
    className: "filler"
  }));
};

StackedLayout.defaultProps = {
  children: undefined,
  timestampClassName: ''
};
StackedLayout.propTypes = {
  activity: _propTypes.default.shape({
    attachments: _propTypes.default.array,
    channelData: _propTypes.default.shape({
      messageBack: _propTypes.default.shape({
        displayText: _propTypes.default.string
      })
    }),
    from: _propTypes.default.shape({
      role: _propTypes.default.string.isRequired
    }).isRequired,
    text: _propTypes.default.string,
    textFormat: _propTypes.default.string,
    timestamp: _propTypes.default.string,
    type: _propTypes.default.string.isRequired
  }).isRequired,
  avatarInitials: _propTypes.default.string.isRequired,
  children: _propTypes.default.any,
  language: _propTypes.default.string.isRequired,
  styleSet: _propTypes.default.shape({
    stackedLayout: _propTypes.default.any.isRequired
  }).isRequired,
  timestampClassName: _propTypes.default.string
};

var _default = connectStackedLayout(function (_ref4) {
  var avatarInitials = _ref4.avatarInitials,
      language = _ref4.language,
      styleSet = _ref4.styleSet;
  return {
    avatarInitials: avatarInitials,
    language: language,
    styleSet: styleSet
  };
})(StackedLayout);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,