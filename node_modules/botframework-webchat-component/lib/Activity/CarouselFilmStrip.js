"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.connectCarouselFilmStrip = exports.default = void 0;

var _glamor = require("glamor");

var _reactFilm = require("react-film");

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _botframeworkWebchatCore = require("botframework-webchat-core");

var _Avatar = _interopRequireDefault(require("./Avatar"));

var _Bubble = _interopRequireDefault(require("./Bubble"));

var _connectToWebChat = _interopRequireDefault(require("../connectToWebChat"));

var _SendStatus = _interopRequireDefault(require("./SendStatus"));

var _textFormatToContentType = _interopRequireDefault(require("../Utils/textFormatToContentType"));

var _Timestamp = _interopRequireDefault(require("./Timestamp"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var _Constants$ActivityCl = _botframeworkWebchatCore.Constants.ActivityClientState,
    SENDING = _Constants$ActivityCl.SENDING,
    SEND_FAILED = _Constants$ActivityCl.SEND_FAILED;
var ROOT_CSS = (0, _glamor.css)({
  display: 'flex',
  MsOverflowStyle: 'none',
  overflowX: 'scroll',
  overflowY: 'hidden',
  touchAction: 'manipulation',
  WebkitOverflowScrolling: 'touch',
  '&::-webkit-scrollbar': {
    display: 'none'
  },
  '& > .avatar': {
    flexShrink: 0
  },
  '& > .content': {
    flex: 1,
    '& > .message': {
      display: 'flex',
      '& > .bubble': {
        flexGrow: 1,
        overflow: 'hidden'
      },
      '& > .filler': {
        flexGrow: 10000,
        flexShrink: 1
      }
    },
    '& > ul': {
      display: 'flex',
      listStyleType: 'none',
      margin: 0,
      padding: 0,
      '& > li': {
        flex: 1
      }
    }
  }
});

var connectCarouselFilmStrip = function connectCarouselFilmStrip() {
  for (var _len = arguments.length, selectors = new Array(_len), _key = 0; _key < _len; _key++) {
    selectors[_key] = arguments[_key];
  }

  return _connectToWebChat.default.apply(void 0, [function (_ref, _ref2) {
    var language = _ref.language,
        _ref$styleSet$options = _ref.styleSet.options,
        botAvatarInitials = _ref$styleSet$options.botAvatarInitials,
        userAvatarInitials = _ref$styleSet$options.userAvatarInitials;
    var _ref2$activity = _ref2.activity;
    _ref2$activity = _ref2$activity === void 0 ? {} : _ref2$activity;
    var _ref2$activity$from = _ref2$activity.from;
    _ref2$activity$from = _ref2$activity$from === void 0 ? {} : _ref2$activity$from;
    var role = _ref2$activity$from.role;
    return {
      avatarInitials: role === 'user' ? userAvatarInitials : botAvatarInitials,
      language: language
    };
  }].concat(selectors));
};

exports.connectCarouselFilmStrip = connectCarouselFilmStrip;

var WebChatCarouselFilmStrip = function WebChatCarouselFilmStrip(_ref3) {
  var activity = _ref3.activity,
      children = _ref3.children,
      className = _ref3.className,
      itemContainerRef = _ref3.itemContainerRef,
      scrollableRef = _ref3.scrollableRef,
      styleSet = _ref3.styleSet,
      timestampClassName = _ref3.timestampClassName;
  var _activity$attachments = activity.attachments,
      attachments = _activity$attachments === void 0 ? [] : _activity$attachments,
      _activity$channelData = activity.channelData;
  _activity$channelData = _activity$channelData === void 0 ? {} : _activity$channelData;
  var _activity$channelData2 = _activity$channelData.messageBack;
  _activity$channelData2 = _activity$channelData2 === void 0 ? {} : _activity$channelData2;
  var messageBackDisplayText = _activity$channelData2.displayText,
      state = _activity$channelData.state,
      _activity$from = activity.from;
  _activity$from = _activity$from === void 0 ? {} : _activity$from;
  var role = _activity$from.role,
      text = activity.text,
      textFormat = activity.textFormat;
  var fromUser = role === 'user';
  var activityDisplayText = messageBackDisplayText || text;
  return _react.default.createElement("div", {
    className: (0, _classnames.default)(ROOT_CSS + '', styleSet.carouselFilmStrip + '', className + ''),
    ref: scrollableRef
  }, _react.default.createElement(_Avatar.default, {
    "aria-hidden": true,
    className: "avatar",
    fromUser: fromUser
  }), _react.default.createElement("div", {
    className: "content"
  }, !!activityDisplayText && _react.default.createElement("div", {
    className: "message"
  }, _react.default.createElement(_Bubble.default, {
    "aria-hidden": true,
    className: "bubble",
    fromUser: fromUser
  }, children({
    activity: activity,
    attachment: {
      content: activityDisplayText,
      contentType: (0, _textFormatToContentType.default)(textFormat)
    }
  })), _react.default.createElement("div", {
    className: "filler"
  })), _react.default.createElement("ul", {
    ref: itemContainerRef
  }, attachments.map(function (attachment, index) {
    return _react.default.createElement("li", {
      key: index
    }, _react.default.createElement(_Bubble.default, {
      fromUser: fromUser,
      key: index
    }, children({
      attachment: attachment
    })));
  })), _react.default.createElement("div", {
    className: "webchat__row"
  }, state === SENDING || state === SEND_FAILED ? _react.default.createElement(_SendStatus.default, {
    activity: activity
  }) : _react.default.createElement(_Timestamp.default, {
    activity: activity,
    "aria-hidden": true,
    className: timestampClassName
  }))));
};

WebChatCarouselFilmStrip.defaultProps = {
  children: undefined,
  className: '',
  timestampClassName: ''
};
WebChatCarouselFilmStrip.propTypes = {
  activity: _propTypes.default.shape({
    attachments: _propTypes.default.array,
    channelData: _propTypes.default.shape({
      messageBack: _propTypes.default.shape({
        displayText: _propTypes.default.string
      }),
      state: _propTypes.default.string
    }),
    from: _propTypes.default.shape({
      role: _propTypes.default.string.isRequired
    }).isRequired,
    text: _propTypes.default.string,
    textFormat: _propTypes.default.string,
    timestamp: _propTypes.default.string
  }).isRequired,
  children: _propTypes.default.any,
  className: _propTypes.default.string,
  itemContainerRef: _propTypes.default.any.isRequired,
  scrollableRef: _propTypes.default.any.isRequired,
  styleSet: _propTypes.default.shape({
    carouselFilmStrip: _propTypes.default.any.isRequired
  }).isRequired,
  timestampClassName: _propTypes.default.string
};
var ConnectedCarouselFilmStrip = connectCarouselFilmStrip(function (_ref4) {
  var avatarInitials = _ref4.avatarInitials,
      language = _ref4.language,
      styleSet = _ref4.styleSet;
  return {
    avatarInitials: avatarInitials,
    language: language,
    styleSet: styleSet
  };
})(WebChatCarouselFilmStrip);

var CarouselFilmStrip = function CarouselFilmStrip(props) {
  return _react.default.createElement(_reactFilm.Context.Consumer, null, function (_ref5) {
    var itemContainerRef = _ref5.itemContainerRef,
        scrollableRef = _ref5.scrollableRef;
    return _react.default.createElement(ConnectedCarouselFilmStrip, _extends({
      itemContainerRef: itemContainerRef,
      scrollableRef: scrollableRef
    }, props));
  });
};

var _default = CarouselFilmStrip;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,