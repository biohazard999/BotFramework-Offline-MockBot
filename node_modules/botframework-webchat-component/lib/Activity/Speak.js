"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.connectSpeakActivity = exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _reactSay = _interopRequireDefault(require("react-say"));

var _connectToWebChat = _interopRequireDefault(require("../connectToWebChat"));

var _SayAlt = _interopRequireDefault(require("./SayAlt"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// TODO: [P4] Consider moving this feature into BasicActivity
//       And it has better DOM position for showing visual spoken text
// TODO: [P3] We should add a "spoken" or "speakState" flag to indicate whether this activity is going to speak, or spoken
var connectSpeakActivity = function connectSpeakActivity() {
  for (var _len = arguments.length, selectors = new Array(_len), _key = 0; _key < _len; _key++) {
    selectors[_key] = arguments[_key];
  }

  return _connectToWebChat.default.apply(void 0, [function (_ref, _ref2) {
    var language = _ref.language,
        markActivity = _ref.markActivity;
    var activity = _ref2.activity;
    return {
      language: language,
      markAsSpoken: function markAsSpoken() {
        return markActivity(activity, 'speak', false);
      },
      selectVoice: function selectVoice(voices) {
        voices = [].slice.call(voices);
        return voices.find(function (_ref3) {
          var lang = _ref3.lang;
          return lang === activity.locale;
        }) || voices.find(function (_ref4) {
          var lang = _ref4.lang;
          return lang === language;
        }) || voices.find(function (_ref5) {
          var lang = _ref5.lang;
          return lang === window.navigator.language;
        }) || voices.find(function (_ref6) {
          var lang = _ref6.lang;
          return lang === 'en-US';
        }) || voices[0];
      }
    };
  }].concat(selectors));
};

exports.connectSpeakActivity = connectSpeakActivity;

var Speak = function Speak(_ref7) {
  var activity = _ref7.activity,
      markAsSpoken = _ref7.markAsSpoken,
      selectVoice = _ref7.selectVoice,
      styleSet = _ref7.styleSet;

  if (!activity) {
    return false;
  }

  var _activity$attachments = activity.attachments,
      attachments = _activity$attachments === void 0 ? [] : _activity$attachments,
      speak = activity.speak,
      text = activity.text;
  var lines = [speak || text];
  attachments.forEach(function (_ref8) {
    var _ref8$content = _ref8.content;
    _ref8$content = _ref8$content === void 0 ? {} : _ref8$content;
    var speak = _ref8$content.speak,
        contentType = _ref8.contentType;

    if (contentType === 'application/vnd.microsoft.card.adaptive') {
      lines.push(speak);
    }
  });
  var singleLine = lines.filter(function (line) {
    return line;
  }).join('\r\n');
  return _react.default.createElement(_react.default.Fragment, null, _react.default.createElement(_reactSay.default, {
    onEnd: markAsSpoken,
    speak: singleLine,
    voice: selectVoice
  }), !!styleSet.options.showSpokenText && _react.default.createElement(_SayAlt.default, {
    speak: singleLine,
    voice: selectVoice
  }));
};

Speak.propTypes = {
  activity: _propTypes.default.shape({
    attachments: _propTypes.default.arrayOf(_propTypes.default.shape({
      speak: _propTypes.default.string,
      subtitle: _propTypes.default.string,
      text: _propTypes.default.string,
      title: _propTypes.default.string
    })),
    speak: _propTypes.default.string,
    text: _propTypes.default.string
  }).isRequired,
  markAsSpoken: _propTypes.default.func.isRequired,
  selectVoice: _propTypes.default.func.isRequired,
  styleSet: _propTypes.default.shape({
    options: _propTypes.default.shape({
      showSpokenText: _propTypes.default.bool.isRequired
    }).isRequired
  }).isRequired
};

var _default = connectSpeakActivity(function (_ref9) {
  var styleSet = _ref9.styleSet;
  return {
    styleSet: styleSet
  };
})(Speak);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9BY3Rpdml0eS9TcGVhay5qcyJdLCJuYW1lcyI6WyJjb25uZWN0U3BlYWtBY3Rpdml0eSIsInNlbGVjdG9ycyIsImNvbm5lY3RUb1dlYkNoYXQiLCJsYW5ndWFnZSIsIm1hcmtBY3Rpdml0eSIsImFjdGl2aXR5IiwibWFya0FzU3Bva2VuIiwic2VsZWN0Vm9pY2UiLCJ2b2ljZXMiLCJzbGljZSIsImNhbGwiLCJmaW5kIiwibGFuZyIsImxvY2FsZSIsIndpbmRvdyIsIm5hdmlnYXRvciIsIlNwZWFrIiwic3R5bGVTZXQiLCJhdHRhY2htZW50cyIsInNwZWFrIiwidGV4dCIsImxpbmVzIiwiZm9yRWFjaCIsImNvbnRlbnQiLCJjb250ZW50VHlwZSIsInB1c2giLCJzaW5nbGVMaW5lIiwiZmlsdGVyIiwibGluZSIsImpvaW4iLCJvcHRpb25zIiwic2hvd1Nwb2tlblRleHQiLCJwcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJzaGFwZSIsImFycmF5T2YiLCJzdHJpbmciLCJzdWJ0aXRsZSIsInRpdGxlIiwiaXNSZXF1aXJlZCIsImZ1bmMiLCJib29sIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBRUE7O0FBQ0E7Ozs7QUFFQTtBQUNBO0FBRUE7QUFDQSxJQUFNQSxvQkFBb0IsR0FBRyxTQUF2QkEsb0JBQXVCO0FBQUEsb0NBQUlDLFNBQUo7QUFBSUEsSUFBQUEsU0FBSjtBQUFBOztBQUFBLFNBQzNCQyx5Q0FDRTtBQUFBLFFBQUdDLFFBQUgsUUFBR0EsUUFBSDtBQUFBLFFBQWFDLFlBQWIsUUFBYUEsWUFBYjtBQUFBLFFBQStCQyxRQUEvQixTQUErQkEsUUFBL0I7QUFBQSxXQUErQztBQUM3Q0YsTUFBQUEsUUFBUSxFQUFSQSxRQUQ2QztBQUU3Q0csTUFBQUEsWUFBWSxFQUFFO0FBQUEsZUFBTUYsWUFBWSxDQUFDQyxRQUFELEVBQVcsT0FBWCxFQUFvQixLQUFwQixDQUFsQjtBQUFBLE9BRitCO0FBRzdDRSxNQUFBQSxX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QUVkQyxNQUFBQSxRQUFRLEVBQUVKLG1CQUFVRyxNQUZOO0FBR2RoQixNQUFBQSxJQUFJLEVBQUVhLG1CQUFVRyxNQUhGO0FBSWRFLE1BQUFBLEtBQUssRUFBRUwsbUJBQVVHO0FBSkgsS0FBaEIsQ0FEVyxDQURXO0FBU3hCakIsSUFBQUEsS0FBSyxFQUFFYyxtQkFBVUcsTUFUTztBQVV4QmhCLElBQUFBLElBQUksRUFBRWEsbUJBQVVHO0FBVlEsR0FBaEIsRUFXUEcsVUFaYTtBQWFoQmpDLEVBQUFBLFlBQVksRUFBRTJCLG1CQUFVTyxJQUFWLENBQWVELFVBYmI7QUFjaEJoQyxFQUFBQSxXQUFXLEVBQUUwQixtQkFBVU8sSUFBVixDQUFlRCxVQWRaO0FBZWhCdEIsRUFBQUEsUUFBUSxFQUFFZ0IsbUJBQVVDLEtBQVYsQ0FBZ0I7QUFDeEJKLElBQUFBLE9BQU8sRUFBRUcsbUJBQVVDLEtBQVYsQ0FBZ0I7QUFDdkJILE1BQUFBLGNBQWMsRUFBRUUsbUJBQVVRLElBQVYsQ0FBZUY7QUFEUixLQUFoQixFQUVOQTtBQUhxQixHQUFoQixFQUlQQTtBQW5CYSxDQUFsQjs7ZUFzQmV2QyxvQkFBb0IsQ0FBQztBQUFBLE1BQUdpQixRQUFILFNBQUdBLFFBQUg7QUFBQSxTQUFtQjtBQUFFQSxJQUFBQSxRQUFRLEVBQVJBO0FBQUYsR0FBbkI7QUFBQSxDQUFELENBQXBCLENBQXVERCxLQUF2RCxDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgU2F5IGZyb20gJ3JlYWN0LXNheSc7XG5cbmltcG9ydCBjb25uZWN0VG9XZWJDaGF0IGZyb20gJy4uL2Nvbm5lY3RUb1dlYkNoYXQnO1xuaW1wb3J0IFNheUFsdCBmcm9tICcuL1NheUFsdCc7XG5cbi8vIFRPRE86IFtQNF0gQ29uc2lkZXIgbW92aW5nIHRoaXMgZmVhdHVyZSBpbnRvIEJhc2ljQWN0aXZpdHlcbi8vICAgICAgIEFuZCBpdCBoYXMgYmV0dGVyIERPTSBwb3NpdGlvbiBmb3Igc2hvd2luZyB2aXN1YWwgc3Bva2VuIHRleHRcblxuLy8gVE9ETzogW1AzXSBXZSBzaG91bGQgYWRkIGEgXCJzcG9rZW5cIiBvciBcInNwZWFrU3RhdGVcIiBmbGFnIHRvIGluZGljYXRlIHdoZXRoZXIgdGhpcyBhY3Rpdml0eSBpcyBnb2luZyB0byBzcGVhaywgb3Igc3Bva2VuXG5jb25zdCBjb25uZWN0U3BlYWtBY3Rpdml0eSA9ICguLi5zZWxlY3RvcnMpID0+XG4gIGNvbm5lY3RUb1dlYkNoYXQoXG4gICAgKHsgbGFuZ3VhZ2UsIG1hcmtBY3Rpdml0eSB9LCB7IGFjdGl2aXR5IH0pID0+ICh7XG4gICAgICBsYW5ndWFnZSxcbiAgICAgIG1hcmtBc1Nwb2tlbjogKCkgPT4gbWFya0FjdGl2aXR5KGFjdGl2aXR5LCAnc3BlYWsnLCBmYWxzZSksXG4gICAgICBzZWxlY3RWb2ljZTogdm9pY2VzID0+IHtcbiAgICAgICAgdm9pY2VzID0gW10uc2xpY2UuY2FsbCh2b2ljZXMpO1xuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgdm9pY2VzLmZpbmQoKHsgbGFuZyB9KSA9PiBsYW5nID09PSBhY3Rpdml0eS5sb2NhbGUpIHx8XG4gICAgICAgICAgdm9pY2VzLmZpbmQoKHsgbGFuZyB9KSA9PiBsYW5nID09PSBsYW5ndWFnZSkgfHxcbiAgICAgICAgICB2b2ljZXMuZmluZCgoeyBsYW5nIH0pID0+IGxhbmcgPT09IHdpbmRvdy5uYXZpZ2F0b3IubGFuZ3VhZ2UpIHx8XG4gICAgICAgICAgdm9pY2VzLmZpbmQoKHsgbGFuZyB9KSA9PiBsYW5nID09PSAnZW4tVVMnKSB8fFxuICAgICAgICAgIHZvaWNlc1swXVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0pLFxuICAgIC4uLnNlbGVjdG9yc1xuICApO1xuXG5jb25zdCBTcGVhayA9ICh7IGFjdGl2aXR5LCBtYXJrQXNTcG9rZW4sIHNlbGVjdFZvaWNlLCBzdHlsZVNldCB9KSA9PiB7XG4gIGlmICghYWN0aXZpdHkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBjb25zdCB7IGF0dGFjaG1lbnRzID0gW10sIHNwZWFrLCB0ZXh0IH0gPSBhY3Rpdml0eTtcblxuICBjb25zdCBsaW5lcyA9IFtzcGVhayB8fCB0ZXh0XTtcblxuICBhdHRhY2htZW50cy5mb3JFYWNoKCh7IGNvbnRlbnQ6IHsgc3BlYWsgfSA9IHt9LCBjb250ZW50VHlwZSB9KSA9PiB7XG4gICAgaWYgKGNvbnRlbnRUeXBlID09PSAnYXBwbGljYXRpb24vdm5kLm1pY3Jvc29mdC5jYXJkLmFkYXB0aXZlJykge1xuICAgICAgbGluZXMucHVzaChzcGVhayk7XG4gICAgfVxuICB9KTtcblxuICBjb25zdCBzaW5nbGVMaW5lID0gbGluZXMuZmlsdGVyKGxpbmUgPT4gbGluZSkuam9pbignXFxyXFxuJyk7XG5cbiAgcmV0dXJuIChcbiAgICA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICA8U2F5IG9uRW5kPXttYXJrQXNTcG9rZW59IHNwZWFrPXtzaW5nbGVMaW5lfSB2b2ljZT17c2VsZWN0Vm9pY2V9IC8+XG4gICAgICB7ISFzdHlsZVNldC5vcHRpb25zLnNob3dTcG9rZW5UZXh0ICYmIDxTYXlBbHQgc3BlYWs9e3NpbmdsZUxpbmV9IHZvaWNlPXtzZWxlY3RWb2ljZX0gLz59XG4gICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgKTtcbn07XG5cblNwZWFrLnByb3BUeXBlcyA9IHtcbiAgYWN0aXZpdHk6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgYXR0YWNobWVudHM6IFByb3BUeXBlcy5hcnJheU9mKFxuICAgICAgUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgICAgc3BlYWs6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICAgIHN1YnRpdGxlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgICB0ZXh0OiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgICB0aXRsZTogUHJvcFR5cGVzLnN0cmluZ1xuICAgICAgfSlcbiAgICApLFxuICAgIHNwZWFrOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHRleHQ6IFByb3BUeXBlcy5zdHJpbmdcbiAgfSkuaXNSZXF1aXJlZCxcbiAgbWFya0FzU3Bva2VuOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBzZWxlY3RWb2ljZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgc3R5bGVTZXQ6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgb3B0aW9uczogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIHNob3dTcG9rZW5UZXh0OiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkXG4gICAgfSkuaXNSZXF1aXJlZFxuICB9KS5pc1JlcXVpcmVkXG59O1xuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0U3BlYWtBY3Rpdml0eSgoeyBzdHlsZVNldCB9KSA9PiAoeyBzdHlsZVNldCB9KSkoU3BlYWspO1xuXG5leHBvcnQgeyBjb25uZWN0U3BlYWtBY3Rpdml0eSB9O1xuIl19