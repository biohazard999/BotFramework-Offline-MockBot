"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.connectSendStatus = exports.default = void 0;

var _botframeworkWebchatCore = require("botframework-webchat-core");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _connectToWebChat = _interopRequireDefault(require("../connectToWebChat"));

var _Localize = _interopRequireWildcard(require("../Localization/Localize"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _Constants$ActivityCl = _botframeworkWebchatCore.Constants.ActivityClientState,
    SEND_FAILED = _Constants$ActivityCl.SEND_FAILED,
    SENDING = _Constants$ActivityCl.SENDING;

var connectSendStatus = function connectSendStatus() {
  for (var _len = arguments.length, selectors = new Array(_len), _key = 0; _key < _len; _key++) {
    selectors[_key] = arguments[_key];
  }

  return _connectToWebChat.default.apply(void 0, [function (_ref, _ref2) {
    var focusSendBox = _ref.focusSendBox,
        language = _ref.language,
        postActivity = _ref.postActivity;
    var activity = _ref2.activity;
    return {
      language: language,
      retrySend: function retrySend(evt) {
        evt.preventDefault();
        postActivity(activity); // After clicking on "retry", the button will be gone and focus will be lost (back to document.body)
        // We want to make sure the user stay inside Web Chat

        focusSendBox();
      }
    };
  }].concat(selectors));
};

exports.connectSendStatus = connectSendStatus;

var SendStatus = function SendStatus(_ref3) {
  var _ref3$activity$channe = _ref3.activity.channelData;
  _ref3$activity$channe = _ref3$activity$channe === void 0 ? {} : _ref3$activity$channe;
  var state = _ref3$activity$channe.state,
      language = _ref3.language,
      retrySend = _ref3.retrySend,
      styleSet = _ref3.styleSet;
  // TODO: [P4] Currently, this is the only place which use a templated string
  //       We could refactor this into a general component if there are more templated strings
  var sendFailedText = (0, _Localize.localize)('SEND_FAILED_KEY', language);
  var sendFailedRetryMatch = /\{Retry\}/.exec(sendFailedText);
  return _react.default.createElement("span", {
    className: styleSet.sendStatus
  }, state === SENDING ? _react.default.createElement(_Localize.default, {
    text: "Sending"
  }) : state === SEND_FAILED ? sendFailedRetryMatch ? _react.default.createElement(_react.default.Fragment, null, sendFailedText.substr(0, sendFailedRetryMatch.index), _react.default.createElement("button", {
    onClick: retrySend,
    type: "button"
  }, (0, _Localize.localize)('Retry', language)), sendFailedText.substr(sendFailedRetryMatch.index + sendFailedRetryMatch[0].length)) : _react.default.createElement("button", {
    onClick: retrySend,
    type: "button"
  }, sendFailedText) : false);
};

SendStatus.propTypes = {
  activity: _propTypes.default.shape({
    channelData: _propTypes.default.shape({
      state: _propTypes.default.string
    })
  }).isRequired,
  language: _propTypes.default.string.isRequired,
  retrySend: _propTypes.default.func.isRequired,
  styleSet: _propTypes.default.shape({
    sendStatus: _propTypes.default.any.isRequired
  }).isRequired
};

var _default = connectSendStatus(function (_ref4) {
  var styleSet = _ref4.styleSet;
  return {
    styleSet: styleSet
  };
})(SendStatus);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9BY3Rpdml0eS9TZW5kU3RhdHVzLmpzIl0sIm5hbWVzIjpbIkNvbnN0YW50cyIsIkFjdGl2aXR5Q2xpZW50U3RhdGUiLCJTRU5EX0ZBSUxFRCIsIlNFTkRJTkciLCJjb25uZWN0U2VuZFN0YXR1cyIsInNlbGVjdG9ycyIsImNvbm5lY3RUb1dlYkNoYXQiLCJmb2N1c1NlbmRCb3giLCJsYW5ndWFnZSIsInBvc3RBY3Rpdml0eSIsImFjdGl2aXR5IiwicmV0cnlTZW5kIiwiZXZ0IiwicHJldmVudERlZmF1bHQiLCJTZW5kU3RhdHVzIiwiY2hhbm5lbERhdGEiLCJzdGF0ZSIsInN0eWxlU2V0Iiwic2VuZEZhaWxlZFRleHQiLCJzZW5kRmFpbGVkUmV0cnlNYXRjaCIsImV4ZWMiLCJzZW5kU3RhdHVzIiwic3Vic3RyIiwiaW5kZXgiLCJsZW5ndGgiLCJwcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJzaGFwZSIsInN0cmluZyIsImlzUmVxdWlyZWQiLCJmdW5jIiwiYW55Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBRUE7O0FBQ0E7Ozs7Ozs0QkFJSUEsa0MsQ0FERkMsbUI7SUFBdUJDLFcseUJBQUFBLFc7SUFBYUMsTyx5QkFBQUEsTzs7QUFHdEMsSUFBTUMsaUJBQWlCLEdBQUcsU0FBcEJBLGlCQUFvQjtBQUFBLG9DQUFJQyxTQUFKO0FBQUlBLElBQUFBLFNBQUo7QUFBQTs7QUFBQSxTQUN4QkMseUNBQ0U7QUFBQSxRQUFHQyxZQUFILFFBQUdBLFlBQUg7QUFBQSxRQUFpQkMsUUFBakIsUUFBaUJBLFFBQWpCO0FBQUEsUUFBMkJDLFlBQTNCLFFBQTJCQSxZQUEzQjtBQUFBLFFBQTZDQyxRQUE3QyxTQUE2Q0EsUUFBN0M7QUFBQSxXQUE2RDtBQUMzREYsTUFBQUEsUUFBUSxFQUFSQSxRQUQyRDtBQUUzREcsTUFBQUEsU0FBUyxFQUFFLG1CQUFBQyxHQUFHLEVBQUk7QUFDaEJBLFFBQUFBLEdBQUcsQ0FBQ0MsY0FBSjtBQUVBSixRQUFBQSxZQUFZLENBQUNDLFFBQUQsQ0FBWixDQUhnQixDQUtoQjtBQUNBOztBQUNBSCxRQUFBQSxZQUFZO0FBQ2I7QUFWMEQsS0FBN0Q7QUFBQSxHQURGLFNBYUtGLFNBYkwsRUFEd0I7QUFBQSxDQUExQjs7OztBQWlCQSxJQUFNUyxVQUFVLEdBQUcsU0FBYkEsVUFBYSxRQUFrRjtBQUFBLG9DQUEvRUosUUFBK0UsQ0FBbkVLLFdBQW1FO0FBQUEsNkRBQTFDLEVBQTBDO0FBQUEsTUFBcERDLEtBQW9ELHlCQUFwREEsS0FBb0Q7QUFBQSxNQUFwQ1IsUUFBb0MsU0FBcENBLFFBQW9DO0FBQUEsTUFBMUJHLFNBQTBCLFNBQTFCQSxTQUEwQjtBQUFBLE1BQWZNLFFBQWUsU0FBZkEsUUFBZTtBQUNuRztBQUNBO0FBQ0EsTUFBTUMsY0FBYyxHQUFHLHdCQUFTLGlCQUFULEVBQTRCVixRQUE1QixDQUF2QjtBQUNBLE1BQU1XLG9CQUFvQixHQUFHLFlBQWFDLElBQWIsQ0FBa0JGLGNBQWxCLENBQTdCO0FBRUEsU0FDRTtBQUFNLElBQUEsU0FBUyxFQUFFRCxRQUFRLENBQUNJO0FBQTFCLEtBQ0dMLEtBQUssS0FBS2IsT0FBVixHQUNDLDZCQUFDLGlCQUFEO0FBQVUsSUFBQSxJQUFJLEVBQUM7QUFBZixJQURELEdBRUdhLEtBQUssS0FBS2QsV0FBVixHQUNGaUIsb0JBQW9CLEdBQ2xCLDZCQUFDLGNBQUQsQ0FBTyxRQUFQLFFBQ0dELGNBQWMsQ0FBQ0ksTUFBZixDQUFzQixDQUF0QixFQUF5Qkgsb0JBQW9CLENBQUNJLEtBQTlDLENBREgsRUFFRTtBQUFRLElBQUEsT0FBTyxFQUFFWixTQUFqQjtBQUE0QixJQUFBLElBQUksRUFBQztBQUFqQyxLQUNHLHdCQUFTLE9BQVQsRUFBa0JILFFBQWxCLENBREgsQ0FGRixFQUtHVSxjQUFjLENBQUNJLE1BQWYsQ0FBc0JILG9CQUFvQixDQUFDSSxLQUFyQixHQUE2Qkosb0JBQW9CLENBQUMsQ0FBRCxDQUFwQixDQUF3QkssTUFBM0UsQ0FMSCxDQURrQixHQVNsQjtBQUFRLElBQUEsT0FBTyxFQUFFYixTQUFqQjtBQUE0QixJQUFBLElBQUksRUFBQztBQUFqQyxLQUNHTyxjQURILENBVkEsR0FlRixLQWxCSixDQURGO0FBdUJELENBN0JEOztBQStCQUosVUFBVSxDQUFDVyxTQUFYLEdBQXVCO0FBQ3JCZixFQUFBQSxRQUFRLEVBQUVnQixtQkFBVUMsS0FBVixDQUFnQjtBQUN4QlosSUFBQUEsV0FBVyxFQUFFVyxtQkFBVUMsS0FBVixDQUFnQjtBQUMzQlgsTUFBQUEsS0FBSyxFQUFFVSxtQkFBVUU7QUFEVSxLQUFoQjtBQURXLEdBQWhCLEVBSVBDLFVBTGtCO0FBTXJCckIsRUFBQUEsUUFBUSxFQUFFa0IsbUJBQVVFLE1BQVYsQ0FBaUJDLFVBTk47QUFPckJsQixFQUFBQSxTQUFTLEVBQUVlLG1CQUFVSSxJQUFWLENBQWVELFVBUEw7QUFRckJaLEVBQUFBLFFBQVEsRUFBRVMsbUJBQVVDLEtBQVYsQ0FBZ0I7QUFDeEJOLElBQUFBLFVBQVUsRUFBRUssbUJBQVVLLEdBQVYsQ0FBY0Y7QUFERixHQUFoQixFQUVQQTtBQVZrQixDQUF2Qjs7ZUFhZXpCLGlCQUFpQixDQUFDO0FBQUEsTUFBR2EsUUFBSCxTQUFHQSxRQUFIO0FBQUEsU0FBbUI7QUFBRUEsSUFBQUEsUUFBUSxFQUFSQTtBQUFGLEdBQW5CO0FBQUEsQ0FBRCxDQUFqQixDQUFvREgsVUFBcEQsQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbnN0YW50cyB9IGZyb20gJ2JvdGZyYW1ld29yay13ZWJjaGF0LWNvcmUnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBjb25uZWN0VG9XZWJDaGF0IGZyb20gJy4uL2Nvbm5lY3RUb1dlYkNoYXQnO1xuaW1wb3J0IExvY2FsaXplLCB7IGxvY2FsaXplIH0gZnJvbSAnLi4vTG9jYWxpemF0aW9uL0xvY2FsaXplJztcblxuY29uc3Qge1xuICBBY3Rpdml0eUNsaWVudFN0YXRlOiB7IFNFTkRfRkFJTEVELCBTRU5ESU5HIH1cbn0gPSBDb25zdGFudHM7XG5cbmNvbnN0IGNvbm5lY3RTZW5kU3RhdHVzID0gKC4uLnNlbGVjdG9ycykgPT5cbiAgY29ubmVjdFRvV2ViQ2hhdChcbiAgICAoeyBmb2N1c1NlbmRCb3gsIGxhbmd1YWdlLCBwb3N0QWN0aXZpdHkgfSwgeyBhY3Rpdml0eSB9KSA9PiAoe1xuICAgICAgbGFuZ3VhZ2UsXG4gICAgICByZXRyeVNlbmQ6IGV2dCA9PiB7XG4gICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgIHBvc3RBY3Rpdml0eShhY3Rpdml0eSk7XG5cbiAgICAgICAgLy8gQWZ0ZXIgY2xpY2tpbmcgb24gXCJyZXRyeVwiLCB0aGUgYnV0dG9uIHdpbGwgYmUgZ29uZSBhbmQgZm9jdXMgd2lsbCBiZSBsb3N0IChiYWNrIHRvIGRvY3VtZW50LmJvZHkpXG4gICAgICAgIC8vIFdlIHdhbnQgdG8gbWFrZSBzdXJlIHRoZSB1c2VyIHN0YXkgaW5zaWRlIFdlYiBDaGF0XG4gICAgICAgIGZvY3VzU2VuZEJveCgpO1xuICAgICAgfVxuICAgIH0pLFxuICAgIC4uLnNlbGVjdG9yc1xuICApO1xuXG5jb25zdCBTZW5kU3RhdHVzID0gKHsgYWN0aXZpdHk6IHsgY2hhbm5lbERhdGE6IHsgc3RhdGUgfSA9IHt9IH0sIGxhbmd1YWdlLCByZXRyeVNlbmQsIHN0eWxlU2V0IH0pID0+IHtcbiAgLy8gVE9ETzogW1A0XSBDdXJyZW50bHksIHRoaXMgaXMgdGhlIG9ubHkgcGxhY2Ugd2hpY2ggdXNlIGEgdGVtcGxhdGVkIHN0cmluZ1xuICAvLyAgICAgICBXZSBjb3VsZCByZWZhY3RvciB0aGlzIGludG8gYSBnZW5lcmFsIGNvbXBvbmVudCBpZiB0aGVyZSBhcmUgbW9yZSB0ZW1wbGF0ZWQgc3RyaW5nc1xuICBjb25zdCBzZW5kRmFpbGVkVGV4dCA9IGxvY2FsaXplKCdTRU5EX0ZBSUxFRF9LRVknLCBsYW5ndWFnZSk7XG4gIGNvbnN0IHNlbmRGYWlsZWRSZXRyeU1hdGNoID0gL1xce1JldHJ5XFx9L3UuZXhlYyhzZW5kRmFpbGVkVGV4dCk7XG5cbiAgcmV0dXJuIChcbiAgICA8c3BhbiBjbGFzc05hbWU9e3N0eWxlU2V0LnNlbmRTdGF0dXN9PlxuICAgICAge3N0YXRlID09PSBTRU5ESU5HID8gKFxuICAgICAgICA8TG9jYWxpemUgdGV4dD1cIlNlbmRpbmdcIiAvPlxuICAgICAgKSA6IHN0YXRlID09PSBTRU5EX0ZBSUxFRCA/IChcbiAgICAgICAgc2VuZEZhaWxlZFJldHJ5TWF0Y2ggPyAoXG4gICAgICAgICAgPFJlYWN0LkZyYWdtZW50PlxuICAgICAgICAgICAge3NlbmRGYWlsZWRUZXh0LnN1YnN0cigwLCBzZW5kRmFpbGVkUmV0cnlNYXRjaC5pbmRleCl9XG4gICAgICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9e3JldHJ5U2VuZH0gdHlwZT1cImJ1dHRvblwiPlxuICAgICAgICAgICAgICB7bG9jYWxpemUoJ1JldHJ5JywgbGFuZ3VhZ2UpfVxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICB7c2VuZEZhaWxlZFRleHQuc3Vic3RyKHNlbmRGYWlsZWRSZXRyeU1hdGNoLmluZGV4ICsgc2VuZEZhaWxlZFJldHJ5TWF0Y2hbMF0ubGVuZ3RoKX1cbiAgICAgICAgICA8L1JlYWN0LkZyYWdtZW50PlxuICAgICAgICApIDogKFxuICAgICAgICAgIDxidXR0b24gb25DbGljaz17cmV0cnlTZW5kfSB0eXBlPVwiYnV0dG9uXCI+XG4gICAgICAgICAgICB7c2VuZEZhaWxlZFRleHR9XG4gICAgICAgICAgPC9idXR0b24+XG4gICAgICAgIClcbiAgICAgICkgOiAoXG4gICAgICAgIGZhbHNlXG4gICAgICApfVxuICAgIDwvc3Bhbj5cbiAgKTtcbn07XG5cblNlbmRTdGF0dXMucHJvcFR5cGVzID0ge1xuICBhY3Rpdml0eTogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBjaGFubmVsRGF0YTogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIHN0YXRlOiBQcm9wVHlwZXMuc3RyaW5nXG4gICAgfSlcbiAgfSkuaXNSZXF1aXJlZCxcbiAgbGFuZ3VhZ2U6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgcmV0cnlTZW5kOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBzdHlsZVNldDogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBzZW5kU3RhdHVzOiBQcm9wVHlwZXMuYW55LmlzUmVxdWlyZWRcbiAgfSkuaXNSZXF1aXJlZFxufTtcblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdFNlbmRTdGF0dXMoKHsgc3R5bGVTZXQgfSkgPT4gKHsgc3R5bGVTZXQgfSkpKFNlbmRTdGF0dXMpO1xuXG5leHBvcnQgeyBjb25uZWN0U2VuZFN0YXR1cyB9O1xuIl19