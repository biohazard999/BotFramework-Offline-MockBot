"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _connectToWebChat = _interopRequireDefault(require("../connectToWebChat"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// The content rendered here is sanitized.

/* eslint react/no-danger: "off" */

/* eslint react/no-array-index-key: "off" */
var TextContent = function TextContent(_ref) {
  var contentType = _ref.contentType,
      renderMarkdown = _ref.renderMarkdown,
      styleSet = _ref.styleSet,
      text = _ref.text;
  return contentType === 'text/markdown' && renderMarkdown ? _react.default.createElement("div", {
    className: (0, _classnames.default)('markdown', styleSet.textContent + ''),
    dangerouslySetInnerHTML: {
      __html: renderMarkdown(text || '')
    }
  }) : (text || '').split('\n').map(function (line, index) {
    return _react.default.createElement("p", {
      className: (0, _classnames.default)('plain', styleSet.textContent + ''),
      key: index
    }, line.trim());
  });
};

TextContent.defaultProps = {
  contentType: 'text/markdown',
  renderMarkdown: function renderMarkdown(text) {
    return text;
  }
};
TextContent.propTypes = {
  contentType: _propTypes.default.string,
  renderMarkdown: _propTypes.default.func,
  styleSet: _propTypes.default.shape({
    textContent: _propTypes.default.any.isRequired
  }).isRequired,
  text: _propTypes.default.string.isRequired
};

var _default = (0, _connectToWebChat.default)(function (_ref2) {
  var renderMarkdown = _ref2.renderMarkdown,
      styleSet = _ref2.styleSet;
  return {
    renderMarkdown: renderMarkdown,
    styleSet: styleSet
  };
})(TextContent);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9BdHRhY2htZW50L1RleHRDb250ZW50LmpzIl0sIm5hbWVzIjpbIlRleHRDb250ZW50IiwiY29udGVudFR5cGUiLCJyZW5kZXJNYXJrZG93biIsInN0eWxlU2V0IiwidGV4dCIsInRleHRDb250ZW50IiwiX19odG1sIiwic3BsaXQiLCJtYXAiLCJsaW5lIiwiaW5kZXgiLCJ0cmltIiwiZGVmYXVsdFByb3BzIiwicHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwic3RyaW5nIiwiZnVuYyIsInNoYXBlIiwiYW55IiwiaXNSZXF1aXJlZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUlBOztBQUNBOztBQUNBOztBQUVBOzs7O0FBUkE7O0FBQ0E7O0FBQ0E7QUFRQSxJQUFNQSxXQUFXLEdBQUcsU0FBZEEsV0FBYztBQUFBLE1BQUdDLFdBQUgsUUFBR0EsV0FBSDtBQUFBLE1BQWdCQyxjQUFoQixRQUFnQkEsY0FBaEI7QUFBQSxNQUFnQ0MsUUFBaEMsUUFBZ0NBLFFBQWhDO0FBQUEsTUFBMENDLElBQTFDLFFBQTBDQSxJQUExQztBQUFBLFNBQ2xCSCxXQUFXLEtBQUssZUFBaEIsSUFBbUNDLGNBQW5DLEdBQ0U7QUFDRSxJQUFBLFNBQVMsRUFBRSx5QkFBVyxVQUFYLEVBQXVCQyxRQUFRLENBQUNFLFdBQVQsR0FBdUIsRUFBOUMsQ0FEYjtBQUVFLElBQUEsdUJBQXVCLEVBQUU7QUFBRUMsTUFBQUEsTUFBTSxFQUFFSixjQUFjLENBQUNFLElBQUksSUFBSSxFQUFUO0FBQXhCO0FBRjNCLElBREYsR0FNRSxDQUFDQSxJQUFJLElBQUksRUFBVCxFQUFhRyxLQUFiLENBQW1CLElBQW5CLEVBQXlCQyxHQUF6QixDQUE2QixVQUFDQyxJQUFELEVBQU9DLEtBQVA7QUFBQSxXQUMzQjtBQUFHLE1BQUEsU0FBUyxFQUFFLHlCQUFXLE9BQVgsRUFBb0JQLFFBQVEsQ0FBQ0UsV0FBVCxHQUF1QixFQUEzQyxDQUFkO0FBQThELE1BQUEsR0FBRyxFQUFFSztBQUFuRSxPQUNHRCxJQUFJLENBQUNFLElBQUwsRUFESCxDQUQyQjtBQUFBLEdBQTdCLENBUGdCO0FBQUEsQ0FBcEI7O0FBY0FYLFdBQVcsQ0FBQ1ksWUFBWixHQUEyQjtBQUN6QlgsRUFBQUEsV0FBVyxFQUFFLGVBRFk7QUFFekJDLEVBQUFBLGNBQWMsRUFBRSx3QkFBQUUsSUFBSTtBQUFBLFdBQUlBLElBQUo7QUFBQTtBQUZLLENBQTNCO0FBS0FKLFdBQVcsQ0FBQ2EsU0FBWixHQUF3QjtBQUN0QlosRUFBQUEsV0FBVyxFQUFFYSxtQkFBVUMsTUFERDtBQUV0QmIsRUFBQUEsY0FBYyxFQUFFWSxtQkFBVUUsSUFGSjtBQUd0QmIsRUFBQUEsUUFBUSxFQUFFVyxtQkFBVUcsS0FBVixDQUFnQjtBQUN4QlosSUFBQUEsV0FBVyxFQUFFUyxtQkFBVUksR0FBVixDQUFjQztBQURILEdBQWhCLEVBRVBBLFVBTG1CO0FBTXRCZixFQUFBQSxJQUFJLEVBQUVVLG1CQUFVQyxNQUFWLENBQWlCSTtBQU5ELENBQXhCOztlQVNlLCtCQUFpQjtBQUFBLE1BQUdqQixjQUFILFNBQUdBLGNBQUg7QUFBQSxNQUFtQkMsUUFBbkIsU0FBbUJBLFFBQW5CO0FBQUEsU0FBbUM7QUFBRUQsSUFBQUEsY0FBYyxFQUFkQSxjQUFGO0FBQWtCQyxJQUFBQSxRQUFRLEVBQVJBO0FBQWxCLEdBQW5DO0FBQUEsQ0FBakIsRUFBbUZILFdBQW5GLEMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGUgY29udGVudCByZW5kZXJlZCBoZXJlIGlzIHNhbml0aXplZC5cbi8qIGVzbGludCByZWFjdC9uby1kYW5nZXI6IFwib2ZmXCIgKi9cbi8qIGVzbGludCByZWFjdC9uby1hcnJheS1pbmRleC1rZXk6IFwib2ZmXCIgKi9cblxuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IGNvbm5lY3RUb1dlYkNoYXQgZnJvbSAnLi4vY29ubmVjdFRvV2ViQ2hhdCc7XG5cbmNvbnN0IFRleHRDb250ZW50ID0gKHsgY29udGVudFR5cGUsIHJlbmRlck1hcmtkb3duLCBzdHlsZVNldCwgdGV4dCB9KSA9PlxuICBjb250ZW50VHlwZSA9PT0gJ3RleHQvbWFya2Rvd24nICYmIHJlbmRlck1hcmtkb3duID8gKFxuICAgIDxkaXZcbiAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lcygnbWFya2Rvd24nLCBzdHlsZVNldC50ZXh0Q29udGVudCArICcnKX1cbiAgICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7IF9faHRtbDogcmVuZGVyTWFya2Rvd24odGV4dCB8fCAnJykgfX1cbiAgICAvPlxuICApIDogKFxuICAgICh0ZXh0IHx8ICcnKS5zcGxpdCgnXFxuJykubWFwKChsaW5lLCBpbmRleCkgPT4gKFxuICAgICAgPHAgY2xhc3NOYW1lPXtjbGFzc05hbWVzKCdwbGFpbicsIHN0eWxlU2V0LnRleHRDb250ZW50ICsgJycpfSBrZXk9e2luZGV4fT5cbiAgICAgICAge2xpbmUudHJpbSgpfVxuICAgICAgPC9wPlxuICAgICkpXG4gICk7XG5cblRleHRDb250ZW50LmRlZmF1bHRQcm9wcyA9IHtcbiAgY29udGVudFR5cGU6ICd0ZXh0L21hcmtkb3duJyxcbiAgcmVuZGVyTWFya2Rvd246IHRleHQgPT4gdGV4dFxufTtcblxuVGV4dENvbnRlbnQucHJvcFR5cGVzID0ge1xuICBjb250ZW50VHlwZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgcmVuZGVyTWFya2Rvd246IFByb3BUeXBlcy5mdW5jLFxuICBzdHlsZVNldDogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICB0ZXh0Q29udGVudDogUHJvcFR5cGVzLmFueS5pc1JlcXVpcmVkXG4gIH0pLmlzUmVxdWlyZWQsXG4gIHRleHQ6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZFxufTtcblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdFRvV2ViQ2hhdCgoeyByZW5kZXJNYXJrZG93biwgc3R5bGVTZXQgfSkgPT4gKHsgcmVuZGVyTWFya2Rvd24sIHN0eWxlU2V0IH0pKShUZXh0Q29udGVudCk7XG4iXX0=