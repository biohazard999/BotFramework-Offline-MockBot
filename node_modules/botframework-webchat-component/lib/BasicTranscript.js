"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactSay = require("react-say");

var _glamor = require("glamor");

var _reactScrollToBottom = require("react-scroll-to-bottom");

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _connectToWebChat = _interopRequireDefault(require("./connectToWebChat"));

var _ScrollToEndButton = _interopRequireDefault(require("./Activity/ScrollToEndButton"));

var _Speak = _interopRequireDefault(require("./Activity/Speak"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ROOT_CSS = (0, _glamor.css)({
  overflow: 'hidden',
  position: 'relative'
});
var PANEL_CSS = (0, _glamor.css)({
  display: 'flex',
  flexDirection: 'column',
  WebkitOverflowScrolling: 'touch'
});
var FILLER_CSS = (0, _glamor.css)({
  flex: 1
});
var LIST_CSS = (0, _glamor.css)({
  listStyleType: 'none',
  '& > li.hide-timestamp .transcript-timestamp': {
    display: 'none'
  }
});
var DEFAULT_GROUP_TIMESTAMP = 300000; // 5 minutes

function sameTimestampGroup(activityX, activityY, groupTimestamp) {
  if (groupTimestamp === false) {
    return true;
  } else if (activityX && activityY) {
    groupTimestamp = typeof groupTimestamp === 'number' ? groupTimestamp : DEFAULT_GROUP_TIMESTAMP;

    if (activityX.from.role === activityY.from.role) {
      var timeX = new Date(activityX.timestamp).getTime();
      var timeY = new Date(activityY.timestamp).getTime();
      return Math.abs(timeX - timeY) <= groupTimestamp;
    }
  }

  return false;
}

var BasicTranscript = function BasicTranscript(_ref) {
  var activityRenderer = _ref.activityRenderer,
      activities = _ref.activities,
      attachmentRenderer = _ref.attachmentRenderer,
      className = _ref.className,
      groupTimestamp = _ref.groupTimestamp,
      styleSet = _ref.styleSet,
      webSpeechPonyfill = _ref.webSpeechPonyfill;

  var _ref2 = webSpeechPonyfill || {},
      speechSynthesis = _ref2.speechSynthesis,
      SpeechSynthesisUtterance = _ref2.SpeechSynthesisUtterance; // We use 2-pass approach for rendering activities, for show/hide timestamp grouping.
  // Until the activity pass thru middleware, we never know if it is going to show up.
  // After we know which activities will show up, we can compute which activity will show timestamps.
  // If the activity does not render, it will not be spoken if text-to-speech is enabled.


  var activityElements = activities.reduce(function (activityElements, activity) {
    var element = activityRenderer({
      activity: activity,
      timestampClassName: 'transcript-timestamp'
    })(function (_ref3) {
      var attachment = _ref3.attachment;
      return attachmentRenderer({
        activity: activity,
        attachment: attachment
      });
    });
    element && activityElements.push({
      activity: activity,
      element: element
    });
    return activityElements;
  }, []);
  return _react.default.createElement("div", {
    className: (0, _classnames.default)(ROOT_CSS + '', className + ''),
    role: "log"
  }, _react.default.createElement(_reactScrollToBottom.Panel, {
    className: PANEL_CSS + ''
  }, _react.default.createElement("div", {
    className: FILLER_CSS
  }), _react.default.createElement(_reactSay.Composer, {
    speechSynthesis: speechSynthesis,
    speechSynthesisUtterance: SpeechSynthesisUtterance
  }, _react.default.createElement("ul", {
    "aria-atomic": "false",
    "aria-live": "polite",
    "aria-relevant": "additions text",
    className: (0, _classnames.default)(LIST_CSS + '', styleSet.activities + ''),
    role: "list"
  }, activityElements.map(function (_ref4, index) {
    var activity = _ref4.activity,
        element = _ref4.element;
    return _react.default.createElement("li", {
      className: (0, _classnames.default)(styleSet.activity + '', {
        // Hide timestamp if same timestamp group with the next activity
        'hide-timestamp': sameTimestampGroup(activity, (activityElements[index + 1] || {}).activity, groupTimestamp)
      }),
      key: activity.channelData && activity.channelData.clientActivityID || activity.id || index,
      role: "listitem"
    }, element, // TODO: [P2] We should use core/definitions/speakingActivity for this predicate instead
    activity.channelData && activity.channelData.speak && _react.default.createElement(_Speak.default, {
      activity: activity
    }));
  })))), _react.default.createElement(_ScrollToEndButton.default, null));
};

BasicTranscript.defaultProps = {
  className: '',
  groupTimestamp: true,
  webSpeechPonyfill: undefined
};
BasicTranscript.propTypes = {
  activities: _propTypes.default.array.isRequired,
  activityRenderer: _propTypes.default.func.isRequired,
  attachmentRenderer: _propTypes.default.func.isRequired,
  className: _propTypes.default.string,
  groupTimestamp: _propTypes.default.oneOfType([_propTypes.default.bool.isRequired, _propTypes.default.number.isRequired]),
  styleSet: _propTypes.default.shape({
    activities: _propTypes.default.any.isRequired,
    activity: _propTypes.default.any.isRequired
  }).isRequired,
  webSpeechPonyfill: _propTypes.default.shape({
    speechSynthesis: _propTypes.default.any.isRequired,
    SpeechSynthesisUtterance: _propTypes.default.any.isRequired
  })
};

var _default = (0, _connectToWebChat.default)(function (_ref5) {
  var activities = _ref5.activities,
      activityRenderer = _ref5.activityRenderer,
      attachmentRenderer = _ref5.attachmentRenderer,
      groupTimestamp = _ref5.groupTimestamp,
      styleSet = _ref5.styleSet,
      webSpeechPonyfill = _ref5.webSpeechPonyfill;
  return {
    activities: activities,
    activityRenderer: activityRenderer,
    attachmentRenderer: attachmentRenderer,
    groupTimestamp: groupTimestamp,
    styleSet: styleSet,
    webSpeechPonyfill: webSpeechPonyfill
  };
})(BasicTranscript);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9CYXNpY1RyYW5zY3JpcHQuanMiXSwibmFtZXMiOlsiUk9PVF9DU1MiLCJvdmVyZmxvdyIsInBvc2l0aW9uIiwiUEFORUxfQ1NTIiwiZGlzcGxheSIsImZsZXhEaXJlY3Rpb24iLCJXZWJraXRPdmVyZmxvd1Njcm9sbGluZyIsIkZJTExFUl9DU1MiLCJmbGV4IiwiTElTVF9DU1MiLCJsaXN0U3R5bGVUeXBlIiwiREVGQVVMVF9HUk9VUF9USU1FU1RBTVAiLCJzYW1lVGltZXN0YW1wR3JvdXAiLCJhY3Rpdml0eVgiLCJhY3Rpdml0eVkiLCJncm91cFRpbWVzdGFtcCIsImZyb20iLCJyb2xlIiwidGltZVgiLCJEYXRlIiwidGltZXN0YW1wIiwiZ2V0VGltZSIsInRpbWVZIiwiTWF0aCIsImFicyIsIkJhc2ljVHJhbnNjcmlwdCIsImFjdGl2aXR5UmVuZGVyZXIiLCJhY3Rpdml0aWVzIiwiYXR0YWNobWVudFJlbmRlcmVyIiwiY2xhc3NOYW1lIiwic3R5bGVTZXQiLCJ3ZWJTcGVlY2hQb255ZmlsbCIsInNwZWVjaFN5bnRoZXNpcyIsIlNwZWVjaFN5bnRoZXNpc1V0dGVyYW5jZSIsImFjdGl2aXR5RWxlbWVudHMiLCJyZWR1Y2UiLCJhY3Rpdml0eSIsImVsZW1lbnQiLCJ0aW1lc3RhbXBDbGFzc05hbWUiLCJhdHRhY2htZW50IiwicHVzaCIsIm1hcCIsImluZGV4IiwiY2hhbm5lbERhdGEiLCJjbGllbnRBY3Rpdml0eUlEIiwiaWQiLCJzcGVhayIsImRlZmF1bHRQcm9wcyIsInVuZGVmaW5lZCIsInByb3BUeXBlcyIsIlByb3BUeXBlcyIsImFycmF5IiwiaXNSZXF1aXJlZCIsImZ1bmMiLCJzdHJpbmciLCJvbmVPZlR5cGUiLCJib29sIiwibnVtYmVyIiwic2hhcGUiLCJhbnkiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQTs7QUFDQTs7QUFDQTs7OztBQUVBLElBQU1BLFFBQVEsR0FBRyxpQkFBSTtBQUNuQkMsRUFBQUEsUUFBUSxFQUFFLFFBRFM7QUFFbkJDLEVBQUFBLFFBQVEsRUFBRTtBQUZTLENBQUosQ0FBakI7QUFLQSxJQUFNQyxTQUFTLEdBQUcsaUJBQUk7QUFDcEJDLEVBQUFBLE9BQU8sRUFBRSxNQURXO0FBRXBCQyxFQUFBQSxhQUFhLEVBQUUsUUFGSztBQUdwQkMsRUFBQUEsdUJBQXVCLEVBQUU7QUFITCxDQUFKLENBQWxCO0FBTUEsSUFBTUMsVUFBVSxHQUFHLGlCQUFJO0FBQ3JCQyxFQUFBQSxJQUFJLEVBQUU7QUFEZSxDQUFKLENBQW5CO0FBSUEsSUFBTUMsUUFBUSxHQUFHLGlCQUFJO0FBQ25CQyxFQUFBQSxhQUFhLEVBQUUsTUFESTtBQUduQixpREFBK0M7QUFDN0NOLElBQUFBLE9BQU8sRUFBRTtBQURvQztBQUg1QixDQUFKLENBQWpCO0FBUUEsSUFBTU8sdUJBQXVCLEdBQUcsTUFBaEMsQyxDQUF3Qzs7QUFFeEMsU0FBU0Msa0JBQVQsQ0FBNEJDLFNBQTVCLEVBQXVDQyxTQUF2QyxFQUFrREMsY0FBbEQsRUFBa0U7QUFDaEUsTUFBSUEsY0FBYyxLQUFLLEtBQXZCLEVBQThCO0FBQzVCLFdBQU8sSUFBUDtBQUNELEdBRkQsTUFFTyxJQUFJRixTQUFTLElBQUlDLFNBQWpCLEVBQTRCO0FBQ2pDQyxJQUFBQSxjQUFjLEdBQUcsT0FBT0EsY0FBUCxLQUEwQixRQUExQixHQUFxQ0EsY0FBckMsR0FBc0RKLHVCQUF2RTs7QUFFQSxRQUFJRSxTQUFTLENBQUNHLElBQVYsQ0FBZUMsSUFBZixLQUF3QkgsU0FBUyxDQUFDRSxJQUFWLENBQWVDLElBQTNDLEVBQWlEO0FBQy9DLFVBQU1DLEtBQUssR0FBRyxJQUFJQyxJQUFKLENBQVNOLFNBQVMsQ0FBQ08sU0FBbkIsRUFBOEJDLE9BQTlCLEVBQWQ7QUFDQSxVQUFNQyxLQUFLLEdBQUcsSUFBSUgsSUFBSixDQUFTTCxTQUFTLENBQUNNLFNBQW5CLEVBQThCQyxPQUE5QixFQUFkO0FBRUEsYUFBT0UsSUFBSSxDQUFDQyxHQUFMLENBQVNOLEtBQUssR0FBR0ksS0FBakIsS0FBMkJQLGNBQWxDO0FBQ0Q7QUFDRjs7QUFFRCxTQUFPLEtBQVA7QUFDRDs7QUFFRCxJQUFNVSxlQUFlLEdBQUcsU0FBbEJBLGVBQWtCLE9BUWxCO0FBQUEsTUFQSkMsZ0JBT0ksUUFQSkEsZ0JBT0k7QUFBQSxNQU5KQyxVQU1JLFFBTkpBLFVBTUk7QUFBQSxNQUxKQyxrQkFLSSxRQUxKQSxrQkFLSTtBQUFBLE1BSkpDLFNBSUksUUFKSkEsU0FJSTtBQUFBLE1BSEpkLGNBR0ksUUFISkEsY0FHSTtBQUFBLE1BRkplLFFBRUksUUFGSkEsUUFFSTtBQUFBLE1BREpDLGlCQUNJLFFBREpBLGlCQUNJOztBQUFBLGNBQ2tEQSxpQkFBaUIsSUFBSSxFQUR2RTtBQUFBLE1BQ0lDLGVBREosU0FDSUEsZUFESjtBQUFBLE1BQ3FCQyx3QkFEckIsU0FDcUJBLHdCQURyQixFQUdKO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSxNQUFNQyxnQkFBZ0IsR0FBR1AsVUFBVSxDQUFDUSxNQUFYLENBQWtCLFVBQUNELGdCQUFELEVBQW1CRSxRQUFuQixFQUFnQztBQUN6RSxRQUFNQyxPQUFPLEdBQUdYLGdCQUFnQixDQUFDO0FBQy9CVSxNQUFBQSxRQUFRLEVBQVJBLFFBRCtCO0FBRS9CRSxNQUFBQSxrQkFBa0IsRUFBRTtBQUZXLEtBQUQsQ0FBaEIsQ0FHYjtBQUFBLFVBQUdDLFVBQUgsU0FBR0EsVUFBSDtBQUFBLGFBQW9CWCxrQkFBa0IsQ0FBQztBQUFFUSxRQUFBQSxRQUFRLEVBQVJBLFFBQUY7QUFBWUcsUUFBQUEsVUFBVSxFQUFWQTtBQUFaLE9BQUQsQ0FBdEM7QUFBQSxLQUhhLENBQWhCO0FBS0FGLElBQUFBLE9BQU8sSUFDTEgsZ0JBQWdCLENBQUNNLElBQWpCLENBQXNCO0FBQ3BCSixNQUFBQSxRQUFRLEVBQVJBLFFBRG9CO0FBRXBCQyxNQUFBQSxPQUFPLEVBQVBBO0FBRm9CLEtBQXRCLENBREY7QUFNQSxXQUFPSCxnQkFBUDtBQUNELEdBYndCLEVBYXRCLEVBYnNCLENBQXpCO0FBZUEsU0FDRTtBQUFLLElBQUEsU0FBUyxFQUFFLHlCQUFXbEMsUUFBUSxHQUFHLEVBQXRCLEVBQTBCNkIsU0FBUyxHQUFHLEVBQXRDLENBQWhCO0FBQTJELElBQUEsSUFBSSxFQUFDO0FBQWhFLEtBQ0UsNkJBQUMsMEJBQUQ7QUFBcUIsSUFBQSxTQUFTLEVBQUUxQixTQUFTLEdBQUc7QUFBNUMsS0FDRTtBQUFLLElBQUEsU0FBUyxFQUFFSTtBQUFoQixJQURGLEVBRUUsNkJBQUMsa0JBQUQ7QUFBYSxJQUFBLGVBQWUsRUFBRXlCLGVBQTlCO0FBQStDLElBQUEsd0JBQXdCLEVBQUVDO0FBQXpFLEtBQ0U7QUFDRSxtQkFBWSxPQURkO0FBRUUsaUJBQVUsUUFGWjtBQUdFLHFCQUFjLGdCQUhoQjtBQUlFLElBQUEsU0FBUyxFQUFFLHlCQUFXeEIsUUFBUSxHQUFHLEVBQXRCLEVBQTBCcUIsUUFBUSxDQUFDSCxVQUFULEdBQXNCLEVBQWhELENBSmI7QUFLRSxJQUFBLElBQUksRUFBQztBQUxQLEtBT0dPLGdCQUFnQixDQUFDTyxHQUFqQixDQUFxQixpQkFBd0JDLEtBQXhCO0FBQUEsUUFBR04sUUFBSCxTQUFHQSxRQUFIO0FBQUEsUUFBYUMsT0FBYixTQUFhQSxPQUFiO0FBQUEsV0FDcEI7QUFDRSxNQUFBLFNBQVMsRUFBRSx5QkFBV1AsUUFBUSxDQUFDTSxRQUFULEdBQW9CLEVBQS9CLEVBQW1DO0FBQzVDO0FBQ0EsMEJBQWtCeEIsa0JBQWtCLENBQ2xDd0IsUUFEa0MsRUFFbEMsQ0FBQ0YsZ0JBQWdCLENBQUNRLEtBQUssR0FBRyxDQUFULENBQWhCLElBQStCLEVBQWhDLEVBQW9DTixRQUZGLEVBR2xDckIsY0FIa0M7QUFGUSxPQUFuQyxDQURiO0FBU0UsTUFBQSxHQUFHLEVBQUdxQixRQUFRLENBQUNPLFdBQVQsSUFBd0JQLFFBQVEsQ0FBQ08sV0FBVCxDQUFxQkMsZ0JBQTlDLElBQW1FUixRQUFRLENBQUNTLEVBQTVFLElBQWtGSCxLQVR6RjtBQVVFLE1BQUEsSUFBSSxFQUFDO0FBVlAsT0FZR0wsT0FaSCxFQWFHO0FBQ0RELElBQUFBLFFBQVEsQ0FBQ08sV0FBVCxJQUF3QlAsUUFBUSxDQUFDTyxXQUFULENBQXFCRyxLQUE3QyxJQUFzRCw2QkFBQyxjQUFEO0FBQWUsTUFBQSxRQUFRLEVBQUVWO0FBQXpCLE1BZHhELENBRG9CO0FBQUEsR0FBckIsQ0FQSCxDQURGLENBRkYsQ0FERixFQWdDRSw2QkFBQywwQkFBRCxPQWhDRixDQURGO0FBb0NELENBbEVEOztBQW9FQVgsZUFBZSxDQUFDc0IsWUFBaEIsR0FBK0I7QUFDN0JsQixFQUFBQSxTQUFTLEVBQUUsRUFEa0I7QUFFN0JkLEVBQUFBLGNBQWMsRUFBRSxJQUZhO0FBRzdCZ0IsRUFBQUEsaUJBQWlCLEVBQUVpQjtBQUhVLENBQS9CO0FBTUF2QixlQUFlLENBQUN3QixTQUFoQixHQUE0QjtBQUMxQnRCLEVBQUFBLFVBQVUsRUFBRXVCLG1CQUFVQyxLQUFWLENBQWdCQyxVQURGO0FBRTFCMUIsRUFBQUEsZ0JBQWdCLEVBQUV3QixtQkFBVUcsSUFBVixDQUFlRCxVQUZQO0FBRzFCeEIsRUFBQUEsa0JBQWtCLEVBQUVzQixtQkFBVUcsSUFBVixDQUFlRCxVQUhUO0FBSTFCdkIsRUFBQUEsU0FBUyxFQUFFcUIsbUJBQVVJLE1BSks7QUFLMUJ2QyxFQUFBQSxjQUFjLEVBQUVtQyxtQkFBVUssU0FBVixDQUFvQixDQUFDTCxtQkFBVU0sSUFBVixDQUFlSixVQUFoQixFQUE0QkYsbUJBQVVPLE1BQVYsQ0FBaUJMLFVBQTdDLENBQXBCLENBTFU7QUFNMUJ0QixFQUFBQSxRQUFRLEVBQUVvQixtQkFBVVEsS0FBVixDQUFnQjtBQUN4Qi9CLElBQUFBLFVBQVUsRUFBRXVCLG1CQUFVUyxHQUFWLENBQWNQLFVBREY7QUFFeEJoQixJQUFBQSxRQUFRLEVBQUVjLG1CQUFVUyxHQUFWLENBQWNQO0FBRkEsR0FBaEIsRUFHUEEsVUFUdUI7QUFVMUJyQixFQUFBQSxpQkFBaUIsRUFBRW1CLG1CQUFVUSxLQUFWLENBQWdCO0FBQ2pDMUIsSUFBQUEsZUFBZSxFQUFFa0IsbUJBQVVTLEdBQVYsQ0FBY1AsVUFERTtBQUVqQ25CLElBQUFBLHdCQUF3QixFQUFFaUIsbUJBQVVTLEdBQVYsQ0FBY1A7QUFGUCxHQUFoQjtBQVZPLENBQTVCOztlQWdCZSwrQkFDYjtBQUFBLE1BQUd6QixVQUFILFNBQUdBLFVBQUg7QUFBQSxNQUFlRCxnQkFBZixTQUFlQSxnQkFBZjtBQUFBLE1BQWlDRSxrQkFBakMsU0FBaUNBLGtCQUFqQztBQUFBLE1BQXFEYixjQUFyRCxTQUFxREEsY0FBckQ7QUFBQSxNQUFxRWUsUUFBckUsU0FBcUVBLFFBQXJFO0FBQUEsTUFBK0VDLGlCQUEvRSxTQUErRUEsaUJBQS9FO0FBQUEsU0FBd0c7QUFDdEdKLElBQUFBLFVBQVUsRUFBVkEsVUFEc0c7QUFFdEdELElBQUFBLGdCQUFnQixFQUFoQkEsZ0JBRnNHO0FBR3RHRSxJQUFBQSxrQkFBa0IsRUFBbEJBLGtCQUhzRztBQUl0R2IsSUFBQUEsY0FBYyxFQUFkQSxjQUpzRztBQUt0R2UsSUFBQUEsUUFBUSxFQUFSQSxRQUxzRztBQU10R0MsSUFBQUEsaUJBQWlCLEVBQWpCQTtBQU5zRyxHQUF4RztBQUFBLENBRGEsRUFTYk4sZUFUYSxDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9zZXIgYXMgU2F5Q29tcG9zZXIgfSBmcm9tICdyZWFjdC1zYXknO1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnZ2xhbW9yJztcbmltcG9ydCB7IFBhbmVsIGFzIFNjcm9sbFRvQm90dG9tUGFuZWwgfSBmcm9tICdyZWFjdC1zY3JvbGwtdG8tYm90dG9tJztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBjb25uZWN0VG9XZWJDaGF0IGZyb20gJy4vY29ubmVjdFRvV2ViQ2hhdCc7XG5pbXBvcnQgU2Nyb2xsVG9FbmRCdXR0b24gZnJvbSAnLi9BY3Rpdml0eS9TY3JvbGxUb0VuZEJ1dHRvbic7XG5pbXBvcnQgU3BlYWtBY3Rpdml0eSBmcm9tICcuL0FjdGl2aXR5L1NwZWFrJztcblxuY29uc3QgUk9PVF9DU1MgPSBjc3Moe1xuICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gIHBvc2l0aW9uOiAncmVsYXRpdmUnXG59KTtcblxuY29uc3QgUEFORUxfQ1NTID0gY3NzKHtcbiAgZGlzcGxheTogJ2ZsZXgnLFxuICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgV2Via2l0T3ZlcmZsb3dTY3JvbGxpbmc6ICd0b3VjaCdcbn0pO1xuXG5jb25zdCBGSUxMRVJfQ1NTID0gY3NzKHtcbiAgZmxleDogMVxufSk7XG5cbmNvbnN0IExJU1RfQ1NTID0gY3NzKHtcbiAgbGlzdFN0eWxlVHlwZTogJ25vbmUnLFxuXG4gICcmID4gbGkuaGlkZS10aW1lc3RhbXAgLnRyYW5zY3JpcHQtdGltZXN0YW1wJzoge1xuICAgIGRpc3BsYXk6ICdub25lJ1xuICB9XG59KTtcblxuY29uc3QgREVGQVVMVF9HUk9VUF9USU1FU1RBTVAgPSAzMDAwMDA7IC8vIDUgbWludXRlc1xuXG5mdW5jdGlvbiBzYW1lVGltZXN0YW1wR3JvdXAoYWN0aXZpdHlYLCBhY3Rpdml0eVksIGdyb3VwVGltZXN0YW1wKSB7XG4gIGlmIChncm91cFRpbWVzdGFtcCA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIGlmIChhY3Rpdml0eVggJiYgYWN0aXZpdHlZKSB7XG4gICAgZ3JvdXBUaW1lc3RhbXAgPSB0eXBlb2YgZ3JvdXBUaW1lc3RhbXAgPT09ICdudW1iZXInID8gZ3JvdXBUaW1lc3RhbXAgOiBERUZBVUxUX0dST1VQX1RJTUVTVEFNUDtcblxuICAgIGlmIChhY3Rpdml0eVguZnJvbS5yb2xlID09PSBhY3Rpdml0eVkuZnJvbS5yb2xlKSB7XG4gICAgICBjb25zdCB0aW1lWCA9IG5ldyBEYXRlKGFjdGl2aXR5WC50aW1lc3RhbXApLmdldFRpbWUoKTtcbiAgICAgIGNvbnN0IHRpbWVZID0gbmV3IERhdGUoYWN0aXZpdHlZLnRpbWVzdGFtcCkuZ2V0VGltZSgpO1xuXG4gICAgICByZXR1cm4gTWF0aC5hYnModGltZVggLSB0aW1lWSkgPD0gZ3JvdXBUaW1lc3RhbXA7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5jb25zdCBCYXNpY1RyYW5zY3JpcHQgPSAoe1xuICBhY3Rpdml0eVJlbmRlcmVyLFxuICBhY3Rpdml0aWVzLFxuICBhdHRhY2htZW50UmVuZGVyZXIsXG4gIGNsYXNzTmFtZSxcbiAgZ3JvdXBUaW1lc3RhbXAsXG4gIHN0eWxlU2V0LFxuICB3ZWJTcGVlY2hQb255ZmlsbFxufSkgPT4ge1xuICBjb25zdCB7IHNwZWVjaFN5bnRoZXNpcywgU3BlZWNoU3ludGhlc2lzVXR0ZXJhbmNlIH0gPSB3ZWJTcGVlY2hQb255ZmlsbCB8fCB7fTtcblxuICAvLyBXZSB1c2UgMi1wYXNzIGFwcHJvYWNoIGZvciByZW5kZXJpbmcgYWN0aXZpdGllcywgZm9yIHNob3cvaGlkZSB0aW1lc3RhbXAgZ3JvdXBpbmcuXG4gIC8vIFVudGlsIHRoZSBhY3Rpdml0eSBwYXNzIHRocnUgbWlkZGxld2FyZSwgd2UgbmV2ZXIga25vdyBpZiBpdCBpcyBnb2luZyB0byBzaG93IHVwLlxuICAvLyBBZnRlciB3ZSBrbm93IHdoaWNoIGFjdGl2aXRpZXMgd2lsbCBzaG93IHVwLCB3ZSBjYW4gY29tcHV0ZSB3aGljaCBhY3Rpdml0eSB3aWxsIHNob3cgdGltZXN0YW1wcy5cbiAgLy8gSWYgdGhlIGFjdGl2aXR5IGRvZXMgbm90IHJlbmRlciwgaXQgd2lsbCBub3QgYmUgc3Bva2VuIGlmIHRleHQtdG8tc3BlZWNoIGlzIGVuYWJsZWQuXG4gIGNvbnN0IGFjdGl2aXR5RWxlbWVudHMgPSBhY3Rpdml0aWVzLnJlZHVjZSgoYWN0aXZpdHlFbGVtZW50cywgYWN0aXZpdHkpID0+IHtcbiAgICBjb25zdCBlbGVtZW50ID0gYWN0aXZpdHlSZW5kZXJlcih7XG4gICAgICBhY3Rpdml0eSxcbiAgICAgIHRpbWVzdGFtcENsYXNzTmFtZTogJ3RyYW5zY3JpcHQtdGltZXN0YW1wJ1xuICAgIH0pKCh7IGF0dGFjaG1lbnQgfSkgPT4gYXR0YWNobWVudFJlbmRlcmVyKHsgYWN0aXZpdHksIGF0dGFjaG1lbnQgfSkpO1xuXG4gICAgZWxlbWVudCAmJlxuICAgICAgYWN0aXZpdHlFbGVtZW50cy5wdXNoKHtcbiAgICAgICAgYWN0aXZpdHksXG4gICAgICAgIGVsZW1lbnRcbiAgICAgIH0pO1xuXG4gICAgcmV0dXJuIGFjdGl2aXR5RWxlbWVudHM7XG4gIH0sIFtdKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc05hbWVzKFJPT1RfQ1NTICsgJycsIGNsYXNzTmFtZSArICcnKX0gcm9sZT1cImxvZ1wiPlxuICAgICAgPFNjcm9sbFRvQm90dG9tUGFuZWwgY2xhc3NOYW1lPXtQQU5FTF9DU1MgKyAnJ30+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtGSUxMRVJfQ1NTfSAvPlxuICAgICAgICA8U2F5Q29tcG9zZXIgc3BlZWNoU3ludGhlc2lzPXtzcGVlY2hTeW50aGVzaXN9IHNwZWVjaFN5bnRoZXNpc1V0dGVyYW5jZT17U3BlZWNoU3ludGhlc2lzVXR0ZXJhbmNlfT5cbiAgICAgICAgICA8dWxcbiAgICAgICAgICAgIGFyaWEtYXRvbWljPVwiZmFsc2VcIlxuICAgICAgICAgICAgYXJpYS1saXZlPVwicG9saXRlXCJcbiAgICAgICAgICAgIGFyaWEtcmVsZXZhbnQ9XCJhZGRpdGlvbnMgdGV4dFwiXG4gICAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZXMoTElTVF9DU1MgKyAnJywgc3R5bGVTZXQuYWN0aXZpdGllcyArICcnKX1cbiAgICAgICAgICAgIHJvbGU9XCJsaXN0XCJcbiAgICAgICAgICA+XG4gICAgICAgICAgICB7YWN0aXZpdHlFbGVtZW50cy5tYXAoKHsgYWN0aXZpdHksIGVsZW1lbnQgfSwgaW5kZXgpID0+IChcbiAgICAgICAgICAgICAgPGxpXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWVzKHN0eWxlU2V0LmFjdGl2aXR5ICsgJycsIHtcbiAgICAgICAgICAgICAgICAgIC8vIEhpZGUgdGltZXN0YW1wIGlmIHNhbWUgdGltZXN0YW1wIGdyb3VwIHdpdGggdGhlIG5leHQgYWN0aXZpdHlcbiAgICAgICAgICAgICAgICAgICdoaWRlLXRpbWVzdGFtcCc6IHNhbWVUaW1lc3RhbXBHcm91cChcbiAgICAgICAgICAgICAgICAgICAgYWN0aXZpdHksXG4gICAgICAgICAgICAgICAgICAgIChhY3Rpdml0eUVsZW1lbnRzW2luZGV4ICsgMV0gfHwge30pLmFjdGl2aXR5LFxuICAgICAgICAgICAgICAgICAgICBncm91cFRpbWVzdGFtcFxuICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgICAgIGtleT17KGFjdGl2aXR5LmNoYW5uZWxEYXRhICYmIGFjdGl2aXR5LmNoYW5uZWxEYXRhLmNsaWVudEFjdGl2aXR5SUQpIHx8IGFjdGl2aXR5LmlkIHx8IGluZGV4fVxuICAgICAgICAgICAgICAgIHJvbGU9XCJsaXN0aXRlbVwiXG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICB7ZWxlbWVudH1cbiAgICAgICAgICAgICAgICB7Ly8gVE9ETzogW1AyXSBXZSBzaG91bGQgdXNlIGNvcmUvZGVmaW5pdGlvbnMvc3BlYWtpbmdBY3Rpdml0eSBmb3IgdGhpcyBwcmVkaWNhdGUgaW5zdGVhZFxuICAgICAgICAgICAgICAgIGFjdGl2aXR5LmNoYW5uZWxEYXRhICYmIGFjdGl2aXR5LmNoYW5uZWxEYXRhLnNwZWFrICYmIDxTcGVha0FjdGl2aXR5IGFjdGl2aXR5PXthY3Rpdml0eX0gLz59XG4gICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICApKX1cbiAgICAgICAgICA8L3VsPlxuICAgICAgICA8L1NheUNvbXBvc2VyPlxuICAgICAgPC9TY3JvbGxUb0JvdHRvbVBhbmVsPlxuICAgICAgPFNjcm9sbFRvRW5kQnV0dG9uIC8+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5CYXNpY1RyYW5zY3JpcHQuZGVmYXVsdFByb3BzID0ge1xuICBjbGFzc05hbWU6ICcnLFxuICBncm91cFRpbWVzdGFtcDogdHJ1ZSxcbiAgd2ViU3BlZWNoUG9ueWZpbGw6IHVuZGVmaW5lZFxufTtcblxuQmFzaWNUcmFuc2NyaXB0LnByb3BUeXBlcyA9IHtcbiAgYWN0aXZpdGllczogUHJvcFR5cGVzLmFycmF5LmlzUmVxdWlyZWQsXG4gIGFjdGl2aXR5UmVuZGVyZXI6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIGF0dGFjaG1lbnRSZW5kZXJlcjogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBncm91cFRpbWVzdGFtcDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCwgUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkXSksXG4gIHN0eWxlU2V0OiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGFjdGl2aXRpZXM6IFByb3BUeXBlcy5hbnkuaXNSZXF1aXJlZCxcbiAgICBhY3Rpdml0eTogUHJvcFR5cGVzLmFueS5pc1JlcXVpcmVkXG4gIH0pLmlzUmVxdWlyZWQsXG4gIHdlYlNwZWVjaFBvbnlmaWxsOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIHNwZWVjaFN5bnRoZXNpczogUHJvcFR5cGVzLmFueS5pc1JlcXVpcmVkLFxuICAgIFNwZWVjaFN5bnRoZXNpc1V0dGVyYW5jZTogUHJvcFR5cGVzLmFueS5pc1JlcXVpcmVkXG4gIH0pXG59O1xuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0VG9XZWJDaGF0KFxuICAoeyBhY3Rpdml0aWVzLCBhY3Rpdml0eVJlbmRlcmVyLCBhdHRhY2htZW50UmVuZGVyZXIsIGdyb3VwVGltZXN0YW1wLCBzdHlsZVNldCwgd2ViU3BlZWNoUG9ueWZpbGwgfSkgPT4gKHtcbiAgICBhY3Rpdml0aWVzLFxuICAgIGFjdGl2aXR5UmVuZGVyZXIsXG4gICAgYXR0YWNobWVudFJlbmRlcmVyLFxuICAgIGdyb3VwVGltZXN0YW1wLFxuICAgIHN0eWxlU2V0LFxuICAgIHdlYlNwZWVjaFBvbnlmaWxsXG4gIH0pXG4pKEJhc2ljVHJhbnNjcmlwdCk7XG4iXX0=