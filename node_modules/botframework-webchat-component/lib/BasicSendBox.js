"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _botframeworkWebchatCore = require("botframework-webchat-core");

var _glamor = require("glamor");

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _ConnectivityStatus = _interopRequireDefault(require("./SendBox/ConnectivityStatus"));

var _connectToWebChat = _interopRequireDefault(require("./connectToWebChat"));

var _DictationInterims = _interopRequireDefault(require("./SendBox/DictationInterims"));

var _MicrophoneButton = _interopRequireDefault(require("./SendBox/MicrophoneButton"));

var _SendButton = _interopRequireDefault(require("./SendBox/SendButton"));

var _SuggestedActions = _interopRequireDefault(require("./SendBox/SuggestedActions"));

var _TextBox = _interopRequireDefault(require("./SendBox/TextBox"));

var _UploadButton = _interopRequireDefault(require("./SendBox/UploadButton"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _Constants$DictateSta = _botframeworkWebchatCore.Constants.DictateState,
    DICTATING = _Constants$DictateSta.DICTATING,
    STARTING = _Constants$DictateSta.STARTING;
var ROOT_CSS = (0, _glamor.css)({
  '& > .main': {
    display: 'flex'
  }
});
var DICTATION_INTERIMS_CSS = (0, _glamor.css)({
  flex: 10000
});
var MICROPHONE_BUTTON_CSS = (0, _glamor.css)({
  flex: 1
});
var TEXT_BOX_CSS = (0, _glamor.css)({
  flex: 10000
});

var BasicSendBox = function BasicSendBox(_ref) {
  var className = _ref.className,
      dictationStarted = _ref.dictationStarted,
      styleSet = _ref.styleSet,
      webSpeechPonyfill = _ref.webSpeechPonyfill;
  return _react.default.createElement("div", {
    className: (0, _classnames.default)(styleSet.sendBox + '', ROOT_CSS + '', className + ''),
    role: "form"
  }, _react.default.createElement(_ConnectivityStatus.default, null), _react.default.createElement(_SuggestedActions.default, null), _react.default.createElement("div", {
    className: "main"
  }, !styleSet.options.hideUploadButton && _react.default.createElement(_UploadButton.default, null), dictationStarted ? _react.default.createElement(_DictationInterims.default, {
    className: DICTATION_INTERIMS_CSS + ''
  }) : _react.default.createElement(_TextBox.default, {
    className: TEXT_BOX_CSS + ''
  }), _react.default.createElement("div", null, (webSpeechPonyfill || {}).SpeechRecognition ? _react.default.createElement(_MicrophoneButton.default, {
    className: MICROPHONE_BUTTON_CSS + ''
  }) : _react.default.createElement(_SendButton.default, null))));
};

BasicSendBox.defaultProps = {
  className: '',
  webSpeechPonyfill: undefined
};
BasicSendBox.propTypes = {
  className: _propTypes.default.string,
  dictationStarted: _propTypes.default.bool.isRequired,
  styleSet: _propTypes.default.shape({
    sendBox: _propTypes.default.any.isRequired
  }).isRequired,
  webSpeechPonyfill: _propTypes.default.shape({
    SpeechRecognition: _propTypes.default.any
  })
}; // TODO: [P3] We should consider exposing core/src/definitions and use it instead

function activityIsSpeakingOrQueuedToSpeak(_ref2) {
  var _ref2$channelData = _ref2.channelData;
  _ref2$channelData = _ref2$channelData === void 0 ? {} : _ref2$channelData;
  var speak = _ref2$channelData.speak;
  return !!speak;
}

var _default = (0, _connectToWebChat.default)(function (_ref3) {
  var activities = _ref3.activities,
      dictateState = _ref3.dictateState,
      styleSet = _ref3.styleSet,
      webSpeechPonyfill = _ref3.webSpeechPonyfill;
  return {
    dictationStarted: (dictateState === STARTING || dictateState === DICTATING) && !activities.filter(activityIsSpeakingOrQueuedToSpeak).length,
    styleSet: styleSet,
    webSpeechPonyfill: webSpeechPonyfill
  };
})(BasicSendBox);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9CYXNpY1NlbmRCb3guanMiXSwibmFtZXMiOlsiQ29uc3RhbnRzIiwiRGljdGF0ZVN0YXRlIiwiRElDVEFUSU5HIiwiU1RBUlRJTkciLCJST09UX0NTUyIsImRpc3BsYXkiLCJESUNUQVRJT05fSU5URVJJTVNfQ1NTIiwiZmxleCIsIk1JQ1JPUEhPTkVfQlVUVE9OX0NTUyIsIlRFWFRfQk9YX0NTUyIsIkJhc2ljU2VuZEJveCIsImNsYXNzTmFtZSIsImRpY3RhdGlvblN0YXJ0ZWQiLCJzdHlsZVNldCIsIndlYlNwZWVjaFBvbnlmaWxsIiwic2VuZEJveCIsIm9wdGlvbnMiLCJoaWRlVXBsb2FkQnV0dG9uIiwiU3BlZWNoUmVjb2duaXRpb24iLCJkZWZhdWx0UHJvcHMiLCJ1bmRlZmluZWQiLCJwcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJzdHJpbmciLCJib29sIiwiaXNSZXF1aXJlZCIsInNoYXBlIiwiYW55IiwiYWN0aXZpdHlJc1NwZWFraW5nT3JRdWV1ZWRUb1NwZWFrIiwiY2hhbm5lbERhdGEiLCJzcGVhayIsImFjdGl2aXRpZXMiLCJkaWN0YXRlU3RhdGUiLCJmaWx0ZXIiLCJsZW5ndGgiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7Ozs0QkFJSUEsa0MsQ0FERkMsWTtJQUFnQkMsUyx5QkFBQUEsUztJQUFXQyxRLHlCQUFBQSxRO0FBRzdCLElBQU1DLFFBQVEsR0FBRyxpQkFBSTtBQUNuQixlQUFhO0FBQ1hDLElBQUFBLE9BQU8sRUFBRTtBQURFO0FBRE0sQ0FBSixDQUFqQjtBQU1BLElBQU1DLHNCQUFzQixHQUFHLGlCQUFJO0FBQUVDLEVBQUFBLElBQUksRUFBRTtBQUFSLENBQUosQ0FBL0I7QUFDQSxJQUFNQyxxQkFBcUIsR0FBRyxpQkFBSTtBQUFFRCxFQUFBQSxJQUFJLEVBQUU7QUFBUixDQUFKLENBQTlCO0FBQ0EsSUFBTUUsWUFBWSxHQUFHLGlCQUFJO0FBQUVGLEVBQUFBLElBQUksRUFBRTtBQUFSLENBQUosQ0FBckI7O0FBRUEsSUFBTUcsWUFBWSxHQUFHLFNBQWZBLFlBQWU7QUFBQSxNQUFHQyxTQUFILFFBQUdBLFNBQUg7QUFBQSxNQUFjQyxnQkFBZCxRQUFjQSxnQkFBZDtBQUFBLE1BQWdDQyxRQUFoQyxRQUFnQ0EsUUFBaEM7QUFBQSxNQUEwQ0MsaUJBQTFDLFFBQTBDQSxpQkFBMUM7QUFBQSxTQUNuQjtBQUFLLElBQUEsU0FBUyxFQUFFLHlCQUFXRCxRQUFRLENBQUNFLE9BQVQsR0FBbUIsRUFBOUIsRUFBa0NYLFFBQVEsR0FBRyxFQUE3QyxFQUFpRE8sU0FBUyxHQUFHLEVBQTdELENBQWhCO0FBQWtGLElBQUEsSUFBSSxFQUFDO0FBQXZGLEtBQ0UsNkJBQUMsMkJBQUQsT0FERixFQUVFLDZCQUFDLHlCQUFELE9BRkYsRUFHRTtBQUFLLElBQUEsU0FBUyxFQUFDO0FBQWYsS0FDRyxDQUFDRSxRQUFRLENBQUNHLE9BQVQsQ0FBaUJDLGdCQUFsQixJQUFzQyw2QkFBQyxxQkFBRCxPQUR6QyxFQUVHTCxnQkFBZ0IsR0FDZiw2QkFBQywwQkFBRDtBQUFtQixJQUFBLFNBQVMsRUFBRU4sc0JBQXNCLEdBQUc7QUFBdkQsSUFEZSxHQUdmLDZCQUFDLGdCQUFEO0FBQVMsSUFBQSxTQUFTLEVBQUVHLFlBQVksR0FBRztBQUFuQyxJQUxKLEVBT0UsMENBQ0csQ0FBQ0ssaUJBQWlCLElBQUksRUFBdEIsRUFBMEJJLGlCQUExQixHQUNDLDZCQUFDLHlCQUFEO0FBQWtCLElBQUEsU0FBUyxFQUFFVixxQkFBcUIsR0FBRztBQUFyRCxJQURELEdBR0MsNkJBQUMsbUJBQUQsT0FKSixDQVBGLENBSEYsQ0FEbUI7QUFBQSxDQUFyQjs7QUFzQkFFLFlBQVksQ0FBQ1MsWUFBYixHQUE0QjtBQUMxQlIsRUFBQUEsU0FBUyxFQUFFLEVBRGU7QUFFMUJHLEVBQUFBLGlCQUFpQixFQUFFTTtBQUZPLENBQTVCO0FBS0FWLFlBQVksQ0FBQ1csU0FBYixHQUF5QjtBQUN2QlYsRUFBQUEsU0FBUyxFQUFFVyxtQkFBVUMsTUFERTtBQUV2QlgsRUFBQUEsZ0JBQWdCLEVBQUVVLG1CQUFVRSxJQUFWLENBQWVDLFVBRlY7QUFHdkJaLEVBQUFBLFFBQVEsRUFBRVMsbUJBQVVJLEtBQVYsQ0FBZ0I7QUFDeEJYLElBQUFBLE9BQU8sRUFBRU8sbUJBQVVLLEdBQVYsQ0FBY0Y7QUFEQyxHQUFoQixFQUVQQSxVQUxvQjtBQU12QlgsRUFBQUEsaUJBQWlCLEVBQUVRLG1CQUFVSSxLQUFWLENBQWdCO0FBQ2pDUixJQUFBQSxpQkFBaUIsRUFBRUksbUJBQVVLO0FBREksR0FBaEI7QUFOSSxDQUF6QixDLENBV0E7O0FBQ0EsU0FBU0MsaUNBQVQsUUFBNEU7QUFBQSxnQ0FBL0JDLFdBQStCO0FBQUEscURBQU4sRUFBTTtBQUFBLE1BQWhCQyxLQUFnQixxQkFBaEJBLEtBQWdCO0FBQzFFLFNBQU8sQ0FBQyxDQUFDQSxLQUFUO0FBQ0Q7O2VBRWMsK0JBQWlCO0FBQUEsTUFBR0MsVUFBSCxTQUFHQSxVQUFIO0FBQUEsTUFBZUMsWUFBZixTQUFlQSxZQUFmO0FBQUEsTUFBNkJuQixRQUE3QixTQUE2QkEsUUFBN0I7QUFBQSxNQUF1Q0MsaUJBQXZDLFNBQXVDQSxpQkFBdkM7QUFBQSxTQUFnRTtBQUM5RkYsSUFBQUEsZ0JBQWdCLEVBQ2QsQ0FBQ29CLFlBQVksS0FBSzdCLFFBQWpCLElBQTZCNkIsWUFBWSxLQUFLOUIsU0FBL0MsS0FDQSxDQUFDNkIsVUFBVSxDQUFDRSxNQUFYLENBQWtCTCxpQ0FBbEIsRUFBcURNLE1BSHNDO0FBSTlGckIsSUFBQUEsUUFBUSxFQUFSQSxRQUo4RjtBQUs5RkMsSUFBQUEsaUJBQWlCLEVBQWpCQTtBQUw4RixHQUFoRTtBQUFBLENBQWpCLEVBTVhKLFlBTlcsQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbnN0YW50cyB9IGZyb20gJ2JvdGZyYW1ld29yay13ZWJjaGF0LWNvcmUnO1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnZ2xhbW9yJztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBDb25uZWN0aXZpdHlTdGF0dXMgZnJvbSAnLi9TZW5kQm94L0Nvbm5lY3Rpdml0eVN0YXR1cyc7XG5pbXBvcnQgY29ubmVjdFRvV2ViQ2hhdCBmcm9tICcuL2Nvbm5lY3RUb1dlYkNoYXQnO1xuaW1wb3J0IERpY3RhdGlvbkludGVyaW1zIGZyb20gJy4vU2VuZEJveC9EaWN0YXRpb25JbnRlcmltcyc7XG5pbXBvcnQgTWljcm9waG9uZUJ1dHRvbiBmcm9tICcuL1NlbmRCb3gvTWljcm9waG9uZUJ1dHRvbic7XG5pbXBvcnQgU2VuZEJ1dHRvbiBmcm9tICcuL1NlbmRCb3gvU2VuZEJ1dHRvbic7XG5pbXBvcnQgU3VnZ2VzdGVkQWN0aW9ucyBmcm9tICcuL1NlbmRCb3gvU3VnZ2VzdGVkQWN0aW9ucyc7XG5pbXBvcnQgVGV4dEJveCBmcm9tICcuL1NlbmRCb3gvVGV4dEJveCc7XG5pbXBvcnQgVXBsb2FkQnV0dG9uIGZyb20gJy4vU2VuZEJveC9VcGxvYWRCdXR0b24nO1xuXG5jb25zdCB7XG4gIERpY3RhdGVTdGF0ZTogeyBESUNUQVRJTkcsIFNUQVJUSU5HIH1cbn0gPSBDb25zdGFudHM7XG5cbmNvbnN0IFJPT1RfQ1NTID0gY3NzKHtcbiAgJyYgPiAubWFpbic6IHtcbiAgICBkaXNwbGF5OiAnZmxleCdcbiAgfVxufSk7XG5cbmNvbnN0IERJQ1RBVElPTl9JTlRFUklNU19DU1MgPSBjc3MoeyBmbGV4OiAxMDAwMCB9KTtcbmNvbnN0IE1JQ1JPUEhPTkVfQlVUVE9OX0NTUyA9IGNzcyh7IGZsZXg6IDEgfSk7XG5jb25zdCBURVhUX0JPWF9DU1MgPSBjc3MoeyBmbGV4OiAxMDAwMCB9KTtcblxuY29uc3QgQmFzaWNTZW5kQm94ID0gKHsgY2xhc3NOYW1lLCBkaWN0YXRpb25TdGFydGVkLCBzdHlsZVNldCwgd2ViU3BlZWNoUG9ueWZpbGwgfSkgPT4gKFxuICA8ZGl2IGNsYXNzTmFtZT17Y2xhc3NOYW1lcyhzdHlsZVNldC5zZW5kQm94ICsgJycsIFJPT1RfQ1NTICsgJycsIGNsYXNzTmFtZSArICcnKX0gcm9sZT1cImZvcm1cIj5cbiAgICA8Q29ubmVjdGl2aXR5U3RhdHVzIC8+XG4gICAgPFN1Z2dlc3RlZEFjdGlvbnMgLz5cbiAgICA8ZGl2IGNsYXNzTmFtZT1cIm1haW5cIj5cbiAgICAgIHshc3R5bGVTZXQub3B0aW9ucy5oaWRlVXBsb2FkQnV0dG9uICYmIDxVcGxvYWRCdXR0b24gLz59XG4gICAgICB7ZGljdGF0aW9uU3RhcnRlZCA/IChcbiAgICAgICAgPERpY3RhdGlvbkludGVyaW1zIGNsYXNzTmFtZT17RElDVEFUSU9OX0lOVEVSSU1TX0NTUyArICcnfSAvPlxuICAgICAgKSA6IChcbiAgICAgICAgPFRleHRCb3ggY2xhc3NOYW1lPXtURVhUX0JPWF9DU1MgKyAnJ30gLz5cbiAgICAgICl9XG4gICAgICA8ZGl2PlxuICAgICAgICB7KHdlYlNwZWVjaFBvbnlmaWxsIHx8IHt9KS5TcGVlY2hSZWNvZ25pdGlvbiA/IChcbiAgICAgICAgICA8TWljcm9waG9uZUJ1dHRvbiBjbGFzc05hbWU9e01JQ1JPUEhPTkVfQlVUVE9OX0NTUyArICcnfSAvPlxuICAgICAgICApIDogKFxuICAgICAgICAgIDxTZW5kQnV0dG9uIC8+XG4gICAgICAgICl9XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG4pO1xuXG5CYXNpY1NlbmRCb3guZGVmYXVsdFByb3BzID0ge1xuICBjbGFzc05hbWU6ICcnLFxuICB3ZWJTcGVlY2hQb255ZmlsbDogdW5kZWZpbmVkXG59O1xuXG5CYXNpY1NlbmRCb3gucHJvcFR5cGVzID0ge1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGRpY3RhdGlvblN0YXJ0ZWQ6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG4gIHN0eWxlU2V0OiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIHNlbmRCb3g6IFByb3BUeXBlcy5hbnkuaXNSZXF1aXJlZFxuICB9KS5pc1JlcXVpcmVkLFxuICB3ZWJTcGVlY2hQb255ZmlsbDogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBTcGVlY2hSZWNvZ25pdGlvbjogUHJvcFR5cGVzLmFueVxuICB9KVxufTtcblxuLy8gVE9ETzogW1AzXSBXZSBzaG91bGQgY29uc2lkZXIgZXhwb3NpbmcgY29yZS9zcmMvZGVmaW5pdGlvbnMgYW5kIHVzZSBpdCBpbnN0ZWFkXG5mdW5jdGlvbiBhY3Rpdml0eUlzU3BlYWtpbmdPclF1ZXVlZFRvU3BlYWsoeyBjaGFubmVsRGF0YTogeyBzcGVhayB9ID0ge30gfSkge1xuICByZXR1cm4gISFzcGVhaztcbn1cblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdFRvV2ViQ2hhdCgoeyBhY3Rpdml0aWVzLCBkaWN0YXRlU3RhdGUsIHN0eWxlU2V0LCB3ZWJTcGVlY2hQb255ZmlsbCB9KSA9PiAoe1xuICBkaWN0YXRpb25TdGFydGVkOlxuICAgIChkaWN0YXRlU3RhdGUgPT09IFNUQVJUSU5HIHx8IGRpY3RhdGVTdGF0ZSA9PT0gRElDVEFUSU5HKSAmJlxuICAgICFhY3Rpdml0aWVzLmZpbHRlcihhY3Rpdml0eUlzU3BlYWtpbmdPclF1ZXVlZFRvU3BlYWspLmxlbmd0aCxcbiAgc3R5bGVTZXQsXG4gIHdlYlNwZWVjaFBvbnlmaWxsXG59KSkoQmFzaWNTZW5kQm94KTtcbiJdfQ==