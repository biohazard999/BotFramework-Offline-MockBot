"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

/* eslint no-magic-numbers: ["error", {"ignore": [1, 5, 24, 48, 60000, 3600000] }] */
function xMinutesAgo(dateStr) {
  var date = new Date(dateStr);
  var dateTime = date.getTime();

  if (isNaN(dateTime)) {
    return dateStr;
  }

  var now = Date.now();
  var deltaInMs = now - dateTime;
  var deltaInMinutes = Math.floor(deltaInMs / 60000);
  var deltaInHours = Math.floor(deltaInMs / 3600000);

  if (deltaInMinutes < 1) {
    return 'Ahora';
  } else if (deltaInMinutes === 1) {
    return 'Hace un minuto';
  } else if (deltaInHours < 1) {
    return "Hace ".concat(deltaInMinutes, " minutos");
  } else if (deltaInHours === 1) {
    return "Hace una hora";
  } else if (deltaInHours < 5) {
    return "Hace ".concat(deltaInHours, " horas");
  } else if (deltaInHours <= 24) {
    return "Hoy";
  } else if (deltaInHours <= 48) {
    return "Ayer";
  } else if (window.Intl) {
    return new Intl.DateTimeFormat('es-ES').format(date);
  }

  return date.toLocaleString('es-ES', {
    day: '2-digit',
    hour: '2-digit',
    hour12: false,
    minute: '2-digit',
    month: '2-digit',
    year: 'numeric'
  });
}

function botSaidSomething(avatarInitials, text) {
  return "El Bot ".concat(avatarInitials, " dijo, ").concat(text);
}

function userSaidSomething(avatarInitials, text) {
  return "El usuario ".concat(avatarInitials, " dijo, ").concat(text);
}

var _default = {
  FAILED_CONNECTION_NOTIFICATION: 'Imposible conectar.',
  INITIAL_CONNECTION_NOTIFICATION: 'Conexión iniciada',
  INTERRUPTED_CONNECTION_NOTIFICATION: 'Conexión interrumpida…',
  RENDER_ERROR_NOTIFICATION: 'Error de visualización',
  // Do not localize {Retry}; it is a placeholder for "Retry". English translation should be, "Send failed. Retry."
  SEND_FAILED_KEY: "No enviado. {Retry}.",
  SLOW_CONNECTION_NOTIFICATION: 'Tomando más de lo usual para conectarse.',
  'Bot said something': botSaidSomething,
  'User said something': userSaidSomething,
  'X minutes ago': xMinutesAgo,
  'Adaptive Card parse error': 'Error interpretando la Tarjeta Adaptable',
  'Adaptive Card render error': 'Error desplegando la Tarjeta Adaptable',
  Chat: 'Chat',
  'Download file': 'Descargar archivo',
  'Microphone off': 'Apagar micrófono',
  'Microphone on': 'Encender micrófono',
  'New messages': 'Nuevos mensajes',
  Left: 'Izquierda',
  'Listening…': 'Escuchando…',
  Retry: 'Reintentar',
  Right: 'Derecha',
  Send: 'Enviar',
  Sending: 'Enviando',
  Speak: 'Hablar',
  'Starting…': 'Comenzando…',
  Tax: 'Impuesto',
  Total: 'Total',
  'Type your message': 'Escribe tu mensaje…',
  'Upload file': 'Subir archivo',
  VAT: 'IVA'
};
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9Mb2NhbGl6YXRpb24vZXMtRVMuanMiXSwibmFtZXMiOlsieE1pbnV0ZXNBZ28iLCJkYXRlU3RyIiwiZGF0ZSIsIkRhdGUiLCJkYXRlVGltZSIsImdldFRpbWUiLCJpc05hTiIsIm5vdyIsImRlbHRhSW5NcyIsImRlbHRhSW5NaW51dGVzIiwiTWF0aCIsImZsb29yIiwiZGVsdGFJbkhvdXJzIiwid2luZG93IiwiSW50bCIsIkRhdGVUaW1lRm9ybWF0IiwiZm9ybWF0IiwidG9Mb2NhbGVTdHJpbmciLCJkYXkiLCJob3VyIiwiaG91cjEyIiwibWludXRlIiwibW9udGgiLCJ5ZWFyIiwiYm90U2FpZFNvbWV0aGluZyIsImF2YXRhckluaXRpYWxzIiwidGV4dCIsInVzZXJTYWlkU29tZXRoaW5nIiwiRkFJTEVEX0NPTk5FQ1RJT05fTk9USUZJQ0FUSU9OIiwiSU5JVElBTF9DT05ORUNUSU9OX05PVElGSUNBVElPTiIsIklOVEVSUlVQVEVEX0NPTk5FQ1RJT05fTk9USUZJQ0FUSU9OIiwiUkVOREVSX0VSUk9SX05PVElGSUNBVElPTiIsIlNFTkRfRkFJTEVEX0tFWSIsIlNMT1dfQ09OTkVDVElPTl9OT1RJRklDQVRJT04iLCJDaGF0IiwiTGVmdCIsIlJldHJ5IiwiUmlnaHQiLCJTZW5kIiwiU2VuZGluZyIsIlNwZWFrIiwiVGF4IiwiVG90YWwiLCJWQVQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUVBLFNBQVNBLFdBQVQsQ0FBcUJDLE9BQXJCLEVBQThCO0FBQzVCLE1BQU1DLElBQUksR0FBRyxJQUFJQyxJQUFKLENBQVNGLE9BQVQsQ0FBYjtBQUNBLE1BQU1HLFFBQVEsR0FBR0YsSUFBSSxDQUFDRyxPQUFMLEVBQWpCOztBQUVBLE1BQUlDLEtBQUssQ0FBQ0YsUUFBRCxDQUFULEVBQXFCO0FBQ25CLFdBQU9ILE9BQVA7QUFDRDs7QUFFRCxNQUFNTSxHQUFHLEdBQUdKLElBQUksQ0FBQ0ksR0FBTCxFQUFaO0FBQ0EsTUFBTUMsU0FBUyxHQUFHRCxHQUFHLEdBQUdILFFBQXhCO0FBQ0EsTUFBTUssY0FBYyxHQUFHQyxJQUFJLENBQUNDLEtBQUwsQ0FBV0gsU0FBUyxHQUFHLEtBQXZCLENBQXZCO0FBQ0EsTUFBTUksWUFBWSxHQUFHRixJQUFJLENBQUNDLEtBQUwsQ0FBV0gsU0FBUyxHQUFHLE9BQXZCLENBQXJCOztBQUVBLE1BQUlDLGNBQWMsR0FBRyxDQUFyQixFQUF3QjtBQUN0QixXQUFPLE9BQVA7QUFDRCxHQUZELE1BRU8sSUFBSUEsY0FBYyxLQUFLLENBQXZCLEVBQTBCO0FBQy9CLFdBQU8sZ0JBQVA7QUFDRCxHQUZNLE1BRUEsSUFBSUcsWUFBWSxHQUFHLENBQW5CLEVBQXNCO0FBQzNCLDBCQUFlSCxjQUFmO0FBQ0QsR0FGTSxNQUVBLElBQUlHLFlBQVksS0FBSyxDQUFyQixFQUF3QjtBQUM3QjtBQUNELEdBRk0sTUFFQSxJQUFJQSxZQUFZLEdBQUcsQ0FBbkIsRUFBc0I7QUFDM0IsMEJBQWVBLFlBQWY7QUFDRCxHQUZNLE1BRUEsSUFBSUEsWUFBWSxJQUFJLEVBQXBCLEVBQXdCO0FBQzdCO0FBQ0QsR0FGTSxNQUVBLElBQUlBLFlBQVksSUFBSSxFQUFwQixFQUF3QjtBQUM3QjtBQUNELEdBRk0sTUFFQSxJQUFJQyxNQUFNLENBQUNDLElBQVgsRUFBaUI7QUFDdEIsV0FBTyxJQUFJQSxJQUFJLENBQUNDLGNBQVQsQ0FBd0IsT0FBeEIsRUFBaUNDLE1BQWpDLENBQXdDZCxJQUF4QyxDQUFQO0FBQ0Q7O0FBRUQsU0FBT0EsSUFBSSxDQUFDZSxjQUFMLENBQW9CLE9BQXBCLEVBQTZCO0FBQ2xDQyxJQUFBQSxHQUFHLEVBQUUsU0FENkI7QUFFbENDLElBQUFBLElBQUksRUFBRSxTQUY0QjtBQUdsQ0MsSUFBQUEsTUFBTSxFQUFFLEtBSDBCO0FBSWxDQyxJQUFBQSxNQUFNLEVBQUUsU0FKMEI7QUFLbENDLElBQUFBLEtBQUssRUFBRSxTQUwyQjtBQU1sQ0MsSUFBQUEsSUFBSSxFQUFFO0FBTjRCLEdBQTdCLENBQVA7QUFRRDs7QUFFRCxTQUFTQyxnQkFBVCxDQUEwQkMsY0FBMUIsRUFBMENDLElBQTFDLEVBQWdEO0FBQzlDLDBCQUFpQkQsY0FBakIsb0JBQXlDQyxJQUF6QztBQUNEOztBQUVELFNBQVNDLGlCQUFULENBQTJCRixjQUEzQixFQUEyQ0MsSUFBM0MsRUFBaUQ7QUFDL0MsOEJBQXFCRCxjQUFyQixvQkFBNkNDLElBQTdDO0FBQ0Q7O2VBRWM7QUFDYkUsRUFBQUEsOEJBQThCLEVBQUUscUJBRG5CO0FBRWJDLEVBQUFBLCtCQUErQixFQUFFLG1CQUZwQjtBQUdiQyxFQUFBQSxtQ0FBbUMsRUFBRSx3QkFIeEI7QUFJYkMsRUFBQUEseUJBQXlCLEVBQUUsd0JBSmQ7QUFLYjtBQUNBQyxFQUFBQSxlQUFlLHdCQU5GO0FBT2JDLEVBQUFBLDRCQUE0QixFQUFFLDBDQVBqQjtBQVFiLHdCQUFzQlQsZ0JBUlQ7QUFTYix5QkFBdUJHLGlCQVRWO0FBVWIsbUJBQWlCM0IsV0FWSjtBQVdiLCtCQUE2QiwwQ0FYaEI7QUFZYixnQ0FBOEIsd0NBWmpCO0FBYWJrQyxFQUFBQSxJQUFJLEVBQUUsTUFiTztBQWNiLG1CQUFpQixtQkFkSjtBQWViLG9CQUFrQixrQkFmTDtBQWdCYixtQkFBaUIsb0JBaEJKO0FBaUJiLGtCQUFnQixpQkFqQkg7QUFrQmJDLEVBQUFBLElBQUksRUFBRSxXQWxCTztBQW1CYixnQkFBYyxhQW5CRDtBQW9CYkMsRUFBQUEsS0FBSyxFQUFFLFlBcEJNO0FBcUJiQyxFQUFBQSxLQUFLLEVBQUUsU0FyQk07QUFzQmJDLEVBQUFBLElBQUksRUFBRSxRQXRCTztBQXVCYkMsRUFBQUEsT0FBTyxFQUFFLFVBdkJJO0FBd0JiQyxFQUFBQSxLQUFLLEVBQUUsUUF4Qk07QUF5QmIsZUFBYSxhQXpCQTtBQTBCYkMsRUFBQUEsR0FBRyxFQUFFLFVBMUJRO0FBMkJiQyxFQUFBQSxLQUFLLEVBQUUsT0EzQk07QUE0QmIsdUJBQXFCLHFCQTVCUjtBQTZCYixpQkFBZSxlQTdCRjtBQThCYkMsRUFBQUEsR0FBRyxFQUFFO0FBOUJRLEMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQgbm8tbWFnaWMtbnVtYmVyczogW1wiZXJyb3JcIiwge1wiaWdub3JlXCI6IFsxLCA1LCAyNCwgNDgsIDYwMDAwLCAzNjAwMDAwXSB9XSAqL1xuXG5mdW5jdGlvbiB4TWludXRlc0FnbyhkYXRlU3RyKSB7XG4gIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZShkYXRlU3RyKTtcbiAgY29uc3QgZGF0ZVRpbWUgPSBkYXRlLmdldFRpbWUoKTtcblxuICBpZiAoaXNOYU4oZGF0ZVRpbWUpKSB7XG4gICAgcmV0dXJuIGRhdGVTdHI7XG4gIH1cblxuICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xuICBjb25zdCBkZWx0YUluTXMgPSBub3cgLSBkYXRlVGltZTtcbiAgY29uc3QgZGVsdGFJbk1pbnV0ZXMgPSBNYXRoLmZsb29yKGRlbHRhSW5NcyAvIDYwMDAwKTtcbiAgY29uc3QgZGVsdGFJbkhvdXJzID0gTWF0aC5mbG9vcihkZWx0YUluTXMgLyAzNjAwMDAwKTtcblxuICBpZiAoZGVsdGFJbk1pbnV0ZXMgPCAxKSB7XG4gICAgcmV0dXJuICdBaG9yYSc7XG4gIH0gZWxzZSBpZiAoZGVsdGFJbk1pbnV0ZXMgPT09IDEpIHtcbiAgICByZXR1cm4gJ0hhY2UgdW4gbWludXRvJztcbiAgfSBlbHNlIGlmIChkZWx0YUluSG91cnMgPCAxKSB7XG4gICAgcmV0dXJuIGBIYWNlICR7ZGVsdGFJbk1pbnV0ZXN9IG1pbnV0b3NgO1xuICB9IGVsc2UgaWYgKGRlbHRhSW5Ib3VycyA9PT0gMSkge1xuICAgIHJldHVybiBgSGFjZSB1bmEgaG9yYWA7XG4gIH0gZWxzZSBpZiAoZGVsdGFJbkhvdXJzIDwgNSkge1xuICAgIHJldHVybiBgSGFjZSAke2RlbHRhSW5Ib3Vyc30gaG9yYXNgO1xuICB9IGVsc2UgaWYgKGRlbHRhSW5Ib3VycyA8PSAyNCkge1xuICAgIHJldHVybiBgSG95YDtcbiAgfSBlbHNlIGlmIChkZWx0YUluSG91cnMgPD0gNDgpIHtcbiAgICByZXR1cm4gYEF5ZXJgO1xuICB9IGVsc2UgaWYgKHdpbmRvdy5JbnRsKSB7XG4gICAgcmV0dXJuIG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KCdlcy1FUycpLmZvcm1hdChkYXRlKTtcbiAgfVxuXG4gIHJldHVybiBkYXRlLnRvTG9jYWxlU3RyaW5nKCdlcy1FUycsIHtcbiAgICBkYXk6ICcyLWRpZ2l0JyxcbiAgICBob3VyOiAnMi1kaWdpdCcsXG4gICAgaG91cjEyOiBmYWxzZSxcbiAgICBtaW51dGU6ICcyLWRpZ2l0JyxcbiAgICBtb250aDogJzItZGlnaXQnLFxuICAgIHllYXI6ICdudW1lcmljJ1xuICB9KTtcbn1cblxuZnVuY3Rpb24gYm90U2FpZFNvbWV0aGluZyhhdmF0YXJJbml0aWFscywgdGV4dCkge1xuICByZXR1cm4gYEVsIEJvdCAke2F2YXRhckluaXRpYWxzfSBkaWpvLCAke3RleHR9YDtcbn1cblxuZnVuY3Rpb24gdXNlclNhaWRTb21ldGhpbmcoYXZhdGFySW5pdGlhbHMsIHRleHQpIHtcbiAgcmV0dXJuIGBFbCB1c3VhcmlvICR7YXZhdGFySW5pdGlhbHN9IGRpam8sICR7dGV4dH1gO1xufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIEZBSUxFRF9DT05ORUNUSU9OX05PVElGSUNBVElPTjogJ0ltcG9zaWJsZSBjb25lY3Rhci4nLFxuICBJTklUSUFMX0NPTk5FQ1RJT05fTk9USUZJQ0FUSU9OOiAnQ29uZXhpw7NuIGluaWNpYWRhJyxcbiAgSU5URVJSVVBURURfQ09OTkVDVElPTl9OT1RJRklDQVRJT046ICdDb25leGnDs24gaW50ZXJydW1waWRh4oCmJyxcbiAgUkVOREVSX0VSUk9SX05PVElGSUNBVElPTjogJ0Vycm9yIGRlIHZpc3VhbGl6YWNpw7NuJyxcbiAgLy8gRG8gbm90IGxvY2FsaXplIHtSZXRyeX07IGl0IGlzIGEgcGxhY2Vob2xkZXIgZm9yIFwiUmV0cnlcIi4gRW5nbGlzaCB0cmFuc2xhdGlvbiBzaG91bGQgYmUsIFwiU2VuZCBmYWlsZWQuIFJldHJ5LlwiXG4gIFNFTkRfRkFJTEVEX0tFWTogYE5vIGVudmlhZG8uIHtSZXRyeX0uYCxcbiAgU0xPV19DT05ORUNUSU9OX05PVElGSUNBVElPTjogJ1RvbWFuZG8gbcOhcyBkZSBsbyB1c3VhbCBwYXJhIGNvbmVjdGFyc2UuJyxcbiAgJ0JvdCBzYWlkIHNvbWV0aGluZyc6IGJvdFNhaWRTb21ldGhpbmcsXG4gICdVc2VyIHNhaWQgc29tZXRoaW5nJzogdXNlclNhaWRTb21ldGhpbmcsXG4gICdYIG1pbnV0ZXMgYWdvJzogeE1pbnV0ZXNBZ28sXG4gICdBZGFwdGl2ZSBDYXJkIHBhcnNlIGVycm9yJzogJ0Vycm9yIGludGVycHJldGFuZG8gbGEgVGFyamV0YSBBZGFwdGFibGUnLFxuICAnQWRhcHRpdmUgQ2FyZCByZW5kZXIgZXJyb3InOiAnRXJyb3IgZGVzcGxlZ2FuZG8gbGEgVGFyamV0YSBBZGFwdGFibGUnLFxuICBDaGF0OiAnQ2hhdCcsXG4gICdEb3dubG9hZCBmaWxlJzogJ0Rlc2NhcmdhciBhcmNoaXZvJyxcbiAgJ01pY3JvcGhvbmUgb2ZmJzogJ0FwYWdhciBtaWNyw7Nmb25vJyxcbiAgJ01pY3JvcGhvbmUgb24nOiAnRW5jZW5kZXIgbWljcsOzZm9ubycsXG4gICdOZXcgbWVzc2FnZXMnOiAnTnVldm9zIG1lbnNhamVzJyxcbiAgTGVmdDogJ0l6cXVpZXJkYScsXG4gICdMaXN0ZW5pbmfigKYnOiAnRXNjdWNoYW5kb+KApicsXG4gIFJldHJ5OiAnUmVpbnRlbnRhcicsXG4gIFJpZ2h0OiAnRGVyZWNoYScsXG4gIFNlbmQ6ICdFbnZpYXInLFxuICBTZW5kaW5nOiAnRW52aWFuZG8nLFxuICBTcGVhazogJ0hhYmxhcicsXG4gICdTdGFydGluZ+KApic6ICdDb21lbnphbmRv4oCmJyxcbiAgVGF4OiAnSW1wdWVzdG8nLFxuICBUb3RhbDogJ1RvdGFsJyxcbiAgJ1R5cGUgeW91ciBtZXNzYWdlJzogJ0VzY3JpYmUgdHUgbWVuc2FqZeKApicsXG4gICdVcGxvYWQgZmlsZSc6ICdTdWJpciBhcmNoaXZvJyxcbiAgVkFUOiAnSVZBJ1xufTtcbiJdfQ==