"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

/* eslint no-magic-numbers: ["error", { "ignore": [1, 5, 24, 48, 60000, 3600000] }] */
function xMinutesAgo(dateStr) {
  var date = new Date(dateStr);
  var dateTime = date.getTime();

  if (isNaN(dateTime)) {
    return dateStr;
  }

  var now = Date.now();
  var deltaInMs = now - dateTime;
  var deltaInMinutes = Math.floor(deltaInMs / 60000);
  var deltaInHours = Math.floor(deltaInMs / 3600000);

  if (deltaInMinutes < 1) {
    return 'Şimdi';
  } else if (deltaInMinutes === 1) {
    return 'Bir dakika önce';
  } else if (deltaInHours < 1) {
    return "".concat(deltaInMinutes, " dakika \xF6nce");
  } else if (deltaInHours === 1) {
    return "Bir saat \xF6nce";
  } else if (deltaInHours < 5) {
    return "".concat(deltaInHours, " saat \xF6nce");
  } else if (deltaInHours <= 24) {
    return "Bug\xFCn";
  } else if (deltaInHours <= 48) {
    return "D\xFCn";
  } else if (window.Intl) {
    return new Intl.DateTimeFormat('tr-TR').format(date);
  }

  return date.toLocaleString('tr-TR', {
    day: '2-digit',
    hour: '2-digit',
    hour12: false,
    minute: '2-digit',
    month: '2-digit',
    year: 'numeric'
  });
}

var _default = {
  FAILED_CONNECTION_NOTIFICATION: 'Bağlanamadı.',
  INITIAL_CONNECTION_NOTIFICATION: 'Bağlanıyor…',
  INTERRUPTED_CONNECTION_NOTIFICATION: 'Ağ kesintisi meydana geldi. Yeniden bağlanıyor...',
  // Do not localize {Retry}; it is a placeholder for "Retry". English translation should be, "Send failed. Retry."
  SEND_FAILED_KEY: "g\xF6nderilemedi, {Retry}.",
  SLOW_CONNECTION_NOTIFICATION: 'Bağlantı hızı çok düşük.',
  Chat: 'Sohbet',
  'Download file': 'Dosyayı indir',
  'Microphone off': 'Mikrofon kapalı',
  'Microphone on': 'Mikrofon açık',
  'X minutes ago': xMinutesAgo,
  'Listening…': 'Dinliyor…',
  Retry: 'yeniden deneyin',
  Send: 'Gönder',
  Sending: 'gönderiliyor',
  // 'Speak': '',
  'Starting…': 'Başlıyor…',
  Tax: 'Vergi',
  Total: 'Toplam',
  'Type your message': 'İletinizi yazın',
  // 'Upload file': '',
  VAT: 'KDV'
};
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9Mb2NhbGl6YXRpb24vdHItVFIuanMiXSwibmFtZXMiOlsieE1pbnV0ZXNBZ28iLCJkYXRlU3RyIiwiZGF0ZSIsIkRhdGUiLCJkYXRlVGltZSIsImdldFRpbWUiLCJpc05hTiIsIm5vdyIsImRlbHRhSW5NcyIsImRlbHRhSW5NaW51dGVzIiwiTWF0aCIsImZsb29yIiwiZGVsdGFJbkhvdXJzIiwid2luZG93IiwiSW50bCIsIkRhdGVUaW1lRm9ybWF0IiwiZm9ybWF0IiwidG9Mb2NhbGVTdHJpbmciLCJkYXkiLCJob3VyIiwiaG91cjEyIiwibWludXRlIiwibW9udGgiLCJ5ZWFyIiwiRkFJTEVEX0NPTk5FQ1RJT05fTk9USUZJQ0FUSU9OIiwiSU5JVElBTF9DT05ORUNUSU9OX05PVElGSUNBVElPTiIsIklOVEVSUlVQVEVEX0NPTk5FQ1RJT05fTk9USUZJQ0FUSU9OIiwiU0VORF9GQUlMRURfS0VZIiwiU0xPV19DT05ORUNUSU9OX05PVElGSUNBVElPTiIsIkNoYXQiLCJSZXRyeSIsIlNlbmQiLCJTZW5kaW5nIiwiVGF4IiwiVG90YWwiLCJWQVQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUVBLFNBQVNBLFdBQVQsQ0FBcUJDLE9BQXJCLEVBQThCO0FBQzVCLE1BQU1DLElBQUksR0FBRyxJQUFJQyxJQUFKLENBQVNGLE9BQVQsQ0FBYjtBQUNBLE1BQU1HLFFBQVEsR0FBR0YsSUFBSSxDQUFDRyxPQUFMLEVBQWpCOztBQUVBLE1BQUlDLEtBQUssQ0FBQ0YsUUFBRCxDQUFULEVBQXFCO0FBQ25CLFdBQU9ILE9BQVA7QUFDRDs7QUFFRCxNQUFNTSxHQUFHLEdBQUdKLElBQUksQ0FBQ0ksR0FBTCxFQUFaO0FBQ0EsTUFBTUMsU0FBUyxHQUFHRCxHQUFHLEdBQUdILFFBQXhCO0FBQ0EsTUFBTUssY0FBYyxHQUFHQyxJQUFJLENBQUNDLEtBQUwsQ0FBV0gsU0FBUyxHQUFHLEtBQXZCLENBQXZCO0FBQ0EsTUFBTUksWUFBWSxHQUFHRixJQUFJLENBQUNDLEtBQUwsQ0FBV0gsU0FBUyxHQUFHLE9BQXZCLENBQXJCOztBQUVBLE1BQUlDLGNBQWMsR0FBRyxDQUFyQixFQUF3QjtBQUN0QixXQUFPLE9BQVA7QUFDRCxHQUZELE1BRU8sSUFBSUEsY0FBYyxLQUFLLENBQXZCLEVBQTBCO0FBQy9CLFdBQU8saUJBQVA7QUFDRCxHQUZNLE1BRUEsSUFBSUcsWUFBWSxHQUFHLENBQW5CLEVBQXNCO0FBQzNCLHFCQUFVSCxjQUFWO0FBQ0QsR0FGTSxNQUVBLElBQUlHLFlBQVksS0FBSyxDQUFyQixFQUF3QjtBQUM3QjtBQUNELEdBRk0sTUFFQSxJQUFJQSxZQUFZLEdBQUcsQ0FBbkIsRUFBc0I7QUFDM0IscUJBQVVBLFlBQVY7QUFDRCxHQUZNLE1BRUEsSUFBSUEsWUFBWSxJQUFJLEVBQXBCLEVBQXdCO0FBQzdCO0FBQ0QsR0FGTSxNQUVBLElBQUlBLFlBQVksSUFBSSxFQUFwQixFQUF3QjtBQUM3QjtBQUNELEdBRk0sTUFFQSxJQUFJQyxNQUFNLENBQUNDLElBQVgsRUFBaUI7QUFDdEIsV0FBTyxJQUFJQSxJQUFJLENBQUNDLGNBQVQsQ0FBd0IsT0FBeEIsRUFBaUNDLE1BQWpDLENBQXdDZCxJQUF4QyxDQUFQO0FBQ0Q7O0FBRUQsU0FBT0EsSUFBSSxDQUFDZSxjQUFMLENBQW9CLE9BQXBCLEVBQTZCO0FBQ2xDQyxJQUFBQSxHQUFHLEVBQUUsU0FENkI7QUFFbENDLElBQUFBLElBQUksRUFBRSxTQUY0QjtBQUdsQ0MsSUFBQUEsTUFBTSxFQUFFLEtBSDBCO0FBSWxDQyxJQUFBQSxNQUFNLEVBQUUsU0FKMEI7QUFLbENDLElBQUFBLEtBQUssRUFBRSxTQUwyQjtBQU1sQ0MsSUFBQUEsSUFBSSxFQUFFO0FBTjRCLEdBQTdCLENBQVA7QUFRRDs7ZUFFYztBQUNiQyxFQUFBQSw4QkFBOEIsRUFBRSxjQURuQjtBQUViQyxFQUFBQSwrQkFBK0IsRUFBRSxhQUZwQjtBQUdiQyxFQUFBQSxtQ0FBbUMsRUFBRSxtREFIeEI7QUFJYjtBQUNBQyxFQUFBQSxlQUFlLDhCQUxGO0FBTWJDLEVBQUFBLDRCQUE0QixFQUFFLDBCQU5qQjtBQU9iQyxFQUFBQSxJQUFJLEVBQUUsUUFQTztBQVFiLG1CQUFpQixlQVJKO0FBU2Isb0JBQWtCLGlCQVRMO0FBVWIsbUJBQWlCLGVBVko7QUFXYixtQkFBaUI3QixXQVhKO0FBWWIsZ0JBQWMsV0FaRDtBQWFiOEIsRUFBQUEsS0FBSyxFQUFFLGlCQWJNO0FBY2JDLEVBQUFBLElBQUksRUFBRSxRQWRPO0FBZWJDLEVBQUFBLE9BQU8sRUFBRSxjQWZJO0FBZ0JiO0FBQ0EsZUFBYSxXQWpCQTtBQWtCYkMsRUFBQUEsR0FBRyxFQUFFLE9BbEJRO0FBbUJiQyxFQUFBQSxLQUFLLEVBQUUsUUFuQk07QUFvQmIsdUJBQXFCLGlCQXBCUjtBQXFCYjtBQUNBQyxFQUFBQSxHQUFHLEVBQUU7QUF0QlEsQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludCBuby1tYWdpYy1udW1iZXJzOiBbXCJlcnJvclwiLCB7IFwiaWdub3JlXCI6IFsxLCA1LCAyNCwgNDgsIDYwMDAwLCAzNjAwMDAwXSB9XSAqL1xuXG5mdW5jdGlvbiB4TWludXRlc0FnbyhkYXRlU3RyKSB7XG4gIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZShkYXRlU3RyKTtcbiAgY29uc3QgZGF0ZVRpbWUgPSBkYXRlLmdldFRpbWUoKTtcblxuICBpZiAoaXNOYU4oZGF0ZVRpbWUpKSB7XG4gICAgcmV0dXJuIGRhdGVTdHI7XG4gIH1cblxuICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xuICBjb25zdCBkZWx0YUluTXMgPSBub3cgLSBkYXRlVGltZTtcbiAgY29uc3QgZGVsdGFJbk1pbnV0ZXMgPSBNYXRoLmZsb29yKGRlbHRhSW5NcyAvIDYwMDAwKTtcbiAgY29uc3QgZGVsdGFJbkhvdXJzID0gTWF0aC5mbG9vcihkZWx0YUluTXMgLyAzNjAwMDAwKTtcblxuICBpZiAoZGVsdGFJbk1pbnV0ZXMgPCAxKSB7XG4gICAgcmV0dXJuICfFnmltZGknO1xuICB9IGVsc2UgaWYgKGRlbHRhSW5NaW51dGVzID09PSAxKSB7XG4gICAgcmV0dXJuICdCaXIgZGFraWthIMO2bmNlJztcbiAgfSBlbHNlIGlmIChkZWx0YUluSG91cnMgPCAxKSB7XG4gICAgcmV0dXJuIGAke2RlbHRhSW5NaW51dGVzfSBkYWtpa2Egw7ZuY2VgO1xuICB9IGVsc2UgaWYgKGRlbHRhSW5Ib3VycyA9PT0gMSkge1xuICAgIHJldHVybiBgQmlyIHNhYXQgw7ZuY2VgO1xuICB9IGVsc2UgaWYgKGRlbHRhSW5Ib3VycyA8IDUpIHtcbiAgICByZXR1cm4gYCR7ZGVsdGFJbkhvdXJzfSBzYWF0IMO2bmNlYDtcbiAgfSBlbHNlIGlmIChkZWx0YUluSG91cnMgPD0gMjQpIHtcbiAgICByZXR1cm4gYEJ1Z8O8bmA7XG4gIH0gZWxzZSBpZiAoZGVsdGFJbkhvdXJzIDw9IDQ4KSB7XG4gICAgcmV0dXJuIGBEw7xuYDtcbiAgfSBlbHNlIGlmICh3aW5kb3cuSW50bCkge1xuICAgIHJldHVybiBuZXcgSW50bC5EYXRlVGltZUZvcm1hdCgndHItVFInKS5mb3JtYXQoZGF0ZSk7XG4gIH1cblxuICByZXR1cm4gZGF0ZS50b0xvY2FsZVN0cmluZygndHItVFInLCB7XG4gICAgZGF5OiAnMi1kaWdpdCcsXG4gICAgaG91cjogJzItZGlnaXQnLFxuICAgIGhvdXIxMjogZmFsc2UsXG4gICAgbWludXRlOiAnMi1kaWdpdCcsXG4gICAgbW9udGg6ICcyLWRpZ2l0JyxcbiAgICB5ZWFyOiAnbnVtZXJpYydcbiAgfSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgRkFJTEVEX0NPTk5FQ1RJT05fTk9USUZJQ0FUSU9OOiAnQmHEn2xhbmFtYWTEsS4nLFxuICBJTklUSUFMX0NPTk5FQ1RJT05fTk9USUZJQ0FUSU9OOiAnQmHEn2xhbsSxeW9y4oCmJyxcbiAgSU5URVJSVVBURURfQ09OTkVDVElPTl9OT1RJRklDQVRJT046ICdBxJ8ga2VzaW50aXNpIG1leWRhbmEgZ2VsZGkuIFllbmlkZW4gYmHEn2xhbsSxeW9yLi4uJyxcbiAgLy8gRG8gbm90IGxvY2FsaXplIHtSZXRyeX07IGl0IGlzIGEgcGxhY2Vob2xkZXIgZm9yIFwiUmV0cnlcIi4gRW5nbGlzaCB0cmFuc2xhdGlvbiBzaG91bGQgYmUsIFwiU2VuZCBmYWlsZWQuIFJldHJ5LlwiXG4gIFNFTkRfRkFJTEVEX0tFWTogYGfDtm5kZXJpbGVtZWRpLCB7UmV0cnl9LmAsXG4gIFNMT1dfQ09OTkVDVElPTl9OT1RJRklDQVRJT046ICdCYcSfbGFudMSxIGjEsXrEsSDDp29rIGTDvMWfw7xrLicsXG4gIENoYXQ6ICdTb2hiZXQnLFxuICAnRG93bmxvYWQgZmlsZSc6ICdEb3N5YXnEsSBpbmRpcicsXG4gICdNaWNyb3Bob25lIG9mZic6ICdNaWtyb2ZvbiBrYXBhbMSxJyxcbiAgJ01pY3JvcGhvbmUgb24nOiAnTWlrcm9mb24gYcOnxLFrJyxcbiAgJ1ggbWludXRlcyBhZ28nOiB4TWludXRlc0FnbyxcbiAgJ0xpc3RlbmluZ+KApic6ICdEaW5saXlvcuKApicsXG4gIFJldHJ5OiAneWVuaWRlbiBkZW5leWluJyxcbiAgU2VuZDogJ0fDtm5kZXInLFxuICBTZW5kaW5nOiAnZ8O2bmRlcmlsaXlvcicsXG4gIC8vICdTcGVhayc6ICcnLFxuICAnU3RhcnRpbmfigKYnOiAnQmHFn2zEsXlvcuKApicsXG4gIFRheDogJ1ZlcmdpJyxcbiAgVG90YWw6ICdUb3BsYW0nLFxuICAnVHlwZSB5b3VyIG1lc3NhZ2UnOiAnxLBsZXRpbml6aSB5YXrEsW4nLFxuICAvLyAnVXBsb2FkIGZpbGUnOiAnJyxcbiAgVkFUOiAnS0RWJ1xufTtcbiJdfQ==