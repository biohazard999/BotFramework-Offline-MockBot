"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

/* eslint no-magic-numbers: ["error", { "ignore": [1, 5, 24, 48, 60000, 3600000] }] */
function xMinutesAgo(dateStr) {
  var date = new Date(dateStr);
  var dateTime = date.getTime();

  if (isNaN(dateTime)) {
    return dateStr;
  }

  var now = Date.now();
  var deltaInMs = now - dateTime;
  var deltaInMinutes = Math.floor(deltaInMs / 60000);
  var deltaInHours = Math.floor(deltaInMs / 3600000);

  if (deltaInMinutes < 1) {
    return 'Just now';
  } else if (deltaInMinutes === 1) {
    return 'A minute ago';
  } else if (deltaInHours < 1) {
    return "".concat(deltaInMinutes, " minutes ago");
  } else if (deltaInHours === 1) {
    return "An hour ago";
  } else if (deltaInHours < 5) {
    return "".concat(deltaInHours, " hours ago");
  } else if (deltaInHours <= 24) {
    return "Today";
  } else if (deltaInHours <= 48) {
    return "Yesterday";
  } else if (window.Intl) {
    return new Intl.DateTimeFormat('en-US').format(date);
  }

  return date.toLocaleString('en-US', {
    day: '2-digit',
    hour: '2-digit',
    hour12: false,
    minute: '2-digit',
    month: '2-digit',
    year: 'numeric'
  });
}

function botSaidSomething(avatarInitials, text) {
  return "Bot ".concat(avatarInitials, " said, ").concat(text);
}

function userSaidSomething(avatarInitials, text) {
  return "User ".concat(avatarInitials, " said, ").concat(text);
}

var _default = {
  FAILED_CONNECTION_NOTIFICATION: 'Unable to connect.',
  INITIAL_CONNECTION_NOTIFICATION: 'Connecting…',
  INTERRUPTED_CONNECTION_NOTIFICATION: 'Network interruption occurred. Reconnecting…',
  RENDER_ERROR_NOTIFICATION: 'Render error. Please check the console or contact the bot developer.',
  // Do not localize {Retry}; it is a placeholder for "Retry". English translation should be, "Send failed. Retry."
  SEND_FAILED_KEY: "Send failed. {Retry}.",
  SLOW_CONNECTION_NOTIFICATION: 'Taking longer than usual to connect.',
  'Bot said something': botSaidSomething,
  'User said something': userSaidSomething,
  'X minutes ago': xMinutesAgo,
  // '[File of type '%1']': '[File of type '%1']",
  // '[Unknown Card '%1']': '[Unknown Card '%1']',
  'Adaptive Card parse error': 'Adaptive Card parse error',
  'Adaptive Card render error': 'Adaptive Card render error',
  Chat: 'Chat',
  'Download file': 'Download file',
  'Microphone off': 'Microphone off',
  'Microphone on': 'Microphone on',
  Left: 'Left',
  'Listening…': 'Listening…',
  'New messages': 'New messages',
  Retry: 'Retry',
  Right: 'Right',
  Send: 'Send',
  Sending: 'Sending',
  Speak: 'Speak',
  'Starting…': 'Starting…',
  Tax: 'Tax',
  Total: 'Total',
  'Type your message': 'Type your message',
  'Upload file': 'Upload file',
  VAT: 'VAT'
};
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9Mb2NhbGl6YXRpb24vZW4tVVMuanMiXSwibmFtZXMiOlsieE1pbnV0ZXNBZ28iLCJkYXRlU3RyIiwiZGF0ZSIsIkRhdGUiLCJkYXRlVGltZSIsImdldFRpbWUiLCJpc05hTiIsIm5vdyIsImRlbHRhSW5NcyIsImRlbHRhSW5NaW51dGVzIiwiTWF0aCIsImZsb29yIiwiZGVsdGFJbkhvdXJzIiwid2luZG93IiwiSW50bCIsIkRhdGVUaW1lRm9ybWF0IiwiZm9ybWF0IiwidG9Mb2NhbGVTdHJpbmciLCJkYXkiLCJob3VyIiwiaG91cjEyIiwibWludXRlIiwibW9udGgiLCJ5ZWFyIiwiYm90U2FpZFNvbWV0aGluZyIsImF2YXRhckluaXRpYWxzIiwidGV4dCIsInVzZXJTYWlkU29tZXRoaW5nIiwiRkFJTEVEX0NPTk5FQ1RJT05fTk9USUZJQ0FUSU9OIiwiSU5JVElBTF9DT05ORUNUSU9OX05PVElGSUNBVElPTiIsIklOVEVSUlVQVEVEX0NPTk5FQ1RJT05fTk9USUZJQ0FUSU9OIiwiUkVOREVSX0VSUk9SX05PVElGSUNBVElPTiIsIlNFTkRfRkFJTEVEX0tFWSIsIlNMT1dfQ09OTkVDVElPTl9OT1RJRklDQVRJT04iLCJDaGF0IiwiTGVmdCIsIlJldHJ5IiwiUmlnaHQiLCJTZW5kIiwiU2VuZGluZyIsIlNwZWFrIiwiVGF4IiwiVG90YWwiLCJWQVQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUVBLFNBQVNBLFdBQVQsQ0FBcUJDLE9BQXJCLEVBQThCO0FBQzVCLE1BQU1DLElBQUksR0FBRyxJQUFJQyxJQUFKLENBQVNGLE9BQVQsQ0FBYjtBQUNBLE1BQU1HLFFBQVEsR0FBR0YsSUFBSSxDQUFDRyxPQUFMLEVBQWpCOztBQUVBLE1BQUlDLEtBQUssQ0FBQ0YsUUFBRCxDQUFULEVBQXFCO0FBQ25CLFdBQU9ILE9BQVA7QUFDRDs7QUFFRCxNQUFNTSxHQUFHLEdBQUdKLElBQUksQ0FBQ0ksR0FBTCxFQUFaO0FBQ0EsTUFBTUMsU0FBUyxH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InNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludCBuby1tYWdpYy1udW1iZXJzOiBbXCJlcnJvclwiLCB7IFwiaWdub3JlXCI6IFsxLCA1LCAyNCwgNDgsIDYwMDAwLCAzNjAwMDAwXSB9XSAqL1xuXG5mdW5jdGlvbiB4TWludXRlc0FnbyhkYXRlU3RyKSB7XG4gIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZShkYXRlU3RyKTtcbiAgY29uc3QgZGF0ZVRpbWUgPSBkYXRlLmdldFRpbWUoKTtcblxuICBpZiAoaXNOYU4oZGF0ZVRpbWUpKSB7XG4gICAgcmV0dXJuIGRhdGVTdHI7XG4gIH1cblxuICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xuICBjb25zdCBkZWx0YUluTXMgPSBub3cgLSBkYXRlVGltZTtcbiAgY29uc3QgZGVsdGFJbk1pbnV0ZXMgPSBNYXRoLmZsb29yKGRlbHRhSW5NcyAvIDYwMDAwKTtcbiAgY29uc3QgZGVsdGFJbkhvdXJzID0gTWF0aC5mbG9vcihkZWx0YUluTXMgLyAzNjAwMDAwKTtcblxuICBpZiAoZGVsdGFJbk1pbnV0ZXMgPCAxKSB7XG4gICAgcmV0dXJuICdKdXN0IG5vdyc7XG4gIH0gZWxzZSBpZiAoZGVsdGFJbk1pbnV0ZXMgPT09IDEpIHtcbiAgICByZXR1cm4gJ0EgbWludXRlIGFnbyc7XG4gIH0gZWxzZSBpZiAoZGVsdGFJbkhvdXJzIDwgMSkge1xuICAgIHJldHVybiBgJHtkZWx0YUluTWludXRlc30gbWludXRlcyBhZ29gO1xuICB9IGVsc2UgaWYgKGRlbHRhSW5Ib3VycyA9PT0gMSkge1xuICAgIHJldHVybiBgQW4gaG91ciBhZ29gO1xuICB9IGVsc2UgaWYgKGRlbHRhSW5Ib3VycyA8IDUpIHtcbiAgICByZXR1cm4gYCR7ZGVsdGFJbkhvdXJzfSBob3VycyBhZ29gO1xuICB9IGVsc2UgaWYgKGRlbHRhSW5Ib3VycyA8PSAyNCkge1xuICAgIHJldHVybiBgVG9kYXlgO1xuICB9IGVsc2UgaWYgKGRlbHRhSW5Ib3VycyA8PSA0OCkge1xuICAgIHJldHVybiBgWWVzdGVyZGF5YDtcbiAgfSBlbHNlIGlmICh3aW5kb3cuSW50bCkge1xuICAgIHJldHVybiBuZXcgSW50bC5EYXRlVGltZUZvcm1hdCgnZW4tVVMnKS5mb3JtYXQoZGF0ZSk7XG4gIH1cblxuICByZXR1cm4gZGF0ZS50b0xvY2FsZVN0cmluZygnZW4tVVMnLCB7XG4gICAgZGF5OiAnMi1kaWdpdCcsXG4gICAgaG91cjogJzItZGlnaXQnLFxuICAgIGhvdXIxMjogZmFsc2UsXG4gICAgbWludXRlOiAnMi1kaWdpdCcsXG4gICAgbW9udGg6ICcyLWRpZ2l0JyxcbiAgICB5ZWFyOiAnbnVtZXJpYydcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGJvdFNhaWRTb21ldGhpbmcoYXZhdGFySW5pdGlhbHMsIHRleHQpIHtcbiAgcmV0dXJuIGBCb3QgJHthdmF0YXJJbml0aWFsc30gc2FpZCwgJHt0ZXh0fWA7XG59XG5cbmZ1bmN0aW9uIHVzZXJTYWlkU29tZXRoaW5nKGF2YXRhckluaXRpYWxzLCB0ZXh0KSB7XG4gIHJldHVybiBgVXNlciAke2F2YXRhckluaXRpYWxzfSBzYWlkLCAke3RleHR9YDtcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBGQUlMRURfQ09OTkVDVElPTl9OT1RJRklDQVRJT046ICdVbmFibGUgdG8gY29ubmVjdC4nLFxuICBJTklUSUFMX0NPTk5FQ1RJT05fTk9USUZJQ0FUSU9OOiAnQ29ubmVjdGluZ+KApicsXG4gIElOVEVSUlVQVEVEX0NPTk5FQ1RJT05fTk9USUZJQ0FUSU9OOiAnTmV0d29yayBpbnRlcnJ1cHRpb24gb2NjdXJyZWQuIFJlY29ubmVjdGluZ+KApicsXG4gIFJFTkRFUl9FUlJPUl9OT1RJRklDQVRJT046ICdSZW5kZXIgZXJyb3IuIFBsZWFzZSBjaGVjayB0aGUgY29uc29sZSBvciBjb250YWN0IHRoZSBib3QgZGV2ZWxvcGVyLicsXG4gIC8vIERvIG5vdCBsb2NhbGl6ZSB7UmV0cnl9OyBpdCBpcyBhIHBsYWNlaG9sZGVyIGZvciBcIlJldHJ5XCIuIEVuZ2xpc2ggdHJhbnNsYXRpb24gc2hvdWxkIGJlLCBcIlNlbmQgZmFpbGVkLiBSZXRyeS5cIlxuICBTRU5EX0ZBSUxFRF9LRVk6IGBTZW5kIGZhaWxlZC4ge1JldHJ5fS5gLFxuICBTTE9XX0NPTk5FQ1RJT05fTk9USUZJQ0FUSU9OOiAnVGFraW5nIGxvbmdlciB0aGFuIHVzdWFsIHRvIGNvbm5lY3QuJyxcbiAgJ0JvdCBzYWlkIHNvbWV0aGluZyc6IGJvdFNhaWRTb21ldGhpbmcsXG4gICdVc2VyIHNhaWQgc29tZXRoaW5nJzogdXNlclNhaWRTb21ldGhpbmcsXG4gICdYIG1pbnV0ZXMgYWdvJzogeE1pbnV0ZXNBZ28sXG4gIC8vICdbRmlsZSBvZiB0eXBlICclMSddJzogJ1tGaWxlIG9mIHR5cGUgJyUxJ11cIixcbiAgLy8gJ1tVbmtub3duIENhcmQgJyUxJ10nOiAnW1Vua25vd24gQ2FyZCAnJTEnXScsXG4gICdBZGFwdGl2ZSBDYXJkIHBhcnNlIGVycm9yJzogJ0FkYXB0aXZlIENhcmQgcGFyc2UgZXJyb3InLFxuICAnQWRhcHRpdmUgQ2FyZCByZW5kZXIgZXJyb3InOiAnQWRhcHRpdmUgQ2FyZCByZW5kZXIgZXJyb3InLFxuICBDaGF0OiAnQ2hhdCcsXG4gICdEb3dubG9hZCBmaWxlJzogJ0Rvd25sb2FkIGZpbGUnLFxuICAnTWljcm9waG9uZSBvZmYnOiAnTWljcm9waG9uZSBvZmYnLFxuICAnTWljcm9waG9uZSBvbic6ICdNaWNyb3Bob25lIG9uJyxcbiAgTGVmdDogJ0xlZnQnLFxuICAnTGlzdGVuaW5n4oCmJzogJ0xpc3RlbmluZ+KApicsXG4gICdOZXcgbWVzc2FnZXMnOiAnTmV3IG1lc3NhZ2VzJyxcbiAgUmV0cnk6ICdSZXRyeScsXG4gIFJpZ2h0OiAnUmlnaHQnLFxuICBTZW5kOiAnU2VuZCcsXG4gIFNlbmRpbmc6ICdTZW5kaW5nJyxcbiAgU3BlYWs6ICdTcGVhaycsXG4gICdTdGFydGluZ+KApic6ICdTdGFydGluZ+KApicsXG4gIFRheDogJ1RheCcsXG4gIFRvdGFsOiAnVG90YWwnLFxuICAnVHlwZSB5b3VyIG1lc3NhZ2UnOiAnVHlwZSB5b3VyIG1lc3NhZ2UnLFxuICAnVXBsb2FkIGZpbGUnOiAnVXBsb2FkIGZpbGUnLFxuICBWQVQ6ICdWQVQnXG59O1xuIl19