"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = render;

var _markdownItForInline = _interopRequireDefault(require("markdown-it-for-inline"));

var _markdownIt = _interopRequireDefault(require("markdown-it"));

var _sanitizeHtml = _interopRequireDefault(require("sanitize-html"));

/* eslint no-magic-numbers: ["error", { "ignore": [1] }] */
var SANITIZE_HTML_OPTIONS = {
  allowedAttributes: {
    a: ['href', 'name', 'target', 'title'],
    img: ['alt', 'src']
  },
  allowedSchemes: ['data', 'http', 'https', 'ftp', 'mailto', 'sip'],
  allowedTags: ['a', 'b', 'blockquote', 'br', 'caption', 'code', 'div', 'em', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'hr', 'i', 'img', 'li', 'nl', 'ol', 'p', 'pre', 'span', 'strike', 'strong', 'table', 'tbody', 'td', 'tfoot', 'th', 'thead', 'tr', 'ul']
};
var customMarkdownIt = new _markdownIt.default({
  breaks: false,
  html: false,
  linkify: true,
  typographer: true,
  xhtmlOut: true
}).use(_markdownItForInline.default, 'url_new_win', 'link_open', function (tokens, index) {
  // TODO: [P4] This is copied from v3 and looks clunky
  //       We should refactor this code
  var targetAttrIndex = tokens[index].attrIndex('target');

  if (~targetAttrIndex) {
    tokens[index].attrs[targetAttrIndex][1] = '_blank';
  } else {
    tokens[index].attrPush(['target', '_blank']);
  }

  var relAttrIndex = tokens[index].attrIndex('rel');

  if (~relAttrIndex) {
    tokens[index].attrs[relAttrIndex][1] = 'noopener noreferrer';
  } else {
    tokens[index].attrPush(['target', 'noopener noreferrer']);
  }
});

function render(markdown, _ref) {
  var markdownRespectCRLF = _ref.markdownRespectCRLF;

  if (markdownRespectCRLF) {
    markdown = markdown.replace(/\n\r|\r\n/g, function (carriageReturn) {
      return carriageReturn === '\n\r' ? '\r\n' : '\n\r';
    });
  }

  var html = customMarkdownIt.render(markdown);
  return (0, _sanitizeHtml.default)(html, SANITIZE_HTML_OPTIONS);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9yZW5kZXJNYXJrZG93bi5qcyJdLCJuYW1lcyI6WyJTQU5JVElaRV9IVE1MX09QVElPTlMiLCJhbGxvd2VkQXR0cmlidXRlcyIsImEiLCJpbWciLCJhbGxvd2VkU2NoZW1lcyIsImFsbG93ZWRUYWdzIiwiY3VzdG9tTWFya2Rvd25JdCIsIk1hcmtkb3duSXQiLCJicmVha3MiLCJodG1sIiwibGlua2lmeSIsInR5cG9ncmFwaGVyIiwieGh0bWxPdXQiLCJ1c2UiLCJpdGVyYXRvciIsInRva2VucyIsImluZGV4IiwidGFyZ2V0QXR0ckluZGV4IiwiYXR0ckluZGV4IiwiYXR0cnMiLCJhdHRyUHVzaCIsInJlbEF0dHJJbmRleCIsInJlbmRlciIsIm1hcmtkb3duIiwibWFya2Rvd25SZXNwZWN0Q1JMRiIsInJlcGxhY2UiLCJjYXJyaWFnZVJldHVybiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBSkE7QUFNQSxJQUFNQSxxQkFBcUIsR0FBRztBQUM1QkMsRUFBQUEsaUJBQWlCLEVBQUU7QUFDakJDLElBQUFBLENBQUMsRUFBRSxDQUFDLE1BQUQsRUFBUyxNQUFULEVBQWlCLFFBQWpCLEVBQTJCLE9BQTNCLENBRGM7QUFFakJDLElBQUFBLEdBQUcsRUFBRSxDQUFDLEtBQUQsRUFBUSxLQUFSO0FBRlksR0FEUztBQUs1QkMsRUFBQUEsY0FBYyxFQUFFLENBQUMsTUFBRCxFQUFTLE1BQVQsRUFBaUIsT0FBakIsRUFBMEIsS0FBMUIsRUFBaUMsUUFBakMsRUFBMkMsS0FBM0MsQ0FMWTtBQU01QkMsRUFBQUEsV0FBVyxFQUFFLENBQ1gsR0FEVyxFQUVYLEdBRlcsRUFHWCxZQUhXLEVBSVgsSUFKVyxFQUtYLFNBTFcsRUFNWCxNQU5XLEVBT1gsS0FQVyxFQVFYLElBUlcsRUFTWCxJQVRXLEVBVVgsSUFWVyxFQVdYLElBWFcsRUFZWCxJQVpXLEVBYVgsSUFiVyxFQWNYLElBZFcsRUFlWCxJQWZXLEVBZ0JYLEdBaEJXLEVBaUJYLEtBakJXLEVBa0JYLElBbEJXLEVBbUJYLElBbkJXLEVBb0JYLElBcEJXLEVBcUJYLEdBckJXLEVBc0JYLEtBdEJXLEVBdUJYLE1BdkJXLEVBd0JYLFFBeEJXLEVBeUJYLFFBekJXLEVBMEJYLE9BMUJXLEVBMkJYLE9BM0JXLEVBNEJYLElBNUJXLEVBNkJYLE9BN0JXLEVBOEJYLElBOUJXLEVBK0JYLE9BL0JXLEVBZ0NYLElBaENXLEVBaUNYLElBakNXO0FBTmUsQ0FBOUI7QUEyQ0EsSUFBTUMsZ0JBQWdCLEdBQUcsSUFBSUMsbUJBQUosQ0FBZTtBQUN0Q0MsRUFBQUEsTUFBTSxFQUFFLEtBRDhCO0FBRXRDQyxFQUFBQSxJQUFJLEVBQUUsS0FGZ0M7QUFHdENDLEVBQUFBLE9BQU8sRUFBRSxJQUg2QjtBQUl0Q0MsRUFBQUEsV0FBVyxFQUFFLElBSnlCO0FBS3RDQyxFQUFBQSxRQUFRLEVBQUU7QUFMNEIsQ0FBZixFQU10QkMsR0FOc0IsQ0FNbEJDLDRCQU5rQixFQU1SLGFBTlEsRUFNTyxXQU5QLEVBTW9CLFVBQUNDLE1BQUQsRUFBU0MsS0FBVCxFQUFtQjtBQUM5RDtBQUNBO0FBQ0EsTUFBTUMsZUFBZSxHQUFHRixNQUFNLENBQUNDLEtBQUQsQ0FBTixDQUFjRSxTQUFkLENBQXdCLFFBQXhCLENBQXhCOztBQUVBLE1BQUksQ0FBQ0QsZUFBTCxFQUFzQjtBQUNwQkYsSUFBQUEsTUFBTSxDQUFDQyxLQUFELENBQU4sQ0FBY0csS0FBZCxDQUFvQkYsZUFBcEIsRUFBcUMsQ0FBckMsSUFBMEMsUUFBMUM7QUFDRCxHQUZELE1BRU87QUFDTEYsSUFBQUEsTUFBTSxDQUFDQyxLQUFELENBQU4sQ0FBY0ksUUFBZCxDQUF1QixDQUFDLFFBQUQsRUFBVyxRQUFYLENBQXZCO0FBQ0Q7O0FBRUQsTUFBTUMsWUFBWSxHQUFHTixNQUFNLENBQUNDLEtBQUQsQ0FBTixDQUFjRSxTQUFkLENBQXdCLEtBQXhCLENBQXJCOztBQUVBLE1BQUksQ0FBQ0csWUFBTCxFQUFtQjtBQUNqQk4sSUFBQUEsTUFBTSxDQUFDQyxLQUFELENBQU4sQ0FBY0csS0FBZCxDQUFvQkUsWUFBcEIsRUFBa0MsQ0FBbEMsSUFBdUMscUJBQXZDO0FBQ0QsR0FGRCxNQUVPO0FBQ0xOLElBQUFBLE1BQU0sQ0FBQ0MsS0FBRCxDQUFOLENBQWNJLFFBQWQsQ0FBdUIsQ0FBQyxRQUFELEVBQVcscUJBQVgsQ0FBdkI7QUFDRDtBQUNGLENBeEJ3QixDQUF6Qjs7QUEwQmUsU0FBU0UsTUFBVCxDQUFnQkMsUUFBaEIsUUFBbUQ7QUFBQSxNQUF2QkMsbUJBQXVCLFFBQXZCQSxtQkFBdUI7O0FBQ2hFLE1BQUlBLG1CQUFKLEVBQXlCO0FBQ3ZCRCxJQUFBQSxRQUFRLEdBQUdBLFFBQVEsQ0FBQ0UsT0FBVCxDQUFpQixZQUFqQixFQUFnQyxVQUFBQyxjQUFjO0FBQUEsYUFBS0EsY0FBYyxLQUFLLE1BQW5CLEdBQTRCLE1BQTVCLEdBQXFDLE1BQTFDO0FBQUEsS0FBOUMsQ0FBWDtBQUNEOztBQUNELE1BQU1qQixJQUFJLEdBQUdILGdCQUFnQixDQUFDZ0IsTUFBakIsQ0FBd0JDLFFBQXhCLENBQWI7QUFFQSxTQUFPLDJCQUFhZCxJQUFiLEVBQW1CVCxxQkFBbkIsQ0FBUDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50IG5vLW1hZ2ljLW51bWJlcnM6IFtcImVycm9yXCIsIHsgXCJpZ25vcmVcIjogWzFdIH1dICovXG5cbmltcG9ydCBpdGVyYXRvciBmcm9tICdtYXJrZG93bi1pdC1mb3ItaW5saW5lJztcbmltcG9ydCBNYXJrZG93bkl0IGZyb20gJ21hcmtkb3duLWl0JztcbmltcG9ydCBzYW5pdGl6ZUhUTUwgZnJvbSAnc2FuaXRpemUtaHRtbCc7XG5cbmNvbnN0IFNBTklUSVpFX0hUTUxfT1BUSU9OUyA9IHtcbiAgYWxsb3dlZEF0dHJpYnV0ZXM6IHtcbiAgICBhOiBbJ2hyZWYnLCAnbmFtZScsICd0YXJnZXQnLCAndGl0bGUnXSxcbiAgICBpbWc6IFsnYWx0JywgJ3NyYyddXG4gIH0sXG4gIGFsbG93ZWRTY2hlbWVzOiBbJ2RhdGEnLCAnaHR0cCcsICdodHRwcycsICdmdHAnLCAnbWFpbHRvJywgJ3NpcCddLFxuICBhbGxvd2VkVGFnczogW1xuICAgICdhJyxcbiAgICAnYicsXG4gICAgJ2Jsb2NrcXVvdGUnLFxuICAgICdicicsXG4gICAgJ2NhcHRpb24nLFxuICAgICdjb2RlJyxcbiAgICAnZGl2JyxcbiAgICAnZW0nLFxuICAgICdoMScsXG4gICAgJ2gyJyxcbiAgICAnaDMnLFxuICAgICdoNCcsXG4gICAgJ2g1JyxcbiAgICAnaDYnLFxuICAgICdocicsXG4gICAgJ2knLFxuICAgICdpbWcnLFxuICAgICdsaScsXG4gICAgJ25sJyxcbiAgICAnb2wnLFxuICAgICdwJyxcbiAgICAncHJlJyxcbiAgICAnc3BhbicsXG4gICAgJ3N0cmlrZScsXG4gICAgJ3N0cm9uZycsXG4gICAgJ3RhYmxlJyxcbiAgICAndGJvZHknLFxuICAgICd0ZCcsXG4gICAgJ3Rmb290JyxcbiAgICAndGgnLFxuICAgICd0aGVhZCcsXG4gICAgJ3RyJyxcbiAgICAndWwnXG4gIF1cbn07XG5cbmNvbnN0IGN1c3RvbU1hcmtkb3duSXQgPSBuZXcgTWFya2Rvd25JdCh7XG4gIGJyZWFrczogZmFsc2UsXG4gIGh0bWw6IGZhbHNlLFxuICBsaW5raWZ5OiB0cnVlLFxuICB0eXBvZ3JhcGhlcjogdHJ1ZSxcbiAgeGh0bWxPdXQ6IHRydWVcbn0pLnVzZShpdGVyYXRvciwgJ3VybF9uZXdfd2luJywgJ2xpbmtfb3BlbicsICh0b2tlbnMsIGluZGV4KSA9PiB7XG4gIC8vIFRPRE86IFtQNF0gVGhpcyBpcyBjb3BpZWQgZnJvbSB2MyBhbmQgbG9va3MgY2x1bmt5XG4gIC8vICAgICAgIFdlIHNob3VsZCByZWZhY3RvciB0aGlzIGNvZGVcbiAgY29uc3QgdGFyZ2V0QXR0ckluZGV4ID0gdG9rZW5zW2luZGV4XS5hdHRySW5kZXgoJ3RhcmdldCcpO1xuXG4gIGlmICh+dGFyZ2V0QXR0ckluZGV4KSB7XG4gICAgdG9rZW5zW2luZGV4XS5hdHRyc1t0YXJnZXRBdHRySW5kZXhdWzFdID0gJ19ibGFuayc7XG4gIH0gZWxzZSB7XG4gICAgdG9rZW5zW2luZGV4XS5hdHRyUHVzaChbJ3RhcmdldCcsICdfYmxhbmsnXSk7XG4gIH1cblxuICBjb25zdCByZWxBdHRySW5kZXggPSB0b2tlbnNbaW5kZXhdLmF0dHJJbmRleCgncmVsJyk7XG5cbiAgaWYgKH5yZWxBdHRySW5kZXgpIHtcbiAgICB0b2tlbnNbaW5kZXhdLmF0dHJzW3JlbEF0dHJJbmRleF1bMV0gPSAnbm9vcGVuZXIgbm9yZWZlcnJlcic7XG4gIH0gZWxzZSB7XG4gICAgdG9rZW5zW2luZGV4XS5hdHRyUHVzaChbJ3RhcmdldCcsICdub29wZW5lciBub3JlZmVycmVyJ10pO1xuICB9XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVuZGVyKG1hcmtkb3duLCB7IG1hcmtkb3duUmVzcGVjdENSTEYgfSkge1xuICBpZiAobWFya2Rvd25SZXNwZWN0Q1JMRikge1xuICAgIG1hcmtkb3duID0gbWFya2Rvd24ucmVwbGFjZSgvXFxuXFxyfFxcclxcbi9ndSwgY2FycmlhZ2VSZXR1cm4gPT4gKGNhcnJpYWdlUmV0dXJuID09PSAnXFxuXFxyJyA/ICdcXHJcXG4nIDogJ1xcblxccicpKTtcbiAgfVxuICBjb25zdCBodG1sID0gY3VzdG9tTWFya2Rvd25JdC5yZW5kZXIobWFya2Rvd24pO1xuXG4gIHJldHVybiBzYW5pdGl6ZUhUTUwoaHRtbCwgU0FOSVRJWkVfSFRNTF9PUFRJT05TKTtcbn1cbiJdfQ==