"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _memoizeOne = _interopRequireDefault(require("memoize-one"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _AdaptiveCardRenderer = _interopRequireDefault(require("./AdaptiveCardRenderer"));

function stripSubmitAction(card) {
  if (!card.actions) {
    return card;
  } // Filter out HTTP action buttons


  var nextActions = card.actions.filter(function (action) {
    return action.type !== 'Action.Submit';
  }).map(function (action) {
    return action.type === 'Action.ShowCard' ? (0, _objectSpread2.default)({}, action, {
      card: stripSubmitAction(action.card)
    }) : action;
  });
  return (0, _objectSpread2.default)({}, card, {
    nextActions: nextActions
  });
}

var AdaptiveCardAttachment =
/*#__PURE__*/
function (_React$Component) {
  (0, _inherits2.default)(AdaptiveCardAttachment, _React$Component);

  function AdaptiveCardAttachment(props) {
    var _this;

    (0, _classCallCheck2.default)(this, AdaptiveCardAttachment);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(AdaptiveCardAttachment).call(this, props));
    _this.createAdaptiveCard = (0, _memoizeOne.default)(function (adaptiveCards, content) {
      var card = new adaptiveCards.AdaptiveCard();
      var errors = []; // TODO: [P3] Move from "onParseError" to "card.parse(json, errors)"

      adaptiveCards.AdaptiveCard.onParseError = function (error) {
        return errors.push(error);
      };

      card.parse(stripSubmitAction((0, _objectSpread2.default)({
        version: '1.0'
      }, content)));
      adaptiveCards.AdaptiveCard.onParseError = null;
      return {
        card: card,
        errors: errors
      };
    });
    return _this;
  }

  (0, _createClass2.default)(AdaptiveCardAttachment, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          adaptiveCardHostConfig = _this$props.adaptiveCardHostConfig,
          adaptiveCards = _this$props.adaptiveCards,
          attachment = _this$props.attachment,
          renderMarkdown = _this$props.renderMarkdown;

      var _this$createAdaptiveC = this.createAdaptiveCard(adaptiveCards, attachment.content, renderMarkdown),
          card = _this$createAdaptiveC.card;

      return _react.default.createElement(_AdaptiveCardRenderer.default, {
        adaptiveCard: card,
        adaptiveCardHostConfig: adaptiveCardHostConfig
      });
    }
  }]);
  return AdaptiveCardAttachment;
}(_react.default.Component);

exports.default = AdaptiveCardAttachment;
AdaptiveCardAttachment.propTypes = {
  // TODO: [P2] We should rename adaptiveCards to adaptiveCardsPolyfill
  adaptiveCardHostConfig: _propTypes.default.any.isRequired,
  adaptiveCards: _propTypes.default.any.isRequired,
  attachment: _propTypes.default.shape({
    content: _propTypes.default.any.isRequired
  }).isRequired,
  renderMarkdown: _propTypes.default.any.isRequired
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hZGFwdGl2ZUNhcmRzL0F0dGFjaG1lbnQvQWRhcHRpdmVDYXJkQXR0YWNobWVudC5qcyJdLCJuYW1lcyI6WyJzdHJpcFN1Ym1pdEFjdGlvbiIsImNhcmQiLCJhY3Rpb25zIiwibmV4dEFjdGlvbnMiLCJmaWx0ZXIiLCJhY3Rpb24iLCJ0eXBlIiwibWFwIiwiQWRhcHRpdmVDYXJkQXR0YWNobWVudCIsInByb3BzIiwiY3JlYXRlQWRhcHRpdmVDYXJkIiwiYWRhcHRpdmVDYXJkcyIsImNvbnRlbnQiLCJBZGFwdGl2ZUNhcmQiLCJlcnJvcnMiLCJvblBhcnNlRXJyb3IiLCJlcnJvciIsInB1c2giLCJwYXJzZSIsInZlcnNpb24iLCJhZGFwdGl2ZUNhcmRIb3N0Q29uZmlnIiwiYXR0YWNobWVudCIsInJlbmRlck1hcmtkb3duIiwiUmVhY3QiLCJDb21wb25lbnQiLCJwcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJhbnkiLCJpc1JlcXVpcmVkIiwic2hhcGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUVBOztBQUVBLFNBQVNBLGlCQUFULENBQTJCQyxJQUEzQixFQUFpQztBQUMvQixNQUFJLENBQUNBLElBQUksQ0FBQ0MsT0FBVixFQUFtQjtBQUNqQixXQUFPRCxJQUFQO0FBQ0QsR0FIOEIsQ0FLL0I7OztBQUNBLE1BQU1FLFdBQVcsR0FBR0YsSUFBSSxDQUFDQyxPQUFMLENBQ2pCRSxNQURpQixDQUNWLFVBQUFDLE1BQU07QUFBQSxXQUFJQSxNQUFNLENBQUNDLElBQVAsS0FBZ0IsZUFBcEI7QUFBQSxHQURJLEVBRWpCQyxHQUZpQixDQUViLFVBQUFGLE1BQU07QUFBQSxXQUFLQSxNQUFNLENBQUNDLElBQVAsS0FBZ0IsaUJBQWhCLG1DQUF5Q0QsTUFBekM7QUFBaURKLE1BQUFBLElBQUksRUFBRUQsaUJBQWlCLENBQUNLLE1BQU0sQ0FBQ0osSUFBUjtBQUF4RSxTQUEwRkksTUFBL0Y7QUFBQSxHQUZPLENBQXBCO0FBSUEseUNBQVlKLElBQVo7QUFBa0JFLElBQUFBLFdBQVcsRUFBWEE7QUFBbEI7QUFDRDs7SUFFb0JLLHNCOzs7OztBQUNuQixrQ0FBWUMsS0FBWixFQUFtQjtBQUFBOztBQUFBO0FBQ2pCLDRIQUFNQSxLQUFOO0FBRUEsVUFBS0Msa0JBQUwsR0FBMEIseUJBQVEsVUFBQ0MsYUFBRCxFQUFnQkMsT0FBaEIsRUFBNEI7QUFDNUQsVUFBTVgsSUFBSSxHQUFHLElBQUlVLGFBQWEsQ0FBQ0UsWUFBbEIsRUFBYjtBQUNBLFVBQU1DLE1BQU0sR0FBRyxFQUFmLENBRjRELENBSTVEOztBQUNBSCxNQUFBQSxhQUFhLENBQUNFLFlBQWQsQ0FBMkJFLFlBQTNCLEdBQTBDLFVBQUFDLEtBQUs7QUFBQSxlQUFJRixNQUFNLENBQUNHLElBQVAsQ0FBWUQsS0FBWixDQUFKO0FBQUEsT0FBL0M7O0FBRUFmLE1BQUFBLElBQUksQ0FBQ2lCLEtBQUwsQ0FDRWxCLGlCQUFpQjtBQUNmbUIsUUFBQUEsT0FBTyxFQUFFO0FBRE0sU0FFWlAsT0FGWSxFQURuQjtBQU9BRCxNQUFBQSxhQUFhLENBQUNFLFlBQWQsQ0FBMkJFLFlBQTNCLEdBQTBDLElBQTFDO0FBRUEsYUFBTztBQUNMZCxRQUFBQSxJQUFJLEVBQUpBLElBREs7QUFFTGEsUUFBQUEsTUFBTSxFQUFOQTtBQUZLLE9BQVA7QUFJRCxLQXBCeUIsQ0FBMUI7QUFIaUI7QUF3QmxCOzs7OzZCQUVRO0FBQUEsd0JBR0gsSUFIRyxDQUVMTCxLQUZLO0FBQUEsVUFFSVcsc0JBRkosZUFFSUEsc0JBRko7QUFBQSxVQUU0QlQsYUFGNUIsZUFFNEJBLGFBRjVCO0FBQUEsVUFFMkNVLFVBRjNDLGVBRTJDQSxVQUYzQztBQUFBLFVBRXVEQyxjQUZ2RCxlQUV1REEsY0FGdkQ7O0FBQUEsa0NBSVUsS0FBS1osa0JBQUwsQ0FBd0JDLGFBQXhCLEVBQXVDVSxVQUFVLENBQUNULE9BQWxELEVBQTJEVSxjQUEzRCxDQUpWO0FBQUEsVUFJQ3JCLElBSkQseUJBSUNBLElBSkQ7O0FBTVAsYUFBTyw2QkFBQyw2QkFBRDtBQUFzQixRQUFBLFlBQVksRUFBRUEsSUFBcEM7QUFBMEMsUUFBQSxzQkFBc0IsRUFBRW1CO0FBQWxFLFFBQVA7QUFDRDs7O0VBbENpREcsZUFBTUMsUzs7O0FBcUMxRGhCLHNCQUFzQixDQUFDaUIsU0FBdkIsR0FBbUM7QUFDakM7QUFDQUwsRUFBQUEsc0JBQXNCLEVBQUVNLG1CQUFVQyxHQUFWLENBQWNDLFVBRkw7QUFHakNqQixFQUFBQSxhQUFhLEVBQUVlLG1CQUFVQyxHQUFWLENBQWNDLFVBSEk7QUFJakNQLEVBQUFBLFVBQVUsRUFBRUssbUJBQVVHLEtBQVYsQ0FBZ0I7QUFDMUJqQixJQUFBQSxPQUFPLEVBQUVjLG1CQUFVQyxHQUFWLENBQWNDO0FBREcsR0FBaEIsRUFFVEEsVUFOOEI7QUFPakNOLEVBQUFBLGNBQWMsRUFBRUksbUJBQVVDLEdBQVYsQ0FBY0M7QUFQRyxDQUFuQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBtZW1vaXplIGZyb20gJ21lbW9pemUtb25lJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgQWRhcHRpdmVDYXJkUmVuZGVyZXIgZnJvbSAnLi9BZGFwdGl2ZUNhcmRSZW5kZXJlcic7XG5cbmZ1bmN0aW9uIHN0cmlwU3VibWl0QWN0aW9uKGNhcmQpIHtcbiAgaWYgKCFjYXJkLmFjdGlvbnMpIHtcbiAgICByZXR1cm4gY2FyZDtcbiAgfVxuXG4gIC8vIEZpbHRlciBvdXQgSFRUUCBhY3Rpb24gYnV0dG9uc1xuICBjb25zdCBuZXh0QWN0aW9ucyA9IGNhcmQuYWN0aW9uc1xuICAgIC5maWx0ZXIoYWN0aW9uID0+IGFjdGlvbi50eXBlICE9PSAnQWN0aW9uLlN1Ym1pdCcpXG4gICAgLm1hcChhY3Rpb24gPT4gKGFjdGlvbi50eXBlID09PSAnQWN0aW9uLlNob3dDYXJkJyA/IHsgLi4uYWN0aW9uLCBjYXJkOiBzdHJpcFN1Ym1pdEFjdGlvbihhY3Rpb24uY2FyZCkgfSA6IGFjdGlvbikpO1xuXG4gIHJldHVybiB7IC4uLmNhcmQsIG5leHRBY3Rpb25zIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFkYXB0aXZlQ2FyZEF0dGFjaG1lbnQgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcblxuICAgIHRoaXMuY3JlYXRlQWRhcHRpdmVDYXJkID0gbWVtb2l6ZSgoYWRhcHRpdmVDYXJkcywgY29udGVudCkgPT4ge1xuICAgICAgY29uc3QgY2FyZCA9IG5ldyBhZGFwdGl2ZUNhcmRzLkFkYXB0aXZlQ2FyZCgpO1xuICAgICAgY29uc3QgZXJyb3JzID0gW107XG5cbiAgICAgIC8vIFRPRE86IFtQM10gTW92ZSBmcm9tIFwib25QYXJzZUVycm9yXCIgdG8gXCJjYXJkLnBhcnNlKGpzb24sIGVycm9ycylcIlxuICAgICAgYWRhcHRpdmVDYXJkcy5BZGFwdGl2ZUNhcmQub25QYXJzZUVycm9yID0gZXJyb3IgPT4gZXJyb3JzLnB1c2goZXJyb3IpO1xuXG4gICAgICBjYXJkLnBhcnNlKFxuICAgICAgICBzdHJpcFN1Ym1pdEFjdGlvbih7XG4gICAgICAgICAgdmVyc2lvbjogJzEuMCcsXG4gICAgICAgICAgLi4uY29udGVudFxuICAgICAgICB9KVxuICAgICAgKTtcblxuICAgICAgYWRhcHRpdmVDYXJkcy5BZGFwdGl2ZUNhcmQub25QYXJzZUVycm9yID0gbnVsbDtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY2FyZCxcbiAgICAgICAgZXJyb3JzXG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIHByb3BzOiB7IGFkYXB0aXZlQ2FyZEhvc3RDb25maWcsIGFkYXB0aXZlQ2FyZHMsIGF0dGFjaG1lbnQsIHJlbmRlck1hcmtkb3duIH1cbiAgICB9ID0gdGhpcztcbiAgICBjb25zdCB7IGNhcmQgfSA9IHRoaXMuY3JlYXRlQWRhcHRpdmVDYXJkKGFkYXB0aXZlQ2FyZHMsIGF0dGFjaG1lbnQuY29udGVudCwgcmVuZGVyTWFya2Rvd24pO1xuXG4gICAgcmV0dXJuIDxBZGFwdGl2ZUNhcmRSZW5kZXJlciBhZGFwdGl2ZUNhcmQ9e2NhcmR9IGFkYXB0aXZlQ2FyZEhvc3RDb25maWc9e2FkYXB0aXZlQ2FyZEhvc3RDb25maWd9IC8+O1xuICB9XG59XG5cbkFkYXB0aXZlQ2FyZEF0dGFjaG1lbnQucHJvcFR5cGVzID0ge1xuICAvLyBUT0RPOiBbUDJdIFdlIHNob3VsZCByZW5hbWUgYWRhcHRpdmVDYXJkcyB0byBhZGFwdGl2ZUNhcmRzUG9seWZpbGxcbiAgYWRhcHRpdmVDYXJkSG9zdENvbmZpZzogUHJvcFR5cGVzLmFueS5pc1JlcXVpcmVkLFxuICBhZGFwdGl2ZUNhcmRzOiBQcm9wVHlwZXMuYW55LmlzUmVxdWlyZWQsXG4gIGF0dGFjaG1lbnQ6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgY29udGVudDogUHJvcFR5cGVzLmFueS5pc1JlcXVpcmVkXG4gIH0pLmlzUmVxdWlyZWQsXG4gIHJlbmRlck1hcmtkb3duOiBQcm9wVHlwZXMuYW55LmlzUmVxdWlyZWRcbn07XG4iXX0=