"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _adaptivecards = require("adaptivecards");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _botframeworkWebchatComponent = require("botframework-webchat-component");

/* eslint no-magic-numbers: ["error", { "ignore": [0, 2] }] */
var ErrorBox = _botframeworkWebchatComponent.Components.ErrorBox;

function isPlainObject(obj) {
  return Object.getPrototypeOf(obj) === Object.prototype;
}

var AdaptiveCardRenderer =
/*#__PURE__*/
function (_React$PureComponent) {
  (0, _inherits2.default)(AdaptiveCardRenderer, _React$PureComponent);

  function AdaptiveCardRenderer(props) {
    var _this;

    (0, _classCallCheck2.default)(this, AdaptiveCardRenderer);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(AdaptiveCardRenderer).call(this, props));
    _this.handleClick = _this.handleClick.bind((0, _assertThisInitialized2.default)(_this));
    _this.handleExecuteAction = _this.handleExecuteAction.bind((0, _assertThisInitialized2.default)(_this));
    _this.contentRef = _react.default.createRef();
    _this.state = {
      error: null
    };
    return _this;
  }

  (0, _createClass2.default)(AdaptiveCardRenderer, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.renderCard();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(_ref) {
      var prevAdaptiveCard = _ref.adaptiveCard;
      var adaptiveCard = this.props.adaptiveCard;
      prevAdaptiveCard !== adaptiveCard && this.renderCard();
    }
  }, {
    key: "handleClick",
    value: function handleClick(_ref2) {
      var target = _ref2.target;
      var _this$props = this.props,
          disabled = _this$props.disabled,
          onCardAction = _this$props.onCardAction,
          tapAction = _this$props.tapAction; // Some items, e.g. tappable text, cannot be disabled thru DOM attributes

      if (!disabled) {
        var tabIndex = (0, _botframeworkWebchatComponent.getTabIndex)(target); // If the user is clicking on something that is already clickable, do not allow them to click the card.
        // E.g. a hero card can be tappable, and image and buttons inside the hero card can also be tappable.

        if (typeof tabIndex !== 'number' || tabIndex < 0) {
          tapAction && onCardAction(tapAction);
        }
      }
    }
  }, {
    key: "handleExecuteAction",
    value: function handleExecuteAction(action) {
      var _this$props2 = this.props,
          disabled = _this$props2.disabled,
          onCardAction = _this$props2.onCardAction; // Some items, e.g. tappable image, cannot be disabled thru DOM attributes

      if (disabled) {
        return;
      }

      var actionTypeName = action.getJsonTypeName();

      if (actionTypeName === 'Action.OpenUrl') {
        onCardAction({
          type: 'openUrl',
          value: action.url
        });
      } else if (actionTypeName === 'Action.Submit') {
        if (typeof action.data !== 'undefined') {
          var actionData = action.data;

          if (actionData && actionData.__isBotFrameworkCardAction) {
            var cardAction = actionData.cardAction;
            var displayText = cardAction.displayText,
                type = cardAction.type,
                value = cardAction.value;
            onCardAction({
              displayText: displayText,
              type: type,
              value: value
            });
          } else {
            onCardAction({
              type: typeof action.data === 'string' ? 'imBack' : 'postBack',
              value: action.data
            });
          }
        }
      } else {
        console.error("Web Chat: received unknown action from Adaptive Cards");
        console.error(action);
      }
    }
  }, {
    key: "renderCard",
    value: function renderCard() {
      var current = this.contentRef.current,
          _this$props3 = this.props,
          adaptiveCard = _this$props3.adaptiveCard,
          adaptiveCardHostConfig = _this$props3.adaptiveCardHostConfig,
          disabled = _this$props3.disabled,
          renderMarkdown = _this$props3.renderMarkdown,
          error = this.state.error;

      if (current && adaptiveCard) {
        // Currently, the only way to set the Markdown engine is to set it thru static member of AdaptiveCard class
        // TODO: [P3] Checks if we could make the "renderMarkdown" per card
        //       This could be limitations from Adaptive Cards package
        //       Because there could be timing difference between .parse and .render, we could be using wrong Markdown engine
        adaptiveCard.constructor.onProcessMarkdown = function (text, result) {
          if (renderMarkdown) {
            result.outputHtml = renderMarkdown(text);
            result.didProcess = true;
          }
        };

        adaptiveCard.onExecuteAction = this.handleExecuteAction;

        if (adaptiveCardHostConfig) {
          adaptiveCard.hostConfig = isPlainObject(adaptiveCardHostConfig) ? new _adaptivecards.HostConfig(adaptiveCardHostConfig) : adaptiveCardHostConfig;
        }

        var _adaptiveCard$validat = adaptiveCard.validateProperties(),
            failures = _adaptiveCard$validat.failures;

        if (failures.length) {
          // TODO: [P3] Since this can be called from `componentDidUpdate` and potentially error, we should fix a better way to propagate the error.
          var errors = failures.map(function (_ref3) {
            var errors = _ref3.errors;
            return errors;
          }).flat();
          return this.setState(function () {
            return {
              error: errors
            };
          });
        }

        var element;

        try {
          element = adaptiveCard.render();
        } catch (error) {
          return this.setState(function () {
            return {
              error: error
            };
          });
        }

        if (!element) {
          return this.setState(function () {
            return {
              error: 'Adaptive Card rendered as empty element'
            };
          });
        }

        error && this.setState(function () {
          return {
            error: null
          };
        });

        if (disabled) {
          var hyperlinks = element.querySelectorAll('a');
          var inputs = element.querySelectorAll('button, input, select, textarea');
          [].forEach.call(inputs, function (input) {
            input.disabled = true;
          });
          [].forEach.call(hyperlinks, function (hyperlink) {
            hyperlink.addEventListener('click', function (event) {
              event.preventDefault();
              event.stopImmediatePropagation();
              event.stopPropagation();
            });
          });
        }

        var _current$children = (0, _slicedToArray2.default)(current.children, 1),
            firstChild = _current$children[0];

        if (firstChild) {
          current.replaceChild(element, firstChild);
        } else {
          current.appendChild(element);
        }
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props4 = this.props,
          language = _this$props4.language,
          styleSet = _this$props4.styleSet,
          error = this.state.error;
      return error ? _react.default.createElement(ErrorBox, {
        message: (0, _botframeworkWebchatComponent.localize)('Adaptive Card render error', language)
      }, _react.default.createElement("pre", null, JSON.stringify(error, null, 2))) : _react.default.createElement("div", {
        className: styleSet.adaptiveCardRenderer,
        onClick: this.handleClick,
        ref: this.contentRef
      });
    }
  }]);
  return AdaptiveCardRenderer;
}(_react.default.PureComponent);

AdaptiveCardRenderer.propTypes = {
  adaptiveCard: _propTypes.default.any.isRequired,
  adaptiveCardHostConfig: _propTypes.default.any.isRequired,
  disabled: _propTypes.default.bool,
  language: _propTypes.default.string.isRequired,
  onCardAction: _propTypes.default.func.isRequired,
  renderMarkdown: _propTypes.default.func.isRequired,
  styleSet: _propTypes.default.shape({
    adaptiveCardRenderer: _propTypes.default.any.isRequired
  }).isRequired,
  tapAction: _propTypes.default.func
};
AdaptiveCardRenderer.defaultProps = {
  disabled: false,
  tapAction: undefined
};

var _default = (0, _botframeworkWebchatComponent.connectToWebChat)(function (_ref4) {
  var disabled = _ref4.disabled,
      language = _ref4.language,
      onCardAction = _ref4.onCardAction,
      renderMarkdown = _ref4.renderMarkdown,
      styleSet = _ref4.styleSet,
      tapAction = _ref4.tapAction;
  return {
    disabled: disabled,
    language: language,
    onCardAction: onCardAction,
    renderMarkdown: renderMarkdown,
    styleSet: styleSet,
    tapAction: tapAction
  };
})(AdaptiveCardRenderer);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,