"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _memoizeOne = _interopRequireDefault(require("memoize-one"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _botframeworkWebchatComponent = require("botframework-webchat-component");

var _AdaptiveCardBuilder = _interopRequireDefault(require("./AdaptiveCardBuilder"));

var _AdaptiveCardRenderer = _interopRequireDefault(require("./AdaptiveCardRenderer"));

/* eslint no-magic-numbers: ["error", { "ignore": [25, 75] }] */
var ThumbnailCardAttachment =
/*#__PURE__*/
function (_React$Component) {
  (0, _inherits2.default)(ThumbnailCardAttachment, _React$Component);

  function ThumbnailCardAttachment(props) {
    var _this;

    (0, _classCallCheck2.default)(this, ThumbnailCardAttachment);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(ThumbnailCardAttachment).call(this, props));
    _this.buildCard = (0, _memoizeOne.default)(function (adaptiveCards, content, styleOptions) {
      var builder = new _AdaptiveCardBuilder.default(adaptiveCards, styleOptions);
      var TextSize = adaptiveCards.TextSize,
          TextWeight = adaptiveCards.TextWeight;
      var buttons = content.buttons,
          images = content.images,
          subtitle = content.subtitle,
          text = content.text,
          title = content.title;
      var richCardWrapTitle = styleOptions.richCardWrapTitle;

      if (images && images.length) {
        var _builder$addColumnSet = builder.addColumnSet([75, 25]),
            _builder$addColumnSet2 = (0, _slicedToArray2.default)(_builder$addColumnSet, 2),
            firstColumn = _builder$addColumnSet2[0],
            lastColumn = _builder$addColumnSet2[1];

        var _images = (0, _slicedToArray2.default)(images, 1),
            _images$ = _images[0],
            tap = _images$.tap,
            url = _images$.url;

        builder.addTextBlock(title, {
          size: TextSize.Medium,
          weight: TextWeight.Bolder,
          wrap: richCardWrapTitle
        }, firstColumn);
        builder.addTextBlock(subtitle, {
          isSubtle: true,
          wrap: richCardWrapTitle
        }, firstColumn);
        builder.addImage(url, lastColumn, tap);
        builder.addTextBlock(text, {
          wrap: true
        });
        builder.addButtons(buttons);
      } else {
        builder.addCommon(content);
      }

      return builder.card;
    });
    return _this;
  }

  (0, _createClass2.default)(ThumbnailCardAttachment, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          adaptiveCardHostConfig = _this$props.adaptiveCardHostConfig,
          adaptiveCards = _this$props.adaptiveCards,
          _this$props$attachmen = _this$props.attachment;
      _this$props$attachmen = _this$props$attachmen === void 0 ? {} : _this$props$attachmen;
      var content = _this$props$attachmen.content,
          options = _this$props.styleSet.options;
      return _react.default.createElement(_AdaptiveCardRenderer.default, {
        adaptiveCard: content && this.buildCard(adaptiveCards, content, options),
        adaptiveCardHostConfig: adaptiveCardHostConfig,
        tapAction: content && content.tap
      });
    }
  }]);
  return ThumbnailCardAttachment;
}(_react.default.Component);

ThumbnailCardAttachment.propTypes = {
  adaptiveCardHostConfig: _propTypes.default.any.isRequired,
  adaptiveCards: _propTypes.default.any.isRequired,
  attachment: _propTypes.default.shape({
    content: _propTypes.default.shape({
      buttons: _propTypes.default.array,
      images: _propTypes.default.arrayOf(_propTypes.default.shape({
        tap: _propTypes.default.any,
        url: _propTypes.default.string.isRequired
      })),
      subtitle: _propTypes.default.string,
      tap: _propTypes.default.any,
      text: _propTypes.default.string,
      title: _propTypes.default.string
    }).isRequired
  }).isRequired
};

var _default = (0, _botframeworkWebchatComponent.connectToWebChat)(function (_ref) {
  var styleSet = _ref.styleSet;
  return {
    styleSet: styleSet
  };
})(ThumbnailCardAttachment);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hZGFwdGl2ZUNhcmRzL0F0dGFjaG1lbnQvVGh1bWJuYWlsQ2FyZEF0dGFjaG1lbnQuanMiXSwibmFtZXMiOlsiVGh1bWJuYWlsQ2FyZEF0dGFjaG1lbnQiLCJwcm9wcyIsImJ1aWxkQ2FyZCIsImFkYXB0aXZlQ2FyZHMiLCJjb250ZW50Iiwic3R5bGVPcHRpb25zIiwiYnVpbGRlciIsIkFkYXB0aXZlQ2FyZEJ1aWxkZXIiLCJUZXh0U2l6ZSIsIlRleHRXZWlnaHQiLCJidXR0b25zIiwiaW1hZ2VzIiwic3VidGl0bGUiLCJ0ZXh0IiwidGl0bGUiLCJyaWNoQ2FyZFdyYXBUaXRsZSIsImxlbmd0aCIsImFkZENvbHVtblNldCIsImZpcnN0Q29sdW1uIiwibGFzdENvbHVtbiIsInRhcCIsInVybCIsImFkZFRleHRCbG9jayIsInNpemUiLCJNZWRpdW0iLCJ3ZWlnaHQiLCJCb2xkZXIiLCJ3cmFwIiwiaXNTdWJ0bGUiLCJhZGRJbWFnZSIsImFkZEJ1dHRvbnMiLCJhZGRDb21tb24iLCJjYXJkIiwiYWRhcHRpdmVDYXJkSG9zdENvbmZpZyIsImF0dGFjaG1lbnQiLCJvcHRpb25zIiwic3R5bGVTZXQiLCJSZWFjdCIsIkNvbXBvbmVudCIsInByb3BUeXBlcyIsIlByb3BUeXBlcyIsImFueSIsImlzUmVxdWlyZWQiLCJzaGFwZSIsImFycmF5IiwiYXJyYXlPZiIsInN0cmluZyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBUkE7SUFVTUEsdUI7Ozs7O0FBQ0osbUNBQVlDLEtBQVosRUFBbUI7QUFBQTs7QUFBQTtBQUNqQiw2SEFBTUEsS0FBTjtBQUVBLFVBQUtDLFNBQUwsR0FBaUIseUJBQVEsVUFBQ0MsYUFBRCxFQUFnQkMsT0FBaEIsRUFBeUJDLFlBQXpCLEVBQTBDO0FBQ2pFLFVBQU1DLE9BQU8sR0FBRyxJQUFJQyw0QkFBSixDQUF3QkosYUFBeEIsRUFB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QUFnQjtBQUMxQnZDLElBQUFBLE9BQU8sRUFBRW9DLG1CQUFVRyxLQUFWLENBQWdCO0FBQ3ZCakMsTUFBQUEsT0FBTyxFQUFFOEIsbUJBQVVJLEtBREk7QUFFdkJqQyxNQUFBQSxNQUFNLEVBQUU2QixtQkFBVUssT0FBVixDQUNOTCxtQkFBVUcsS0FBVixDQUFnQjtBQUNkdkIsUUFBQUEsR0FBRyxFQUFFb0IsbUJBQVVDLEdBREQ7QUFFZHBCLFFBQUFBLEdBQUcsRUFBRW1CLG1CQUFVTSxNQUFWLENBQWlCSjtBQUZSLE9BQWhCLENBRE0sQ0FGZTtBQVF2QjlCLE1BQUFBLFFBQVEsRUFBRTRCLG1CQUFVTSxNQVJHO0FBU3ZCMUIsTUFBQUEsR0FBRyxFQUFFb0IsbUJBQVVDLEdBVFE7QUFVdkI1QixNQUFBQSxJQUFJLEVBQUUyQixtQkFBVU0sTUFWTztBQVd2QmhDLE1BQUFBLEtBQUssRUFBRTBCLG1CQUFVTTtBQVhNLEtBQWhCLEVBWU5KO0FBYnVCLEdBQWhCLEVBY1RBO0FBakIrQixDQUFwQzs7ZUFvQmUsb0RBQWlCO0FBQUEsTUFBR04sUUFBSCxRQUFHQSxRQUFIO0FBQUEsU0FBbUI7QUFBRUEsSUFBQUEsUUFBUSxFQUFSQTtBQUFGLEdBQW5CO0FBQUEsQ0FBakIsRUFBbURwQyx1QkFBbkQsQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludCBuby1tYWdpYy1udW1iZXJzOiBbXCJlcnJvclwiLCB7IFwiaWdub3JlXCI6IFsyNSwgNzVdIH1dICovXG5cbmltcG9ydCBtZW1vaXplIGZyb20gJ21lbW9pemUtb25lJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyBjb25uZWN0VG9XZWJDaGF0IH0gZnJvbSAnYm90ZnJhbWV3b3JrLXdlYmNoYXQtY29tcG9uZW50JztcbmltcG9ydCBBZGFwdGl2ZUNhcmRCdWlsZGVyIGZyb20gJy4vQWRhcHRpdmVDYXJkQnVpbGRlcic7XG5pbXBvcnQgQWRhcHRpdmVDYXJkUmVuZGVyZXIgZnJvbSAnLi9BZGFwdGl2ZUNhcmRSZW5kZXJlcic7XG5cbmNsYXNzIFRodW1ibmFpbENhcmRBdHRhY2htZW50IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG5cbiAgICB0aGlzLmJ1aWxkQ2FyZCA9IG1lbW9pemUoKGFkYXB0aXZlQ2FyZHMsIGNvbnRlbnQsIHN0eWxlT3B0aW9ucykgPT4ge1xuICAgICAgY29uc3QgYnVpbGRlciA9IG5ldyBBZGFwdGl2ZUNhcmRCdWlsZGVyKGFkYXB0aXZlQ2FyZHMsIHN0eWxlT3B0aW9ucyk7XG4gICAgICBjb25zdCB7IFRleHRTaXplLCBUZXh0V2VpZ2h0IH0gPSBhZGFwdGl2ZUNhcmRzO1xuICAgICAgY29uc3QgeyBidXR0b25zLCBpbWFnZXMsIHN1YnRpdGxlLCB0ZXh0LCB0aXRsZSB9ID0gY29udGVudDtcbiAgICAgIGNvbnN0IHsgcmljaENhcmRXcmFwVGl0bGUgfSA9IHN0eWxlT3B0aW9ucztcblxuICAgICAgaWYgKGltYWdlcyAmJiBpbWFnZXMubGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IFtmaXJzdENvbHVtbiwgbGFzdENvbHVtbl0gPSBidWlsZGVyLmFkZENvbHVtblNldChbNzUsIDI1XSk7XG4gICAgICAgIGNvbnN0IFt7IHRhcCwgdXJsIH1dID0gaW1hZ2VzO1xuXG4gICAgICAgIGJ1aWxkZXIuYWRkVGV4dEJsb2NrKFxuICAgICAgICAgIHRpdGxlLFxuICAgICAgICAgIHsgc2l6ZTogVGV4dFNpemUuTWVkaXVtLCB3ZWlnaHQ6IFRleHRXZWlnaHQuQm9sZGVyLCB3cmFwOiByaWNoQ2FyZFdyYXBUaXRsZSB9LFxuICAgICAgICAgIGZpcnN0Q29sdW1uXG4gICAgICAgICk7XG4gICAgICAgIGJ1aWxkZXIuYWRkVGV4dEJsb2NrKHN1YnRpdGxlLCB7IGlzU3VidGxlOiB0cnVlLCB3cmFwOiByaWNoQ2FyZFdyYXBUaXRsZSB9LCBmaXJzdENvbHVtbik7XG4gICAgICAgIGJ1aWxkZXIuYWRkSW1hZ2UodXJsLCBsYXN0Q29sdW1uLCB0YXApO1xuICAgICAgICBidWlsZGVyLmFkZFRleHRCbG9jayh0ZXh0LCB7IHdyYXA6IHRydWUgfSk7XG4gICAgICAgIGJ1aWxkZXIuYWRkQnV0dG9ucyhidXR0b25zKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJ1aWxkZXIuYWRkQ29tbW9uKGNvbnRlbnQpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYnVpbGRlci5jYXJkO1xuICAgIH0pO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIHByb3BzOiB7XG4gICAgICAgIGFkYXB0aXZlQ2FyZEhvc3RDb25maWcsXG4gICAgICAgIGFkYXB0aXZlQ2FyZHMsXG4gICAgICAgIGF0dGFjaG1lbnQ6IHsgY29udGVudCB9ID0ge30sXG4gICAgICAgIHN0eWxlU2V0OiB7IG9wdGlvbnMgfVxuICAgICAgfVxuICAgIH0gPSB0aGlzO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxBZGFwdGl2ZUNhcmRSZW5kZXJlclxuICAgICAgICBhZGFwdGl2ZUNhcmQ9e2NvbnRlbnQgJiYgdGhpcy5idWlsZENhcmQoYWRhcHRpdmVDYXJkcywgY29udGVudCwgb3B0aW9ucyl9XG4gICAgICAgIGFkYXB0aXZlQ2FyZEhvc3RDb25maWc9e2FkYXB0aXZlQ2FyZEhvc3RDb25maWd9XG4gICAgICAgIHRhcEFjdGlvbj17Y29udGVudCAmJiBjb250ZW50LnRhcH1cbiAgICAgIC8+XG4gICAgKTtcbiAgfVxufVxuXG5UaHVtYm5haWxDYXJkQXR0YWNobWVudC5wcm9wVHlwZXMgPSB7XG4gIGFkYXB0aXZlQ2FyZEhvc3RDb25maWc6IFByb3BUeXBlcy5hbnkuaXNSZXF1aXJlZCxcbiAgYWRhcHRpdmVDYXJkczogUHJvcFR5cGVzLmFueS5pc1JlcXVpcmVkLFxuICBhdHRhY2htZW50OiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGNvbnRlbnQ6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICBidXR0b25zOiBQcm9wVHlwZXMuYXJyYXksXG4gICAgICBpbWFnZXM6IFByb3BUeXBlcy5hcnJheU9mKFxuICAgICAgICBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgICAgIHRhcDogUHJvcFR5cGVzLmFueSxcbiAgICAgICAgICB1cmw6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZFxuICAgICAgICB9KVxuICAgICAgKSxcbiAgICAgIHN1YnRpdGxlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgdGFwOiBQcm9wVHlwZXMuYW55LFxuICAgICAgdGV4dDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgIHRpdGxlOiBQcm9wVHlwZXMuc3RyaW5nXG4gICAgfSkuaXNSZXF1aXJlZFxuICB9KS5pc1JlcXVpcmVkXG59O1xuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0VG9XZWJDaGF0KCh7IHN0eWxlU2V0IH0pID0+ICh7IHN0eWxlU2V0IH0pKShUaHVtYm5haWxDYXJkQXR0YWNobWVudCk7XG4iXX0=