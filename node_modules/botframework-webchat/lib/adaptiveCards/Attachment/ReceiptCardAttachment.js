"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _toArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toArray"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _botframeworkWebchatComponent = require("botframework-webchat-component");

var _memoizeOne = _interopRequireDefault(require("memoize-one"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _AdaptiveCardBuilder = _interopRequireDefault(require("./AdaptiveCardBuilder"));

var _AdaptiveCardRenderer = _interopRequireDefault(require("./AdaptiveCardRenderer"));

/* eslint no-magic-numbers: ["error", { "ignore": [0, 1, 10, 15, 25, 75] }] */
function nullOrUndefined(obj) {
  return obj === null || typeof obj === 'undefined';
}

var ReceiptCardAttachment =
/*#__PURE__*/
function (_React$Component) {
  (0, _inherits2.default)(ReceiptCardAttachment, _React$Component);

  function ReceiptCardAttachment(props) {
    var _this;

    (0, _classCallCheck2.default)(this, ReceiptCardAttachment);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(ReceiptCardAttachment).call(this, props));
    _this.buildCard = (0, _memoizeOne.default)(function (adaptiveCards, _ref, language, styleOptions) {
      var buttons = _ref.buttons,
          facts = _ref.facts,
          items = _ref.items,
          tax = _ref.tax,
          title = _ref.title,
          total = _ref.total,
          vat = _ref.vat;
      var builder = new _AdaptiveCardBuilder.default(adaptiveCards, styleOptions);
      var HorizontalAlignment = adaptiveCards.HorizontalAlignment,
          TextSize = adaptiveCards.TextSize,
          TextWeight = adaptiveCards.TextWeight;
      var richCardWrapTitle = styleOptions.richCardWrapTitle;
      builder.addTextBlock(title, {
        size: TextSize.Medium,
        weight: TextWeight.Bolder,
        wrap: richCardWrapTitle
      });

      if (facts) {
        var _builder$addColumnSet = builder.addColumnSet([75, 25]),
            _builder$addColumnSet2 = (0, _slicedToArray2.default)(_builder$addColumnSet, 2),
            firstFactColumn = _builder$addColumnSet2[0],
            lastFactColumn = _builder$addColumnSet2[1]; // tslint:disable-next-line:no-unused-expression


        facts.map(function (_ref2) {
          var key = _ref2.key,
              value = _ref2.value;
          builder.addTextBlock(key, {
            size: TextSize.Medium
          }, firstFactColumn);
          builder.addTextBlock(value, {
            size: TextSize.Medium,
            horizontalAlignment: HorizontalAlignment.Right
          }, lastFactColumn);
        });
      } // tslint:disable-next-line:no-unused-expression


      items && items.map(function (_ref3) {
        var _ref3$image = _ref3.image;
        _ref3$image = _ref3$image === void 0 ? {} : _ref3$image;
        var tap = _ref3$image.tap,
            url = _ref3$image.url,
            price = _ref3.price,
            subtitle = _ref3.subtitle,
            title = _ref3.title;
        var itemColumns;

        if (url) {
          var _builder$addColumnSet3 = builder.addColumnSet([15, 75, 10]),
              _builder$addColumnSet4 = (0, _toArray2.default)(_builder$addColumnSet3),
              itemImageColumn = _builder$addColumnSet4[0],
              columns = _builder$addColumnSet4.slice(1);

          itemColumns = columns;
          builder.addImage(url, itemImageColumn, tap);
        } else {
          itemColumns = builder.addColumnSet([75, 25]);
        }

        var _itemColumns = itemColumns,
            _itemColumns2 = (0, _slicedToArray2.default)(_itemColumns, 2),
            itemTitleColumn = _itemColumns2[0],
            itemPriceColumn = _itemColumns2[1];

        builder.addTextBlock(title, {
          size: TextSize.Medium,
          weight: TextWeight.Bolder,
          wrap: richCardWrapTitle
        }, itemTitleColumn);
        builder.addTextBlock(subtitle, {
          size: TextSize.Medium,
          wrap: richCardWrapTitle
        }, itemTitleColumn);
        builder.addTextBlock(price, {
          horizontalAlignment: HorizontalAlignment.Right
        }, itemPriceColumn);
      });

      if (!nullOrUndefined(vat)) {
        var vatCol = builder.addColumnSet([75, 25]);
        builder.addTextBlock((0, _botframeworkWebchatComponent.localize)('VAT', language), {
          size: TextSize.Medium,
          weight: TextWeight.Bolder
        }, vatCol[0]);
        builder.addTextBlock(vat, {
          horizontalAlignment: HorizontalAlignment.Right
        }, vatCol[1]);
      }

      if (!nullOrUndefined(tax)) {
        var taxCol = builder.addColumnSet([75, 25]);
        builder.addTextBlock((0, _botframeworkWebchatComponent.localize)('Tax', language), {
          size: TextSize.Medium,
          weight: TextWeight.Bolder
        }, taxCol[0]);
        builder.addTextBlock(tax, {
          horizontalAlignment: HorizontalAlignment.Right
        }, taxCol[1]);
      }

      if (!nullOrUndefined(total)) {
        var totalCol = builder.addColumnSet([75, 25]);
        builder.addTextBlock((0, _botframeworkWebchatComponent.localize)('Total', language), {
          size: TextSize.Medium,
          weight: TextWeight.Bolder
        }, totalCol[0]);
        builder.addTextBlock(total, {
          horizontalAlignment: HorizontalAlignment.Right,
          size: TextSize.Medium,
          weight: TextWeight.Bolder
        }, totalCol[1]);
      }

      builder.addButtons(buttons);
      return builder.card;
    });
    return _this;
  }

  (0, _createClass2.default)(ReceiptCardAttachment, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          adaptiveCardHostConfig = _this$props.adaptiveCardHostConfig,
          adaptiveCards = _this$props.adaptiveCards,
          _this$props$attachmen = _this$props.attachment;
      _this$props$attachmen = _this$props$attachmen === void 0 ? {} : _this$props$attachmen;
      var content = _this$props$attachmen.content,
          language = _this$props.language,
          options = _this$props.styleSet.options;
      return _react.default.createElement(_AdaptiveCardRenderer.default, {
        adaptiveCard: content && this.buildCard(adaptiveCards, content, language, options),
        adaptiveCardHostConfig: adaptiveCardHostConfig,
        tapAction: content && content.tap
      });
    }
  }]);
  return ReceiptCardAttachment;
}(_react.default.Component);

ReceiptCardAttachment.propTypes = {
  adaptiveCardHostConfig: _propTypes.default.any.isRequired,
  adaptiveCards: _propTypes.default.any.isRequired,
  attachment: _propTypes.default.shape({
    content: _propTypes.default.shape({
      buttons: _propTypes.default.array,
      fact: _propTypes.default.arrayOf(_propTypes.default.shape({
        key: _propTypes.default.string,
        value: _propTypes.default.string
      })),
      items: _propTypes.default.arrayOf(_propTypes.default.shape({
        image: _propTypes.default.shape({
          tap: _propTypes.default.any,
          url: _propTypes.default.string.isRequired
        }),
        price: _propTypes.default.string.isRequired,
        subtitle: _propTypes.default.string,
        title: _propTypes.default.string.isRequired
      })),
      tax: _propTypes.default.string,
      title: _propTypes.default.string,
      total: _propTypes.default.string,
      vat: _propTypes.default.string
    }).isRequired
  }).isRequired,
  language: _propTypes.default.string.isRequired,
  styleSet: _propTypes.default.shape({
    options: _propTypes.default.any.isRequired
  }).isRequired
};

var _default = (0, _botframeworkWebchatComponent.connectToWebChat)(function (_ref4) {
  var language = _ref4.language,
      styleSet = _ref4.styleSet;
  return {
    language: language,
    styleSet: styleSet
  };
})(ReceiptCardAttachment);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,